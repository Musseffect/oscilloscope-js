{"version":3,"sources":["webpack://Exp/webpack/bootstrap","webpack://Exp/./node_modules/antlr4/Utils.js","webpack://Exp/./node_modules/antlr4/Token.js","webpack://Exp/./node_modules/antlr4/IntervalSet.js","webpack://Exp/./node_modules/antlr4/atn/ATNState.js","webpack://Exp/./node_modules/antlr4/tree/Tree.js","webpack://Exp/./node_modules/antlr4/error/Errors.js","webpack://Exp/./node_modules/antlr4/PredictionContext.js","webpack://Exp/./node_modules/antlr4/atn/ATN.js","webpack://Exp/./node_modules/antlr4/atn/Transition.js","webpack://Exp/./node_modules/antlr4/atn/ATNConfigSet.js","webpack://Exp/./node_modules/antlr4/atn/SemanticContext.js","webpack://Exp/./node_modules/antlr4/dfa/DFAState.js","webpack://Exp/./node_modules/antlr4/index.js","webpack://Exp/./node_modules/antlr4/atn/ATNConfig.js","webpack://Exp/./node_modules/antlr4/RuleContext.js","webpack://Exp/./node_modules/antlr4/Lexer.js","webpack://Exp/./node_modules/antlr4/error/ErrorListener.js","webpack://Exp/./node_modules/antlr4/dfa/DFASerializer.js","webpack://Exp/./src/expression.ts","webpack://Exp/./node_modules/antlr4/ParserRuleContext.js","webpack://Exp/./node_modules/antlr4/InputStream.js","webpack://Exp/./src/astNode.ts","webpack://Exp/./src/functions.ts","webpack://Exp/./src/grammar/antlrOutput/expGrammarVisitor.js","webpack://Exp/./node_modules/antlr4/tree/Trees.js","webpack://Exp/./node_modules/antlr4/atn/ATNDeserializer.js","webpack://Exp/./node_modules/antlr4/atn/ATNDeserializationOptions.js","webpack://Exp/./node_modules/antlr4/atn/LexerAction.js","webpack://Exp/./node_modules/antlr4/Recognizer.js","webpack://Exp/./node_modules/antlr4/atn/ATNSimulator.js","webpack://Exp/./node_modules/antlr4/atn/PredictionMode.js","webpack://Exp/./node_modules/antlr4/polyfills/codepointat.js","webpack://Exp/./node_modules/antlr4/polyfills/fromcodepoint.js","webpack://Exp/./node_modules/antlr4/error/index.js","webpack://Exp/./node_modules/antlr4/error/ErrorStrategy.js","webpack://Exp/./src/grammar/antlrOutput/expGrammarParser.js","webpack://Exp/./src/error.ts","webpack://Exp/./src/index.ts","webpack://Exp/./src/visitor.ts","webpack://Exp/./node_modules/antlr4/atn/index.js","webpack://Exp/./node_modules/antlr4/LL1Analyzer.js","webpack://Exp/./node_modules/antlr4/atn/ATNType.js","webpack://Exp/./node_modules/antlr4/atn/LexerATNSimulator.js","webpack://Exp/./node_modules/antlr4/CommonTokenFactory.js","webpack://Exp/./node_modules/antlr4/atn/LexerActionExecutor.js","webpack://Exp/./node_modules/antlr4/atn/ParserATNSimulator.js","webpack://Exp/./node_modules/antlr4/dfa/index.js","webpack://Exp/./node_modules/antlr4/dfa/DFA.js","webpack://Exp/./node_modules/antlr4/tree/index.js","webpack://Exp/./node_modules/antlr4/error/DiagnosticErrorListener.js","webpack://Exp/./node_modules/antlr4/CharStreams.js","webpack://Exp/./node_modules/antlr4/FileStream.js","webpack://Exp/./node_modules/antlr4/CommonTokenStream.js","webpack://Exp/./node_modules/antlr4/BufferedTokenStream.js","webpack://Exp/./node_modules/antlr4/Parser.js","webpack://Exp/./src/expressionCompiler.ts","webpack://Exp/./src/errorListener.ts","webpack://Exp/./src/compilerError.ts","webpack://Exp/./src/grammar/antlrOutput/expGrammarLexer.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","arrayToString","a","join","standardEqualsFunction","b","equals","standardHashCodeFunction","hashCode","Set","hashFunction","equalsFunction","this","data","BitSet","Map","AltDict","DoubleDict","defaultMapCtor","cacheMap","Hash","count","hash","String","seed","Math","round","random","pow","remainder","bytes","h1","h1b","c1","c2","k1","toString","length","charCodeAt","indexOf","add","values","push","contains","concat","or","set","bits","keys","map","alt","remove","minValue","min","apply","update","finish","other","hashKey","put","entries","entry","oldValue","containsKey","getKeys","e","getValues","arguments","Array","isArray","k","updateHashCode","console","log","hashStuff","escapeWhitespace","escapeSpaces","replace","titleCase","str","txt","charAt","toUpperCase","substr","equalArrays","Token","source","type","channel","start","stop","tokenIndex","line","column","_text","CommonToken","undefined","EMPTY_SOURCE","DEFAULT_CHANNEL","INVALID_TYPE","EPSILON","MIN_USER_TOKEN_TYPE","EOF","HIDDEN_CHANNEL","text","getTokenSource","getInputStream","constructor","clone","input","size","getText","Interval","IntervalSet","intervals","readOnly","item","first","v","addOne","addInterval","addRange","h","splice","max","reduce","addSet","intervalslength","pop","complement","result","removeRange","len","removeOne","x","literalNames","symbolicNames","elemsAreChar","toTokenString","toCharString","toIndexString","names","fromCharCode","j","elementName","ATNState","atn","stateNumber","INVALID_STATE_NUMBER","stateType","ruleIndex","epsilonOnlyTransitions","transitions","nextTokenWithinRule","BasicState","BASIC","DecisionState","decision","nonGreedy","BlockStartState","endState","BasicBlockStartState","BLOCK_START","BlockEndState","BLOCK_END","startState","RuleStopState","RULE_STOP","RuleStartState","RULE_START","stopState","isPrecedenceRule","PlusLoopbackState","PLUS_LOOP_BACK","PlusBlockStartState","PLUS_BLOCK_START","loopBackState","StarBlockStartState","STAR_BLOCK_START","StarLoopbackState","STAR_LOOP_BACK","StarLoopEntryState","STAR_LOOP_ENTRY","isPrecedenceDecision","LoopEndState","LOOP_END","TokensStartState","TOKEN_START","serializationNames","isNonGreedyExitState","addTransition","trans","index","isEpsilon","INVALID_INTERVAL","Tree","SyntaxTree","ParseTree","RuleNode","TerminalNode","ErrorNode","ParseTreeVisitor","ParseTreeListener","TerminalNodeImpl","symbol","parentCtx","ErrorNodeImpl","token","ParseTreeWalker","visit","ctx","child","accept","visitChildren","children","visitTerminal","node","visitErrorNode","enterEveryRule","exitEveryRule","getChild","getSymbol","getParent","getPayload","getSourceInterval","getChildCount","visitor","isErrorNode","walk","listener","enterRule","exitRule","getRuleContext","DEFAULT","PredicateTransition","RecognitionException","params","Error","captureStackTrace","stack","message","recognizer","offendingToken","offendingState","state","LexerNoViableAltException","lexer","startIndex","deadEndConfigs","NoViableAltException","startToken","_ctx","getCurrentToken","InputMismatchException","FailedPredicateException","predicate","formatMessage","_interp","states","predicateIndex","predIndex","ParseCancellationException","getExpectedTokens","RuleContext","PredictionContext","cachedHashCode","PredictionContextCache","cache","SingletonPredictionContext","parent","returnState","EmptyPredictionContext","EMPTY_RETURN_STATE","ArrayPredictionContext","parents","returnStates","merge","rootIsWildcard","mergeCache","previous","rootMerge","EMPTY","payloads","mergeRoot","spc","singleParent","apc","a_","mergeSingletons","mergedReturnStates","mergedParents","a_parent","b_parent","payload","bothDollars","ax_ax","mergedParent","slice","M","uniqueParents","q","combineCommonParents","mergeArrays","globalNodeCount","id","isEmpty","hasEmptyPath","getReturnState","existing","contructor","up","predictionContextFromRuleContext","outerContext","transition","invokingState","followState","getCachedPredictionContext","context","contextCache","visited","changed","updated","LL1Analyzer","ATN","grammarType","maxTokenType","decisionToState","ruleToStartState","ruleToStopState","modeNameToStartState","ruleToTokenType","lexerActions","modeToStartState","nextTokensInContext","LOOK","nextTokensNoContext","nextTokens","addState","removeState","defineDecisionState","getDecisionState","following","expected","rt","INVALID_ALT_NUMBER","Predicate","PrecedencePredicate","Transition","target","label","AtomTransition","label_","makeLabel","serializationType","ATOM","RuleTransition","ruleStart","precedence","RULE","EpsilonTransition","outermostPrecedenceReturn","RangeTransition","RANGE","AbstractPredicateTransition","isCtxDependent","PREDICATE","ActionTransition","actionIndex","ACTION","SetTransition","SET","NotSetTransition","NOT_SET","WildcardTransition","WILDCARD","PrecedencePredicateTransition","PRECEDENCE","serializationTypes","matches","minVocabSymbol","maxVocabSymbol","getPredicate","Utils","SemanticContext","hashATNConfig","hashCodeForConfigSet","equalATNConfigs","equalsForConfigSet","ATNConfigSet","fullCtx","configLookup","configs","uniqueAlt","conflictingAlts","hasSemanticContext","dipsIntoOuterContext","OrderedATNConfigSet","config","semanticContext","NONE","reachesIntoOuterContext","merged","precedenceFilterSuppressed","getStates","getPredicates","preds","optimizeConfigs","interpreter","getCachedContext","addAll","coll","containsFast","clear","setReadonly","AND","operands","opnds","precedencePredicates","filterPrecedencePredicates","reduced","OR","sort","compareTo","evaluate","parser","evalPrecedence","andContext","orContext","localctx","sempred","precpred","differs","evaluated","PredPrediction","pred","DFAState","edges","isAcceptState","prediction","lexerActionExecutor","requiresFullContext","predicates","getAltSet","alts","codepointat","dfa","fromcodepoint","tree","error","CharStreams","InputStream","FileStream","CommonTokenStream","Lexer","Parser","pc","ParserRuleContext","checkParams","isCfg","props","ATNConfig","checkContext","LexerATNConfig","passedThroughNonGreedyDecision","checkNonGreedyDecision","depth","getAltNumber","setAltNumber","altNumber","Trees","toStringTree","ruleNames","recog","ri","Recognizer","CommonTokenFactory","_input","_factory","_tokenFactorySourcePair","_token","_tokenStartCharIndex","_tokenStartLine","_tokenStartColumn","_hitEOF","_channel","_type","_modeStack","_mode","DEFAULT_MODE","MORE","SKIP","DEFAULT_TOKEN_CHANNEL","HIDDEN","MIN_CHAR_VALUE","MAX_CHAR_VALUE","reset","seek","nextToken","tokenStartMarker","mark","emitEOF","continueOuter","ttype","match","notifyListeners","recover","LA","emit","release","skip","more","pushMode","debug","popMode","sourceName","emitToken","getCharIndex","cpos","lpos","eof","getAllTokens","tokens","msg","getErrorDisplay","getErrorListenerDispatch","syntaxError","getErrorDisplayForChar","getCharErrorDisplay","re","consume","ErrorListener","ConsoleErrorListener","ProxyErrorListener","delegates","offendingSymbol","reportAmbiguity","stopIndex","exact","ambigAlts","reportAttemptingFullContext","reportContextSensitivity","INSTANCE","DFASerializer","LexerDFASerializer","s0","buf","sortedStates","getStateString","getEdgeLabel","baseStateStr","simplifyMultiplication","root","constants","current","Multiplication","right","simplify","left","Division","Inverse","Constant","forEach","inner","operand","simplifyAddition","Addition","Subtraction","Negation","NodeType","_Constant","_Function","_Variable","_Ternary","_Division","_Multiplication","_Negation","_Subtraction","_Addition","_Inverse","Expression","super","variable","epsilon","variables","differentiate","$eval","arg","print","printLatex","BinaryOp","Function","functionName","args","function","functionDictionary","argCount","getDerivative","exec","derivatives","argumentsBackward","constantArgs","_item","constArgs","Variable","TernaryOperator","condition","f","BoolConstant","BoolExpression","BoolBinaryOp","BoolBinaryExpOp","And","convertToExpression","Or","Equal","NotEqual","Greater","GEqual","Less","LEqual","BoolNot","invokingStateNumber","exception","InterpreterRuleContext","copyFrom","addChild","removeLastChild","addTokenNode","addErrorNode","badToken","getToken","getTokens","getTypedRuleContext","ctxType","getTypedRuleContexts","contexts","decodeToUnicodeCodePoints","strdata","stream","_index","codePoint","codePointAt","codeUnit","_size","_loadString","offset","pos","LT","marker","fromCodePoint","TextPosition","ASTNode","textPos","invalid","BoolExpressionNode","BoolNegationNode","BoolLNode","_Less","BoolLENode","_LessEqual","BoolGNode","_Greater","BoolGENode","_GreaterEqual","BoolENode","_Equal","BoolNENode","_NotEqual","BoolAndNode","_And","BoolOrNode","_Or","BoolConstantNode","_BoolConstant","ExpressionNode","IdentifierNode","_Identifier","ConstantNode","FunctionNode","AdditionNode","MultiplicationNode","SubtractionNode","DivisionNode","TernaryOperatorNode","cond","tr","fls","true","false","NegationNode","FunctionDef","sin","der","cos","sinc","abs","tan","cot","asin","acos","atan","acot","PI","sinh","cosh","tanh","coth","asinh","acosh","atanh","acoth","erf","sign","exp","sqrt","derX","derY","ln","lg","log10","step","frac","floor","squarewave","smoothstep","ceil","lerp","derT","y","clamp","saturate","E","pi","antlr4","expGrammarVisitor","visitNumber","visitBoolConstant","visitBoolUnaryOperator","visitBracketBoolExpression","visitBBoolBinaryOperator","visitEBoolBinaryOperator","visitBracketExpression","visitBinaryOperatorExpression","visitFunctionExpression","visitUnaryOperatorExpression","visitConstantExpression","visitVariableExpression","visitTernaryOperatorExpression","visitFunctionArguments","getNodeText","res","getChildren","list","getAncestors","ancestors","findAllTokenNodes","findAllNodes","findAllRuleNodes","findTokens","nodes","_findAllNodes","descendants","ATNType","ATNStates","Transitions","ATNDeserializationOptions","LexerActions","LexerActionType","LexerSkipAction","LexerChannelAction","LexerCustomAction","LexerMoreAction","LexerTypeAction","LexerPushModeAction","LexerPopModeAction","LexerModeAction","ADDED_UNICODE_SMP","SUPPORTED_UUIDS","initArray","tmp","ATNDeserializer","options","defaultOptions","deserializationOptions","stateFactories","actionFactories","isFeatureSupported","feature","actualUuid","idx1","deserialize","checkVersion","checkUUID","readATN","readStates","readRules","readModes","sets","readSets","readInt","uuid","readInt32","readEdges","readDecisions","readLexerActions","markPrecedenceDecisions","verifyATN","generateRuleBypassTransitions","PARSER","temp","split","version","readUUID","pair","loopBackStateNumbers","endStateNumbers","nstates","stype","stateFactory","loopBackStateNumber","endStateNumber","numNonGreedyStates","numPrecedenceStates","nrules","LEXER","tokenType","nmodes","readUnicode","iset","i1","i2","nedges","src","trg","arg1","arg2","arg3","edgeFactory","ndecisions","decState","actionType","data1","data2","lexerAction","lexerActionFactory","generateRuleBypassTransition","idx","bypassStart","bypassStop","excludeTransition","stateIsEndStateFor","matchState","maybeLoopEndState","checkCondition","readLong","byteToHex","bth","createByteToHex","bb","int","sf","af","CHANNEL","CUSTOM","MODE","POP_MODE","PUSH_MODE","TYPE","LexerAction","action","isPositionDependent","LexerIndexedCustomAction","execute","_listeners","_stateNumber","tokenTypeMapCache","ruleIndexMapCache","toolVersion","addErrorListener","removeErrorListeners","getTokenTypeMap","tokenNames","getTokenNames","getRuleIndexMap","getTokenType","tokenName","getErrorHeader","getOffendingToken","getTokenErrorDisplay","ATNSimulator","sharedContextCache","ERROR","PredictionMode","SLL","LL","LL_EXACT_AMBIG_DETECTION","hasSLLConflictTerminatingPrediction","allConfigsInRuleStopStates","dup","items","altsets","getConflictingAltSubsets","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConfigInRuleStopState","resolvesToJustOneViableAlt","getSingleViableAlt","allSubsetsConflict","hasNonConflictingAltSet","allSubsetsEqual","getUniqueAlt","all","getAlts","configToAlts","cfg","getStateToAltMap","minAlt","$defineProperty","position","TypeError","string","Number","second","stringFromCharCode","_","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","isFinite","RangeError","DiagnosticErrorListener","BailErrorStrategy","Errors","ErrorStrategy","DefaultErrorStrategy","errorRecoveryMode","lastErrorIndex","lastErrorStates","recoverInline","sync","inErrorRecoveryMode","reportError","endErrorCondition","beginErrorCondition","reportMatch","reportNoViableAlternative","reportInputMismatch","reportFailedPredicate","notifyErrorListeners","getMessage","followSet","getErrorRecoverySet","consumeUntil","la","getTokenStream","singleTokenDeletion","reportUnwantedToken","expecting","whatFollowsLoopIterationOrRule","escapeWSAndQuote","reportMissingToken","matchedSymbol","singleTokenInsertion","getMissingSymbol","currentSymbolType","next","nextTokenType","tokenText","currentSymbol","expectedTokenType","lookback","getTokenFactory","recoverSet","follow","serializedATN","decisionsToDFA","ds","DFA","expGrammarParser","ParserATNSimulator","NumberContext","RULE_number","BoolExpressionContext","RULE_boolExpression","BoolConstantContext","BoolUnaryOperatorContext","op","BracketBoolExpressionContext","BBoolBinaryOperatorContext","EBoolBinaryOperatorContext","leftexp","rightexp","ExpressionContext","RULE_expression","BracketExpressionContext","BinaryOperatorExpressionContext","FunctionExpressionContext","func","UnaryOperatorExpressionContext","ConstantExpressionContext","VariableExpressionContext","TernaryOperatorExpressionContext","FunctionArgumentsContext","RULE_functionArguments","TRUE","FALSE","NOT","FLOAT","INT","ID","PLUS","MINUS","ASTERISK","DIVISION","LPAREN","RPAREN","DOT","COMMA","CARET","L","G","LE","GE","NE","SEMICOLON","COLON","LCRL","RCRL","APOSTROPHE","QUESTIONMARK","NEWLINE","WHITESPACE","COMMENT","number","_la","enterOuterAlt","_errHandler","boolExpression","expression","_p","_parentctx","_parentState","_prevctx","enterRecursionRule","adaptivePredict","_alt","_parseListeners","triggerExitRuleEvent","pushNewRecursionContext","unrollRecursionContexts","functionArguments","boolExpression_sempred","expression_sempred","compile","expressionString","requiredVariables","errors","chars","expGrammarLexer","strictMode","buildParseTrees","CompilerError","expDef","varIndicies","startExpression","ExpCompilerContext","indicies","val","compileExpression","startBoolExpression","compileBoolExpression","Visitor","idCount","errorListener","visitExpression","visitBoolExpression","setTextPos","parseFloat","LexerATNSimulator","HIT_PRED","getDecisionLookahead","look","lookBusy","_LOOK","lookContext","calledRuleStack","seeThruPreds","addEOF","removed","newContext","LexerActionExecutor","resetSimState","sim","dfaState","SimState","decisionToDFA","prevAccept","dfa_debug","MIN_DFA_EDGE","MAX_DFA_EDGE","match_calls","copyState","simulator","matchATN","execATN","old_mode","s0_closure","computeStartState","suppressEdge","addDFAState","predict","toLexerString","ds0","captureSimState","getExistingTargetState","computeTargetState","failOrAccept","reach","getReachableConfigSet","addDFAEdge","closure","skipAlt","currentAltReachedAcceptState","getTokenName","getReachableTarget","fixOffsetBeforeMatch","treatEofAsEpsilon","charPos","initialContext","speculative","getEpsilonTarget","evaluatePredicate","append","savedcolumn","savedLine","settings","from_","tk","to","cfgs","proposed","firstConfigWithRuleStopState","newState","getDFA","tt","TokenFactory","copyText","createThin","updatedLexerActions","requiresSeek","numActions","predictionMode","_startIndex","_outerContext","_dfa","debug_closure","debug_add","debug_list_atn_decisions","retry_debug","getLookaheadName","precedenceDfa","getPrecedenceStartState","getPrecedence","atnStartState","applyPrecedenceFilter","setPrecedenceStartState","previousD","D","noViableAlt","getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule","conflictIndex","evalSemanticContext","execATNWithFullContext","computeReachSet","predictedAlt","altSubSets","getConflictingAlts","predicateDFAState","decisionState","nalts","altsToCollectPredsFrom","getConflictingAltsOrUniqueAlt","altToPred","getPredsForAmbigAlts","getPredicatePredictions","foundExactAmbig","intermediate","skippedStopStates","closureBusy","removeAllConfigsNotInRuleStopState","lookToEndOfRule","endOfRuleState","statesFromAlt1","configSet","updatedContext","nPredAlts","pairs","containsPredicate","splitAccordingToSemanticValidity","semValidConfigs","semInvalidConfigs","getAltThatFinishedDecisionEntryRule","succeeded","failed","predPredictions","complete","predictions","predicateEvaluationResult","collectPredicates","closureCheckingStopState","parms","getRuleName","closure_","canDropLoopEntryEdgeInLeftRecursiveRule","continueCollecting","newDepth","numCtxs","blockEndStateNum","blockEndState","returnStateNumber","returnStateTarget","inContext","ruleTransition","precedenceTransition","predTransition","actionTransition","pt","getRuleInvocationStack","currentPosition","predSucceeds","newSemCtx","dumpDeadEndConfigs","nvae","decs","getDeadEndConfigs","interval","_states","precedenceState","setPrecedenceDfa","DFAStatesSet","exactOnly","getDecisionDescription","ruleName","reportedAlts","fs","window","importScripts","fromString","fromBlob","blob","encoding","onLoad","onError","reader","FileReader","onload","is","onerror","readAsText","fromBuffer","buffer","fromPath","path","callback","readFile","err","fromPathSync","readFileSync","fileName","BufferedTokenStream","adjustSeekIndex","nextTokenOnChannel","LB","previousTokenOnChannel","lazyInit","getNumberOfOnChannelTokens","fill","TokenStream","tokenSource","fetchedEOF","fetch","types","subset","setup","setTokenSource","getHiddenTokensToRight","nextOnChannel","filterForChannel","getHiddenTokensToLeft","prevOnChannel","hidden","getSourceName","TraceListener","_precedenceStack","_tracer","_syntaxErrors","setInputStream","bypassAltsAtnCache","setTrace","matchWildcard","_buildParseTrees","getParseListeners","addParseListener","removeParseListener","removeParseListeners","triggerEnterRuleEvent","reverse","setTokenFactory","factory","getATNWithBypassAlts","serializedAtn","getSerializedATN","compileParseTreePattern","pattern","patternRuleIndex","ParseTreePatternMatcher","setTokenStream","hasListener","addContextToParseTree","altNum","retCtx","getInvokingContext","isExpectedToken","getExpectedTokensWithinCurrentRule","getRuleIndex","getDFAStrings","dumpDFA","seenOne","printer","println","trace","and","_Not","not","g","ge","le","ne","bc","sub","mul","div","neg","fun","con","ter","_var","messages","channelNames","modeNames","grammarFileName"],"mappings":"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,eACA,eACA,eACA,eACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,gBACA,gBACA,gBACA,sBACA,qBACA,oBACA,qBACA,wBACA,sBACA,wBACA,oBACA,qBACA,sBACA,iBACA,wBACA,oBACA,kBACA,oBACA,oBACA,kBACA,mBACA,uBACA,oBACA,iBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,kBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,kBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBACA,kBACA,eACA,eACA,eACA,eACA,eACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,gBACA,gBACA,gBACA,gBACA,iBACA,gBACA,gBACA,eACA,iBACA,gBACA,eACA,eACA,gBACA,eACA,eACA,eACA,kBACA,kBACA,eACA,eACA,kBACA,gBACA,kBACA,eACA,eACA,eACA,eACA,gBACA,eACA,eACA,gBACA,gBACA,eACA,eACA,eACA,gBACA,eACA,kBACA,oBACA,eACA,YAA0C58B,KAAK,IAG/C+I,GAAM,IAAI2kB,EAAO3kB,IAAI0nB,iBAAkBU,YAAYyL,GAEnDC,EAAiB9zB,EAAIoL,gBAAgBrR,KAAK,SAASg6B,EAAIjxB,GAAS,OAAO,IAAI6hB,EAAOhS,IAAIqhB,IAAID,EAAIjxB,MAElG,SAASm2B,EAAgBt7B,GAGrB,OAFHgnB,EAAOxR,MAAMje,KAAKwC,KAAMiG,GACrBjG,KAAKqP,QAAU,IAAI4d,EAAO3kB,IAAIq6B,kBAAkB3iC,KAAMsI,EAAK8zB,EAAgB,IAAInP,EAAOnd,wBAC/E9P,KAGXuhC,EAAgBtiC,UAAYlB,OAAOY,OAAOsuB,EAAOxR,MAAMxc,WACvDsiC,EAAgBtiC,UAAU8G,YAAcw7B,EAExCxjC,OAAOC,eAAeujC,EAAgBtiC,UAAW,MAAO,CAChDf,IAAM,WACE,OAAOoK,KAIvBi5B,EAAgB77B,IAAMunB,EAAOxoB,MAAMiB,IACnC67B,EAAgBtD,KAAO,EACvBsD,EAAgBrD,MAAQ,EACxBqD,EAAgB/nB,GAAK,EACrB+nB,EAAgBroB,IAAM,EACtBqoB,EAAgBpD,IAAM,EACtBoD,EAAgBnD,MAAQ,EACxBmD,EAAgBlD,IAAM,EACtBkD,EAAgBjD,GAAK,EACrBiD,EAAgBhD,KAAO,EACvBgD,EAAgB/C,MAAQ,GACxB+C,EAAgB9C,SAAW,GAC3B8C,EAAgB7C,SAAW,GAC3B6C,EAAgB5C,OAAS,GACzB4C,EAAgB3C,OAAS,GACzB2C,EAAgB1C,IAAM,GACtB0C,EAAgBzC,MAAQ,GACxByC,EAAgBxC,MAAQ,GACxBwC,EAAgBvC,EAAI,GACpBuC,EAAgBtC,EAAI,GACpBsC,EAAgBrC,GAAK,GACrBqC,EAAgBpC,GAAK,GACrBoC,EAAgBnC,GAAK,GACrBmC,EAAgBxU,EAAI,GACpBwU,EAAgBlC,UAAY,GAC5BkC,EAAgBjC,MAAQ,GACxBiC,EAAgBhC,KAAO,GACvBgC,EAAgB/B,KAAO,GACvB+B,EAAgB9B,WAAa,GAC7B8B,EAAgB7B,aAAe,GAC/B6B,EAAgB5B,QAAU,GAC1B4B,EAAgB3B,WAAa,GAC7B2B,EAAgB1B,QAAU,GAE1B0B,EAAgBtiC,UAAUw0C,aAAe,CAAE,wBAAyB,UAEpElS,EAAgBtiC,UAAUy0C,UAAY,CAAE,gBAExCnS,EAAgBtiC,UAAU0I,aAAe,CAAE,KAAM,SAAU,UAAW,KAC3B,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAC5B,MAAO,MAAO,MAAO,MAAO,MAC5B,MAAO,OAAQ,OAAQ,OACvB,MAAO,MAAO,MAAO,MAAO,MAC5B,MAAO,OAElD45B,EAAgBtiC,UAAU2I,cAAgB,CAAE,KAAM,OAAQ,QAAS,KACvB,MAAO,MAAO,QAAS,MACvB,KAAM,OAAQ,QAAS,WACvB,WAAY,SAAU,SACtB,MAAO,QAAS,QAAS,IACzB,IAAK,KAAM,KAAM,KAAM,IACvB,YAAa,QAAS,OACtB,OAAQ,aAAc,eACtB,UAAW,aAAc,WAErE25B,EAAgBtiC,UAAU0d,UAAY,CAAE,YAAa,YAAa,QAC1B,OAAQ,QAAS,KAAM,MAAO,MAC9B,QAAS,MAAO,KAAM,OAAQ,QAC9B,WAAY,WAAY,SACxB,SAAU,MAAO,QAAS,QAC1B,IAAK,IAAK,KAAM,KAAM,KAAM,IAC5B,YAAa,QAAS,OAAQ,OAC9B,aAAc,eAAgB,UAC9B,aAAc,WAEtD4kB,EAAgBtiC,UAAU00C,gBAAkB,gBAG5Cx2C,EAAQokC,gBAAkBA","file":"evalExp.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 38);\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction arrayToString(a) {\n    return \"[\" + a.join(\", \") + \"]\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,\n        key = this.toString();\n\n    remainder = key.length & 3; // key.length % 4\n    bytes = key.length - remainder;\n    h1 = String.prototype.seed;\n    c1 = 0xcc9e2d51;\n    c2 = 0x1b873593;\n    i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n    return a.equals(b);\n}\n\nfunction standardHashCodeFunction(a) {\n    return a.hashCode();\n}\n\nfunction Set(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n    return this;\n}\n\nObject.defineProperty(Set.prototype, \"length\", {\n    get: function () {\n        var l = 0;\n        for (var key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l + this.data[key].length;\n            }\n        }\n        return l;\n    }\n});\n\nSet.prototype.add = function (value) {\n    var hash = this.hashFunction(value);\n    var key = \"hash_\" + hash;\n    if (key in this.data) {\n        var values = this.data[key];\n        for (var i = 0; i < values.length; i++) {\n            if (this.equalsFunction(value, values[i])) {\n                return values[i];\n            }\n        }\n        values.push(value);\n        return value;\n    } else {\n        this.data[key] = [value];\n        return value;\n    }\n};\n\nSet.prototype.contains = function (value) {\n    return this.get(value) != null;\n};\n\nSet.prototype.get = function (value) {\n    var hash = this.hashFunction(value);\n    var key = \"hash_\" + hash;\n    if (key in this.data) {\n        var values = this.data[key];\n        for (var i = 0; i < values.length; i++) {\n            if (this.equalsFunction(value, values[i])) {\n                return values[i];\n            }\n        }\n    }\n    return null;\n};\n\nSet.prototype.values = function () {\n    var l = [];\n    for (var key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n            l = l.concat(this.data[key]);\n        }\n    }\n    return l;\n};\n\nSet.prototype.toString = function () {\n    return arrayToString(this.values());\n};\n\nfunction BitSet() {\n    this.data = [];\n    return this;\n}\n\nBitSet.prototype.add = function (value) {\n    this.data[value] = true;\n};\n\nBitSet.prototype.or = function (set) {\n    var bits = this;\n    Object.keys(set.data).map(function (alt) {\n        bits.add(alt);\n    });\n};\n\nBitSet.prototype.remove = function (value) {\n    delete this.data[value];\n};\n\nBitSet.prototype.contains = function (value) {\n    return this.data[value] === true;\n};\n\nBitSet.prototype.values = function () {\n    return Object.keys(this.data);\n};\n\nBitSet.prototype.minValue = function () {\n    return Math.min.apply(null, this.values());\n};\n\nBitSet.prototype.hashCode = function () {\n    var hash = new Hash();\n    hash.update(this.values());\n    return hash.finish();\n};\n\nBitSet.prototype.equals = function (other) {\n    if (!(other instanceof BitSet)) {\n        return false;\n    }\n    return this.hashCode() === other.hashCode();\n};\n\nObject.defineProperty(BitSet.prototype, \"length\", {\n    get: function () {\n        return this.values().length;\n    }\n});\n\nBitSet.prototype.toString = function () {\n    return \"{\" + this.values().join(\", \") + \"}\";\n};\n\nfunction Map(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n    return this;\n}\n\nObject.defineProperty(Map.prototype, \"length\", {\n    get: function () {\n        var l = 0;\n        for (var hashKey in this.data) {\n            if (hashKey.indexOf(\"hash_\") === 0) {\n                l = l + this.data[hashKey].length;\n            }\n        }\n        return l;\n    }\n});\n\nMap.prototype.put = function (key, value) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if (hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key)) {\n                var oldValue = entry.value;\n                entry.value = value;\n                return oldValue;\n            }\n        }\n        entries.push({key:key, value:value});\n        return value;\n    } else {\n        this.data[hashKey] = [{key:key, value:value}];\n        return value;\n    }\n};\n\nMap.prototype.containsKey = function (key) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if(hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key))\n                return true;\n        }\n    }\n    return false;\n};\n\nMap.prototype.get = function (key) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if(hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key))\n                return entry.value;\n        }\n    }\n    return null;\n};\n\nMap.prototype.entries = function () {\n    var l = [];\n    for (var key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n            l = l.concat(this.data[key]);\n        }\n    }\n    return l;\n};\n\n\nMap.prototype.getKeys = function () {\n    return this.entries().map(function(e) {\n        return e.key;\n    });\n};\n\n\nMap.prototype.getValues = function () {\n    return this.entries().map(function(e) {\n            return e.value;\n    });\n};\n\n\nMap.prototype.toString = function () {\n    var ss = this.entries().map(function(entry) {\n        return '{' + entry.key + ':' + entry.value + '}';\n    });\n    return '[' + ss.join(\", \") + ']';\n};\n\n\nfunction AltDict() {\n    this.data = {};\n    return this;\n}\n\n\nAltDict.prototype.get = function (key) {\n    key = \"k-\" + key;\n    if (key in this.data) {\n        return this.data[key];\n    } else {\n        return null;\n    }\n};\n\nAltDict.prototype.put = function (key, value) {\n    key = \"k-\" + key;\n    this.data[key] = value;\n};\n\nAltDict.prototype.values = function () {\n    var data = this.data;\n    var keys = Object.keys(this.data);\n    return keys.map(function (key) {\n        return data[key];\n    });\n};\n\nfunction DoubleDict(defaultMapCtor) {\n    this.defaultMapCtor = defaultMapCtor || Map;\n    this.cacheMap = new this.defaultMapCtor();\n    return this;\n}\n\nfunction Hash() {\n    this.count = 0;\n    this.hash = 0;\n    return this;\n}\n\nHash.prototype.update = function () {\n    for(var i=0;i<arguments.length;i++) {\n        var value = arguments[i];\n        if (value == null)\n            continue;\n        if(Array.isArray(value))\n            this.update.apply(this, value);\n        else {\n            var k = 0;\n            switch (typeof(value)) {\n                case 'undefined':\n                case 'function':\n                    continue;\n                case 'number':\n                case 'boolean':\n                    k = value;\n                    break;\n                case 'string':\n                    k = value.hashCode();\n                    break;\n                default:\n                    if(value.updateHashCode)\n                        value.updateHashCode(this);\n                    else\n                        console.log(\"No updateHashCode for \" + value.toString())\n                    continue;\n            }\n            k = k * 0xCC9E2D51;\n            k = (k << 15) | (k >>> (32 - 15));\n            k = k * 0x1B873593;\n            this.count = this.count + 1;\n            var hash = this.hash ^ k;\n            hash = (hash << 13) | (hash >>> (32 - 13));\n            hash = hash * 5 + 0xE6546B64;\n            this.hash = hash;\n        }\n    }\n};\n\nHash.prototype.finish = function () {\n    var hash = this.hash ^ (this.count * 4);\n    hash = hash ^ (hash >>> 16);\n    hash = hash * 0x85EBCA6B;\n    hash = hash ^ (hash >>> 13);\n    hash = hash * 0xC2B2AE35;\n    hash = hash ^ (hash >>> 16);\n    return hash;\n};\n\nfunction hashStuff() {\n    var hash = new Hash();\n    hash.update.apply(hash, arguments);\n    return hash.finish();\n}\n\nDoubleDict.prototype.get = function (a, b) {\n    var d = this.cacheMap.get(a) || null;\n    return d === null ? null : (d.get(b) || null);\n};\n\nDoubleDict.prototype.set = function (a, b, o) {\n    var d = this.cacheMap.get(a) || null;\n    if (d === null) {\n        d = new this.defaultMapCtor();\n        this.cacheMap.put(a, d);\n    }\n    d.put(b, o);\n};\n\n\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\")\n         .replace(/\\n/g, \"\\\\n\")\n         .replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(/ /g, \"\\u00B7\");\n    }\n    return s;\n}\n\nfunction titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n};\n\nfunction equalArrays(a, b)\n{\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a == b)\n        return true;\n    if (a.length != b.length)\n        return false;\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] == b[i])\n            continue;\n        if (!a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n};\n\nexports.Hash = Hash;\nexports.Set = Set;\nexports.Map = Map;\nexports.BitSet = BitSet;\nexports.AltDict = AltDict;\nexports.DoubleDict = DoubleDict;\nexports.hashStuff = hashStuff;\nexports.escapeWhitespace = escapeWhitespace;\nexports.arrayToString = arrayToString;\nexports.titleCase = titleCase;\nexports.equalArrays = equalArrays;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// A token has properties: text, type, line, character position in the line\n// (so we can ignore tabs), token channel, index, and source from which\n// we obtained this token.\n\nfunction Token() {\n\tthis.source = null;\n\tthis.type = null; // token type of the token\n\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\tthis.start = null; // optional; return -1 if not implemented.\n\tthis.stop = null; // optional; return -1 if not implemented.\n\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\tthis.line = null; // line=1..n of the 1st character\n\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\tthis._text = null; // text of the token.\n\treturn this;\n}\n\nToken.INVALID_TYPE = 0;\n\n// During lookahead operations, this \"token\" signifies we hit rule end ATN state\n// and did not follow it despite needing to.\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n// All tokens go to the parser (unless skip() is called in that rule)\n// on a particular \"channel\". The parser tunes to a particular channel\n// so that whitespace etc... can go to the parser on a \"hidden\" channel.\n\nToken.DEFAULT_CHANNEL = 0;\n\n// Anything on different channel than DEFAULT_CHANNEL is not parsed\n// by parser.\n\nToken.HIDDEN_CHANNEL = 1;\n\n// Explicitly set the text for this token. If {code text} is not\n// {@code null}, then {@link //getText} will return this value rather than\n// extracting the text from the input.\n//\n// @param text The explicit text of the token, or {@code null} if the text\n// should be obtained from the input along with the start and stop indexes\n// of the token.\n\nObject.defineProperty(Token.prototype, \"text\", {\n\tget : function() {\n\t\treturn this._text;\n\t},\n\tset : function(text) {\n\t\tthis._text = text;\n\t}\n});\n\nToken.prototype.getTokenSource = function() {\n\treturn this.source[0];\n};\n\nToken.prototype.getInputStream = function() {\n\treturn this.source[1];\n};\n\nfunction CommonToken(source, type, channel, start, stop) {\n\tToken.call(this);\n\tthis.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n\tthis.type = type !== undefined ? type : null;\n\tthis.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n\tthis.start = start !== undefined ? start : -1;\n\tthis.stop = stop !== undefined ? stop : -1;\n\tthis.tokenIndex = -1;\n\tif (this.source[0] !== null) {\n\t\tthis.line = source[0].line;\n\t\tthis.column = source[0].column;\n\t} else {\n\t\tthis.column = -1;\n\t}\n\treturn this;\n}\n\nCommonToken.prototype = Object.create(Token.prototype);\nCommonToken.prototype.constructor = CommonToken;\n\n// An empty {@link Pair} which is used as the default value of\n// {@link //source} for tokens that do not have a source.\nCommonToken.EMPTY_SOURCE = [ null, null ];\n\n// Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n//\n// <p>\n// If {@code oldToken} is also a {@link CommonToken} instance, the newly\n// constructed token will share a reference to the {@link //text} field and\n// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n// be assigned the result of calling {@link //getText}, and {@link //source}\n// will be constructed from the result of {@link Token//getTokenSource} and\n// {@link Token//getInputStream}.</p>\n//\n// @param oldToken The token to copy.\n//\nCommonToken.prototype.clone = function() {\n\tvar t = new CommonToken(this.source, this.type, this.channel, this.start,\n\t\t\tthis.stop);\n\tt.tokenIndex = this.tokenIndex;\n\tt.line = this.line;\n\tt.column = this.column;\n\tt.text = this.text;\n\treturn t;\n};\n\nObject.defineProperty(CommonToken.prototype, \"text\", {\n\tget : function() {\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t}\n\t\tvar input = this.getInputStream();\n\t\tif (input === null) {\n\t\t\treturn null;\n\t\t}\n\t\tvar n = input.size;\n\t\tif (this.start < n && this.stop < n) {\n\t\t\treturn input.getText(this.start, this.stop);\n\t\t} else {\n\t\t\treturn \"<EOF>\";\n\t\t}\n\t},\n\tset : function(text) {\n\t\tthis._text = text;\n\t}\n});\n\nCommonToken.prototype.toString = function() {\n\tvar txt = this.text;\n\tif (txt !== null) {\n\t\ttxt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n\t} else {\n\t\ttxt = \"<no text>\";\n\t}\n\treturn \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" +\n\t\t\ttxt + \"',<\" + this.type + \">\" +\n\t\t\t(this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" +\n\t\t\tthis.line + \":\" + this.column + \"]\";\n};\n\nexports.Token = Token;\nexports.CommonToken = CommonToken;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/*jslint smarttabs:true */\n\nvar Token = require('./Token').Token;\n\n/* stop is not included! */\nfunction Interval(start, stop) {\n\tthis.start = start;\n\tthis.stop = stop;\n\treturn this;\n}\n\nInterval.prototype.contains = function(item) {\n\treturn item >= this.start && item < this.stop;\n};\n\nInterval.prototype.toString = function() {\n\tif(this.start===this.stop-1) {\n\t\treturn this.start.toString();\n\t} else {\n\t\treturn this.start.toString() + \"..\" + (this.stop-1).toString();\n\t}\n};\n\n\nObject.defineProperty(Interval.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.stop - this.start;\n\t}\n});\n\nfunction IntervalSet() {\n\tthis.intervals = null;\n\tthis.readOnly = false;\n}\n\nIntervalSet.prototype.first = function(v) {\n\tif (this.intervals === null || this.intervals.length===0) {\n\t\treturn Token.INVALID_TYPE;\n\t} else {\n\t\treturn this.intervals[0].start;\n\t}\n};\n\nIntervalSet.prototype.addOne = function(v) {\n\tthis.addInterval(new Interval(v, v + 1));\n};\n\nIntervalSet.prototype.addRange = function(l, h) {\n\tthis.addInterval(new Interval(l, h + 1));\n};\n\nIntervalSet.prototype.addInterval = function(v) {\n\tif (this.intervals === null) {\n\t\tthis.intervals = [];\n\t\tthis.intervals.push(v);\n\t} else {\n\t\t// find insert pos\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tvar i = this.intervals[k];\n\t\t\t// distinct range -> insert\n\t\t\tif (v.stop < i.start) {\n\t\t\t\tthis.intervals.splice(k, 0, v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// contiguous range -> adjust\n\t\t\telse if (v.stop === i.start) {\n\t\t\t\tthis.intervals[k].start = v.start;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// overlapping range -> adjust and reduce\n\t\t\telse if (v.start <= i.stop) {\n\t\t\t\tthis.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));\n\t\t\t\tthis.reduce(k);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// greater than any existing\n\t\tthis.intervals.push(v);\n\t}\n};\n\nIntervalSet.prototype.addSet = function(other) {\n\tif (other.intervals !== null) {\n\t\tfor (var k = 0; k < other.intervals.length; k++) {\n\t\t\tvar i = other.intervals[k];\n\t\t\tthis.addInterval(new Interval(i.start, i.stop));\n\t\t}\n\t}\n\treturn this;\n};\n\nIntervalSet.prototype.reduce = function(k) {\n\t// only need to reduce if k is not the last\n\tif (k < this.intervalslength - 1) {\n\t\tvar l = this.intervals[k];\n\t\tvar r = this.intervals[k + 1];\n\t\t// if r contained in l\n\t\tif (l.stop >= r.stop) {\n\t\t\tthis.intervals.pop(k + 1);\n\t\t\tthis.reduce(k);\n\t\t} else if (l.stop >= r.start) {\n\t\t\tthis.intervals[k] = new Interval(l.start, r.stop);\n\t\t\tthis.intervals.pop(k + 1);\n\t\t}\n\t}\n};\n\nIntervalSet.prototype.complement = function(start, stop) {\n    var result = new IntervalSet();\n    result.addInterval(new Interval(start,stop+1));\n    for(var i=0; i<this.intervals.length; i++) {\n        result.removeRange(this.intervals[i]);\n    }\n    return result;\n};\n\nIntervalSet.prototype.contains = function(item) {\n\tif (this.intervals === null) {\n\t\treturn false;\n\t} else {\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tif(this.intervals[k].contains(item)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n};\n\nObject.defineProperty(IntervalSet.prototype, \"length\", {\n\tget : function() {\n\t\tvar len = 0;\n\t\tthis.intervals.map(function(i) {len += i.length;});\n\t\treturn len;\n\t}\n});\n\nIntervalSet.prototype.removeRange = function(v) {\n    if(v.start===v.stop-1) {\n        this.removeOne(v.start);\n    } else if (this.intervals!==null) {\n        var k = 0;\n        for(var n=0; n<this.intervals.length; n++) {\n            var i = this.intervals[k];\n            // intervals are ordered\n            if (v.stop<=i.start) {\n                return;\n            }\n            // check for including range, split it\n            else if(v.start>i.start && v.stop<i.stop) {\n                this.intervals[k] = new Interval(i.start, v.start);\n                var x = new Interval(v.stop, i.stop);\n                this.intervals.splice(k, 0, x);\n                return;\n            }\n            // check for included range, remove it\n            else if(v.start<=i.start && v.stop>=i.stop) {\n                this.intervals.splice(k, 1);\n                k = k - 1; // need another pass\n            }\n            // check for lower boundary\n            else if(v.start<i.stop) {\n                this.intervals[k] = new Interval(i.start, v.start);\n            }\n            // check for upper boundary\n            else if(v.stop<i.stop) {\n                this.intervals[k] = new Interval(v.stop, i.stop);\n            }\n            k += 1;\n        }\n    }\n};\n\nIntervalSet.prototype.removeOne = function(v) {\n\tif (this.intervals !== null) {\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tvar i = this.intervals[k];\n\t\t\t// intervals is ordered\n\t\t\tif (v < i.start) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for single value range\n\t\t\telse if (v === i.start && v === i.stop - 1) {\n\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for lower boundary\n\t\t\telse if (v === i.start) {\n\t\t\t\tthis.intervals[k] = new Interval(i.start + 1, i.stop);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for upper boundary\n\t\t\telse if (v === i.stop - 1) {\n\t\t\t\tthis.intervals[k] = new Interval(i.start, i.stop - 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// split existing range\n\t\t\telse if (v < i.stop - 1) {\n\t\t\t\tvar x = new Interval(i.start, v);\n\t\t\t\ti.start = v + 1;\n\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n};\n\nIntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {\n\tliteralNames = literalNames || null;\n\tsymbolicNames = symbolicNames || null;\n\telemsAreChar = elemsAreChar || false;\n\tif (this.intervals === null) {\n\t\treturn \"{}\";\n\t} else if(literalNames!==null || symbolicNames!==null) {\n\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t} else if(elemsAreChar) {\n\t\treturn this.toCharString();\n\t} else {\n\t\treturn this.toIndexString();\n\t}\n};\n\nIntervalSet.prototype.toCharString = function() {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tif(v.stop===v.start+1) {\n\t\t\tif ( v.start===Token.EOF ) {\n\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'\");\n\t\t\t}\n\t\t} else {\n\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'..'\" + String.fromCharCode(v.stop-1) + \"'\");\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\n\nIntervalSet.prototype.toIndexString = function() {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tif(v.stop===v.start+1) {\n\t\t\tif ( v.start===Token.EOF ) {\n\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t} else {\n\t\t\t\tnames.push(v.start.toString());\n\t\t\t}\n\t\t} else {\n\t\t\tnames.push(v.start.toString() + \"..\" + (v.stop-1).toString());\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\n\nIntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tfor (var j = v.start; j < v.stop; j++) {\n\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\nIntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {\n\tif (a === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else if (a === Token.EPSILON) {\n\t\treturn \"<EPSILON>\";\n\t} else {\n\t\treturn literalNames[a] || symbolicNames[a];\n\t}\n};\n\nexports.Interval = Interval;\nexports.IntervalSet = IntervalSet;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// The following images show the relation of states and\n// {@link ATNState//transitions} for various grammar constructs.\n//\n// <ul>\n//\n// <li>Solid edges marked with an &//0949; indicate a required\n// {@link EpsilonTransition}.</li>\n//\n// <li>Dashed edges indicate locations where any transition derived from\n// {@link Transition} might appear.</li>\n//\n// <li>Dashed nodes are place holders for either a sequence of linked\n// {@link BasicState} states or the inclusion of a block representing a nested\n// construct in one of the forms below.</li>\n//\n// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n// any number of alternatives (one or more). Nodes without the {@code ...} only\n// support the exact number of alternatives shown in the diagram.</li>\n//\n// </ul>\n//\n// <h2>Basic Blocks</h2>\n//\n// <h3>Rule</h3>\n//\n// <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Block of 1 or more alternatives</h3>\n//\n// <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Greedy Loops</h2>\n//\n// <h3>Greedy Closure: {@code (...)*}</h3>\n//\n// <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Positive Closure: {@code (...)+}</h3>\n//\n// <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Optional: {@code (...)?}</h3>\n//\n// <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Non-Greedy Loops</h2>\n//\n// <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n//\n// <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n//\n// <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Optional: {@code (...)??}</h3>\n//\n// <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n\nvar INITIAL_NUM_TRANSITIONS = 4;\n\nfunction ATNState() {\n    // Which ATN are we in?\n    this.atn = null;\n    this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n    this.stateType = null;\n    this.ruleIndex = 0; // at runtime, we don't have Rule objects\n    this.epsilonOnlyTransitions = false;\n    // Track the transitions emanating from this ATN state.\n    this.transitions = [];\n    // Used to cache lookahead during parsing, not used during construction\n    this.nextTokenWithinRule = null;\n    return this;\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\" ];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\nATNState.prototype.toString = function() {\n\treturn this.stateNumber;\n};\n\nATNState.prototype.equals = function(other) {\n    if (other instanceof ATNState) {\n        return this.stateNumber===other.stateNumber;\n    } else {\n        return false;\n    }\n};\n\nATNState.prototype.isNonGreedyExitState = function() {\n    return false;\n};\n\n\nATNState.prototype.addTransition = function(trans, index) {\n\tif(index===undefined) {\n\t\tindex = -1;\n\t}\n    if (this.transitions.length===0) {\n        this.epsilonOnlyTransitions = trans.isEpsilon;\n    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {\n        this.epsilonOnlyTransitions = false;\n    }\n    if (index===-1) {\n        this.transitions.push(trans);\n    } else {\n        this.transitions.splice(index, 1, trans);\n    }\n};\n\nfunction BasicState() {\n\tATNState.call(this);\n    this.stateType = ATNState.BASIC;\n    return this;\n}\n\nBasicState.prototype = Object.create(ATNState.prototype);\nBasicState.prototype.constructor = BasicState;\n\n\nfunction DecisionState() {\n\tATNState.call(this);\n    this.decision = -1;\n    this.nonGreedy = false;\n    return this;\n}\n\nDecisionState.prototype = Object.create(ATNState.prototype);\nDecisionState.prototype.constructor = DecisionState;\n\n\n//  The start of a regular {@code (...)} block.\nfunction BlockStartState() {\n\tDecisionState.call(this);\n\tthis.endState = null;\n\treturn this;\n}\n\nBlockStartState.prototype = Object.create(DecisionState.prototype);\nBlockStartState.prototype.constructor = BlockStartState;\n\n\nfunction BasicBlockStartState() {\n\tBlockStartState.call(this);\n\tthis.stateType = ATNState.BLOCK_START;\n\treturn this;\n}\n\nBasicBlockStartState.prototype = Object.create(BlockStartState.prototype);\nBasicBlockStartState.prototype.constructor = BasicBlockStartState;\n\n\n// Terminal node of a simple {@code (a|b|c)} block.\nfunction BlockEndState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.BLOCK_END;\n    this.startState = null;\n    return this;\n}\n\nBlockEndState.prototype = Object.create(ATNState.prototype);\nBlockEndState.prototype.constructor = BlockEndState;\n\n\n// The last node in the ATN for a rule, unless that rule is the start symbol.\n//  In that case, there is one transition to EOF. Later, we might encode\n//  references to all calls to this rule to compute FOLLOW sets for\n//  error handling.\n//\nfunction RuleStopState() {\n\tATNState.call(this);\n    this.stateType = ATNState.RULE_STOP;\n    return this;\n}\n\nRuleStopState.prototype = Object.create(ATNState.prototype);\nRuleStopState.prototype.constructor = RuleStopState;\n\nfunction RuleStartState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.RULE_START;\n\tthis.stopState = null;\n\tthis.isPrecedenceRule = false;\n\treturn this;\n}\n\nRuleStartState.prototype = Object.create(ATNState.prototype);\nRuleStartState.prototype.constructor = RuleStartState;\n\n// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n//  one to the loop back to start of the block and one to exit.\n//\nfunction PlusLoopbackState() {\n\tDecisionState.call(this);\n\tthis.stateType = ATNState.PLUS_LOOP_BACK;\n\treturn this;\n}\n\nPlusLoopbackState.prototype = Object.create(DecisionState.prototype);\nPlusLoopbackState.prototype.constructor = PlusLoopbackState;\n\n\n// Start of {@code (A|B|...)+} loop. Technically a decision state, but\n//  we don't use for code generation; somebody might need it, so I'm defining\n//  it for completeness. In reality, the {@link PlusLoopbackState} node is the\n//  real decision-making note for {@code A+}.\n//\nfunction PlusBlockStartState() {\n\tBlockStartState.call(this);\n\tthis.stateType = ATNState.PLUS_BLOCK_START;\n    this.loopBackState = null;\n    return this;\n}\n\nPlusBlockStartState.prototype = Object.create(BlockStartState.prototype);\nPlusBlockStartState.prototype.constructor = PlusBlockStartState;\n\n// The block that begins a closure loop.\nfunction StarBlockStartState() {\n\tBlockStartState.call(this);\n\tthis.stateType = ATNState.STAR_BLOCK_START;\n\treturn this;\n}\n\nStarBlockStartState.prototype = Object.create(BlockStartState.prototype);\nStarBlockStartState.prototype.constructor = StarBlockStartState;\n\n\nfunction StarLoopbackState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.STAR_LOOP_BACK;\n\treturn this;\n}\n\nStarLoopbackState.prototype = Object.create(ATNState.prototype);\nStarLoopbackState.prototype.constructor = StarLoopbackState;\n\n\nfunction StarLoopEntryState() {\n\tDecisionState.call(this);\n\tthis.stateType = ATNState.STAR_LOOP_ENTRY;\n    this.loopBackState = null;\n    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n    this.isPrecedenceDecision = null;\n    return this;\n}\n\nStarLoopEntryState.prototype = Object.create(DecisionState.prototype);\nStarLoopEntryState.prototype.constructor = StarLoopEntryState;\n\n\n// Mark the end of a * or + loop.\nfunction LoopEndState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.LOOP_END;\n\tthis.loopBackState = null;\n\treturn this;\n}\n\nLoopEndState.prototype = Object.create(ATNState.prototype);\nLoopEndState.prototype.constructor = LoopEndState;\n\n\n// The Tokens rule start state linking to each lexer rule start state */\nfunction TokensStartState() {\n\tDecisionState.call(this);\n\tthis.stateType = ATNState.TOKEN_START;\n\treturn this;\n}\n\nTokensStartState.prototype = Object.create(DecisionState.prototype);\nTokensStartState.prototype.constructor = TokensStartState;\n\nexports.ATNState = ATNState;\nexports.BasicState = BasicState;\nexports.DecisionState = DecisionState;\nexports.BlockStartState = BlockStartState;\nexports.BlockEndState = BlockEndState;\nexports.LoopEndState = LoopEndState;\nexports.RuleStartState = RuleStartState;\nexports.RuleStopState = RuleStopState;\nexports.TokensStartState = TokensStartState;\nexports.PlusLoopbackState = PlusLoopbackState;\nexports.StarLoopbackState = StarLoopbackState;\nexports.StarLoopEntryState = StarLoopEntryState;\nexports.PlusBlockStartState = PlusBlockStartState;\nexports.StarBlockStartState = StarBlockStartState;\nexports.BasicBlockStartState = BasicBlockStartState;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// The basic notion of a tree has a parent, a payload, and a list of children.\n//  It is the most abstract interface for all the trees used by ANTLR.\n///\n\nvar Token = require('./../Token').Token;\nvar Interval = require('./../IntervalSet').Interval;\nvar INVALID_INTERVAL = new Interval(-1, -2);\nvar Utils = require('../Utils.js');\n\n\nfunction Tree() {\n\treturn this;\n}\n\nfunction SyntaxTree() {\n\tTree.call(this);\n\treturn this;\n}\n\nSyntaxTree.prototype = Object.create(Tree.prototype);\nSyntaxTree.prototype.constructor = SyntaxTree;\n\nfunction ParseTree() {\n\tSyntaxTree.call(this);\n\treturn this;\n}\n\nParseTree.prototype = Object.create(SyntaxTree.prototype);\nParseTree.prototype.constructor = ParseTree;\n\nfunction RuleNode() {\n\tParseTree.call(this);\n\treturn this;\n}\n\nRuleNode.prototype = Object.create(ParseTree.prototype);\nRuleNode.prototype.constructor = RuleNode;\n\nfunction TerminalNode() {\n\tParseTree.call(this);\n\treturn this;\n}\n\nTerminalNode.prototype = Object.create(ParseTree.prototype);\nTerminalNode.prototype.constructor = TerminalNode;\n\nfunction ErrorNode() {\n\tTerminalNode.call(this);\n\treturn this;\n}\n\nErrorNode.prototype = Object.create(TerminalNode.prototype);\nErrorNode.prototype.constructor = ErrorNode;\n\nfunction ParseTreeVisitor() {\n\treturn this;\n}\n\nParseTreeVisitor.prototype.visit = function(ctx) {\n \tif (Array.isArray(ctx)) {\n\t\treturn ctx.map(function(child) {\n            return child.accept(this);\n        }, this);\n\t} else {\n\t\treturn ctx.accept(this);\n\t}\n};\n\nParseTreeVisitor.prototype.visitChildren = function(ctx) {\n\tif (ctx.children) {\n\t\treturn this.visit(ctx.children);\n\t} else {\n\t\treturn null;\n\t}\n}\n\nParseTreeVisitor.prototype.visitTerminal = function(node) {\n};\n\nParseTreeVisitor.prototype.visitErrorNode = function(node) {\n};\n\n\nfunction ParseTreeListener() {\n\treturn this;\n}\n\nParseTreeListener.prototype.visitTerminal = function(node) {\n};\n\nParseTreeListener.prototype.visitErrorNode = function(node) {\n};\n\nParseTreeListener.prototype.enterEveryRule = function(node) {\n};\n\nParseTreeListener.prototype.exitEveryRule = function(node) {\n};\n\nfunction TerminalNodeImpl(symbol) {\n\tTerminalNode.call(this);\n\tthis.parentCtx = null;\n\tthis.symbol = symbol;\n\treturn this;\n}\n\nTerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);\nTerminalNodeImpl.prototype.constructor = TerminalNodeImpl;\n\nTerminalNodeImpl.prototype.getChild = function(i) {\n\treturn null;\n};\n\nTerminalNodeImpl.prototype.getSymbol = function() {\n\treturn this.symbol;\n};\n\nTerminalNodeImpl.prototype.getParent = function() {\n\treturn this.parentCtx;\n};\n\nTerminalNodeImpl.prototype.getPayload = function() {\n\treturn this.symbol;\n};\n\nTerminalNodeImpl.prototype.getSourceInterval = function() {\n\tif (this.symbol === null) {\n\t\treturn INVALID_INTERVAL;\n\t}\n\tvar tokenIndex = this.symbol.tokenIndex;\n\treturn new Interval(tokenIndex, tokenIndex);\n};\n\nTerminalNodeImpl.prototype.getChildCount = function() {\n\treturn 0;\n};\n\nTerminalNodeImpl.prototype.accept = function(visitor) {\n\treturn visitor.visitTerminal(this);\n};\n\nTerminalNodeImpl.prototype.getText = function() {\n\treturn this.symbol.text;\n};\n\nTerminalNodeImpl.prototype.toString = function() {\n\tif (this.symbol.type === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else {\n\t\treturn this.symbol.text;\n\t}\n};\n\n// Represents a token that was consumed during resynchronization\n// rather than during a valid match operation. For example,\n// we will create this kind of a node during single token insertion\n// and deletion as well as during \"consume until error recovery set\"\n// upon no viable alternative exceptions.\n\nfunction ErrorNodeImpl(token) {\n\tTerminalNodeImpl.call(this, token);\n\treturn this;\n}\n\nErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);\nErrorNodeImpl.prototype.constructor = ErrorNodeImpl;\n\nErrorNodeImpl.prototype.isErrorNode = function() {\n\treturn true;\n};\n\nErrorNodeImpl.prototype.accept = function(visitor) {\n\treturn visitor.visitErrorNode(this);\n};\n\nfunction ParseTreeWalker() {\n\treturn this;\n}\n\nParseTreeWalker.prototype.walk = function(listener, t) {\n\tvar errorNode = t instanceof ErrorNode ||\n\t\t\t(t.isErrorNode !== undefined && t.isErrorNode());\n\tif (errorNode) {\n\t\tlistener.visitErrorNode(t);\n\t} else if (t instanceof TerminalNode) {\n\t\tlistener.visitTerminal(t);\n\t} else {\n\t\tthis.enterRule(listener, t);\n\t\tfor (var i = 0; i < t.getChildCount(); i++) {\n\t\t\tvar child = t.getChild(i);\n\t\t\tthis.walk(listener, child);\n\t\t}\n\t\tthis.exitRule(listener, t);\n\t}\n};\n//\n// The discovery of a rule node, involves sending two events: the generic\n// {@link ParseTreeListener//enterEveryRule} and a\n// {@link RuleContext}-specific event. First we trigger the generic and then\n// the rule specific. We to them in reverse order upon finishing the node.\n//\nParseTreeWalker.prototype.enterRule = function(listener, r) {\n\tvar ctx = r.getRuleContext();\n\tlistener.enterEveryRule(ctx);\n\tctx.enterRule(listener);\n};\n\nParseTreeWalker.prototype.exitRule = function(listener, r) {\n\tvar ctx = r.getRuleContext();\n\tctx.exitRule(listener);\n\tlistener.exitEveryRule(ctx);\n};\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\nexports.RuleNode = RuleNode;\nexports.ErrorNode = ErrorNode;\nexports.TerminalNode = TerminalNode;\nexports.ErrorNodeImpl = ErrorNodeImpl;\nexports.TerminalNodeImpl = TerminalNodeImpl;\nexports.ParseTreeListener = ParseTreeListener;\nexports.ParseTreeVisitor = ParseTreeVisitor;\nexports.ParseTreeWalker = ParseTreeWalker;\nexports.INVALID_INTERVAL = INVALID_INTERVAL;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n//  3 kinds of errors: prediction errors, failed predicate errors, and\n//  mismatched input errors. In each case, the parser knows where it is\n//  in the input, where it is in the ATN, the rule invocation stack,\n//  and what kind of problem occurred.\n\nvar PredicateTransition = require('./../atn/Transition').PredicateTransition;\n\nfunction RecognitionException(params) {\n\tError.call(this);\n\tif (!!Error.captureStackTrace) {\n        Error.captureStackTrace(this, RecognitionException);\n\t} else {\n\t\tvar stack = new Error().stack;\n\t}\n\tthis.message = params.message;\n    this.recognizer = params.recognizer;\n    this.input = params.input;\n    this.ctx = params.ctx;\n    // The current {@link Token} when an error occurred. Since not all streams\n    // support accessing symbols by index, we have to track the {@link Token}\n    // instance itself.\n    this.offendingToken = null;\n    // Get the ATN state number the parser was in at the time the error\n    // occurred. For {@link NoViableAltException} and\n    // {@link LexerNoViableAltException} exceptions, this is the\n    // {@link DecisionState} number. For others, it is the state whose outgoing\n    // edge we couldn't match.\n    this.offendingState = -1;\n    if (this.recognizer!==null) {\n        this.offendingState = this.recognizer.state;\n    }\n    return this;\n}\n\nRecognitionException.prototype = Object.create(Error.prototype);\nRecognitionException.prototype.constructor = RecognitionException;\n\n// <p>If the state number is not known, this method returns -1.</p>\n\n//\n// Gets the set of input symbols which could potentially follow the\n// previously matched symbol at the time this exception was thrown.\n//\n// <p>If the set of expected tokens is not known and could not be computed,\n// this method returns {@code null}.</p>\n//\n// @return The set of token types that could potentially follow the current\n// state in the ATN, or {@code null} if the information is not available.\n// /\nRecognitionException.prototype.getExpectedTokens = function() {\n    if (this.recognizer!==null) {\n        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n    } else {\n        return null;\n    }\n};\n\nRecognitionException.prototype.toString = function() {\n    return this.message;\n};\n\nfunction LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {\n\tRecognitionException.call(this, {message:\"\", recognizer:lexer, input:input, ctx:null});\n    this.startIndex = startIndex;\n    this.deadEndConfigs = deadEndConfigs;\n    return this;\n}\n\nLexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nLexerNoViableAltException.prototype.constructor = LexerNoViableAltException;\n\nLexerNoViableAltException.prototype.toString = function() {\n    var symbol = \"\";\n    if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n        symbol = this.input.getText((this.startIndex,this.startIndex));\n    }\n    return \"LexerNoViableAltException\" + symbol;\n};\n\n// Indicates that the parser could not decide which of two or more paths\n// to take based upon the remaining input. It tracks the starting token\n// of the offending input and also knows where the parser was\n// in the various paths when the error. Reported by reportNoViableAlternative()\n//\nfunction NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n\tctx = ctx || recognizer._ctx;\n\toffendingToken = offendingToken || recognizer.getCurrentToken();\n\tstartToken = startToken || recognizer.getCurrentToken();\n\tinput = input || recognizer.getInputStream();\n\tRecognitionException.call(this, {message:\"\", recognizer:recognizer, input:input, ctx:ctx});\n    // Which configurations did we try at input.index() that couldn't match\n\t// input.LT(1)?//\n    this.deadEndConfigs = deadEndConfigs;\n    // The token object at the start index; the input stream might\n    // not be buffering tokens so get a reference to it. (At the\n    // time the error occurred, of course the stream needs to keep a\n    // buffer all of the tokens but later we might not have access to those.)\n    this.startToken = startToken;\n    this.offendingToken = offendingToken;\n}\n\nNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nNoViableAltException.prototype.constructor = NoViableAltException;\n\n// This signifies any kind of mismatched input exceptions such as\n// when the current input does not match the expected token.\n//\nfunction InputMismatchException(recognizer) {\n\tRecognitionException.call(this, {message:\"\", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});\n    this.offendingToken = recognizer.getCurrentToken();\n}\n\nInputMismatchException.prototype = Object.create(RecognitionException.prototype);\nInputMismatchException.prototype.constructor = InputMismatchException;\n\n// A semantic predicate failed during validation. Validation of predicates\n// occurs when normally parsing the alternative just like matching a token.\n// Disambiguating predicate evaluation occurs when we test a predicate during\n// prediction.\n\nfunction FailedPredicateException(recognizer, predicate, message) {\n\tRecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,\n                         input:recognizer.getInputStream(), ctx:recognizer._ctx});\n    var s = recognizer._interp.atn.states[recognizer.state];\n    var trans = s.transitions[0];\n    if (trans instanceof PredicateTransition) {\n        this.ruleIndex = trans.ruleIndex;\n        this.predicateIndex = trans.predIndex;\n    } else {\n        this.ruleIndex = 0;\n        this.predicateIndex = 0;\n    }\n    this.predicate = predicate;\n    this.offendingToken = recognizer.getCurrentToken();\n    return this;\n}\n\nFailedPredicateException.prototype = Object.create(RecognitionException.prototype);\nFailedPredicateException.prototype.constructor = FailedPredicateException;\n\nFailedPredicateException.prototype.formatMessage = function(predicate, message) {\n    if (message !==null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n};\n\nfunction ParseCancellationException() {\n\tError.call(this);\n\tError.captureStackTrace(this, ParseCancellationException);\n\treturn this;\n}\n\nParseCancellationException.prototype = Object.create(Error.prototype);\nParseCancellationException.prototype.constructor = ParseCancellationException;\n\nexports.RecognitionException = RecognitionException;\nexports.NoViableAltException = NoViableAltException;\nexports.LexerNoViableAltException = LexerNoViableAltException;\nexports.InputMismatchException = InputMismatchException;\nexports.FailedPredicateException = FailedPredicateException;\nexports.ParseCancellationException = ParseCancellationException;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar RuleContext = require('./RuleContext').RuleContext;\nvar Hash = require('./Utils').Hash;\nvar Map = require('./Utils').Map;\n\nfunction PredictionContext(cachedHashCode) {\n\tthis.cachedHashCode = cachedHashCode;\n}\n\n// Represents {@code $} in local context prediction, which means wildcard.\n// {@code//+x =//}.\n// /\nPredictionContext.EMPTY = null;\n\n// Represents {@code $} in an array in full context mode, when {@code $}\n// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n// {@code $} = {@link //EMPTY_RETURN_STATE}.\n// /\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n\n// Stores the computed hash code of this {@link PredictionContext}. The hash\n// code is computed in parts to match the following reference algorithm.\n//\n// <pre>\n// private int referenceHashCode() {\n// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n// //INITIAL_HASH});\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n// getParent}(i));\n// }\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n// //getReturnState getReturnState}(i));\n// }\n//\n// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n// //size()});\n// return hash;\n// }\n// </pre>\n// /\n\n// This means only the {@link //EMPTY} context is in set.\nPredictionContext.prototype.isEmpty = function() {\n\treturn this === PredictionContext.EMPTY;\n};\n\nPredictionContext.prototype.hasEmptyPath = function() {\n\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nPredictionContext.prototype.hashCode = function() {\n\treturn this.cachedHashCode;\n};\n\n\nPredictionContext.prototype.updateHashCode = function(hash) {\n    hash.update(this.cachedHashCode);\n};\n/*\nfunction calculateHashString(parent, returnState) {\n\treturn \"\" + parent + returnState;\n}\n*/\n\n// Used to cache {@link PredictionContext} objects. Its used for the shared\n// context cash associated with contexts in DFA states. This cache\n// can be used for both lexers and parsers.\n\nfunction PredictionContextCache() {\n\tthis.cache = new Map();\n\treturn this;\n}\n\n// Add a context to the cache and return it. If the context already exists,\n// return that one instead and do not add a new context to the cache.\n// Protect shared cache from unsafe thread access.\n//\nPredictionContextCache.prototype.add = function(ctx) {\n\tif (ctx === PredictionContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\tvar existing = this.cache.get(ctx) || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\tthis.cache.put(ctx, ctx);\n\treturn ctx;\n};\n\nPredictionContextCache.prototype.get = function(ctx) {\n\treturn this.cache.get(ctx) || null;\n};\n\nObject.defineProperty(PredictionContextCache.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.cache.length;\n\t}\n});\n\nfunction SingletonPredictionContext(parent, returnState) {\n\tvar hashCode = 0;\n\tvar hash = new Hash();\n\tif(parent !== null) {\n\t\thash.update(parent, returnState);\n\t} else {\n\t\thash.update(1);\n\t}\n\thashCode = hash.finish();\n\tPredictionContext.call(this, hashCode);\n\tthis.parentCtx = parent;\n\tthis.returnState = returnState;\n}\n\nSingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);\nSingletonPredictionContext.prototype.contructor = SingletonPredictionContext;\n\nSingletonPredictionContext.create = function(parent, returnState) {\n\tif (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n\t\t// someone can pass in the bits of an array ctx that mean $\n\t\treturn PredictionContext.EMPTY;\n\t} else {\n\t\treturn new SingletonPredictionContext(parent, returnState);\n\t}\n};\n\nObject.defineProperty(SingletonPredictionContext.prototype, \"length\", {\n\tget : function() {\n\t\treturn 1;\n\t}\n});\n\nSingletonPredictionContext.prototype.getParent = function(index) {\n\treturn this.parentCtx;\n};\n\nSingletonPredictionContext.prototype.getReturnState = function(index) {\n\treturn this.returnState;\n};\n\nSingletonPredictionContext.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof SingletonPredictionContext)) {\n\t\treturn false;\n\t} else if (this.hashCode() !== other.hashCode()) {\n\t\treturn false; // can't be same if hash is different\n\t} else {\n\t\tif(this.returnState !== other.returnState)\n            return false;\n        else if(this.parentCtx==null)\n            return other.parentCtx==null\n\t\telse\n            return this.parentCtx.equals(other.parentCtx);\n\t}\n};\n\nSingletonPredictionContext.prototype.toString = function() {\n\tvar up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\tif (up.length === 0) {\n\t\tif (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\treturn \"$\";\n\t\t} else {\n\t\t\treturn \"\" + this.returnState;\n\t\t}\n\t} else {\n\t\treturn \"\" + this.returnState + \" \" + up;\n\t}\n};\n\nfunction EmptyPredictionContext() {\n\tSingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);\n\treturn this;\n}\n\nEmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);\nEmptyPredictionContext.prototype.constructor = EmptyPredictionContext;\n\nEmptyPredictionContext.prototype.isEmpty = function() {\n\treturn true;\n};\n\nEmptyPredictionContext.prototype.getParent = function(index) {\n\treturn null;\n};\n\nEmptyPredictionContext.prototype.getReturnState = function(index) {\n\treturn this.returnState;\n};\n\nEmptyPredictionContext.prototype.equals = function(other) {\n\treturn this === other;\n};\n\nEmptyPredictionContext.prototype.toString = function() {\n\treturn \"$\";\n};\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n\nfunction ArrayPredictionContext(parents, returnStates) {\n\t// Parent can be null only if full ctx mode and we make an array\n\t// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n\t// null parent and\n\t// returnState == {@link //EMPTY_RETURN_STATE}.\n\tvar h = new Hash();\n\th.update(parents, returnStates);\n\tvar hashCode = h.finish();\n\tPredictionContext.call(this, hashCode);\n\tthis.parents = parents;\n\tthis.returnStates = returnStates;\n\treturn this;\n}\n\nArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);\nArrayPredictionContext.prototype.constructor = ArrayPredictionContext;\n\nArrayPredictionContext.prototype.isEmpty = function() {\n\t// since EMPTY_RETURN_STATE can only appear in the last position, we\n\t// don't need to verify that size==1\n\treturn this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nObject.defineProperty(ArrayPredictionContext.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.returnStates.length;\n\t}\n});\n\nArrayPredictionContext.prototype.getParent = function(index) {\n\treturn this.parents[index];\n};\n\nArrayPredictionContext.prototype.getReturnState = function(index) {\n\treturn this.returnStates[index];\n};\n\nArrayPredictionContext.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof ArrayPredictionContext)) {\n\t\treturn false;\n\t} else if (this.hashCode() !== other.hashCode()) {\n\t\treturn false; // can't be same if hash is different\n\t} else {\n\t\treturn this.returnStates === other.returnStates &&\n\t\t\t\tthis.parents === other.parents;\n\t}\n};\n\nArrayPredictionContext.prototype.toString = function() {\n\tif (this.isEmpty()) {\n\t\treturn \"[]\";\n\t} else {\n\t\tvar s = \"[\";\n\t\tfor (var i = 0; i < this.returnStates.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\ts = s + \", \";\n\t\t\t}\n\t\t\tif (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\ts = s + \"$\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ts = s + this.returnStates[i];\n\t\t\tif (this.parents[i] !== null) {\n\t\t\t\ts = s + \" \" + this.parents[i];\n\t\t\t} else {\n\t\t\t\ts = s + \"null\";\n\t\t\t}\n\t\t}\n\t\treturn s + \"]\";\n\t}\n};\n\n// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n// Return {@link //EMPTY} if {@code outerContext} is empty or null.\n// /\nfunction predictionContextFromRuleContext(atn, outerContext) {\n\tif (outerContext === undefined || outerContext === null) {\n\t\touterContext = RuleContext.EMPTY;\n\t}\n\t// if we are in RuleContext of start rule, s, then PredictionContext\n\t// is EMPTY. Nobody called us. (if we are empty, return empty)\n\tif (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\t// If we have a parent, convert it to a PredictionContext graph\n\tvar parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n\tvar state = atn.states[outerContext.invokingState];\n\tvar transition = state.transitions[0];\n\treturn SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n/*\nfunction calculateListsHashString(parents, returnStates) {\n\tvar s = \"\";\n\tparents.map(function(p) {\n\t\ts = s + p;\n\t});\n\treturnStates.map(function(r) {\n\t\ts = s + r;\n\t});\n\treturn s;\n}\n*/\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n\t// share same graph if both same\n\tif (a === b) {\n\t\treturn a;\n\t}\n\tif (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n\t\treturn mergeSingletons(a, b, rootIsWildcard, mergeCache);\n\t}\n\t// At least one of a or b is array\n\t// If one is $ and rootIsWildcard, return $ as// wildcard\n\tif (rootIsWildcard) {\n\t\tif (a instanceof EmptyPredictionContext) {\n\t\t\treturn a;\n\t\t}\n\t\tif (b instanceof EmptyPredictionContext) {\n\t\t\treturn b;\n\t\t}\n\t}\n\t// convert singleton so both are arrays to normalize\n\tif (a instanceof SingletonPredictionContext) {\n\t\ta = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n\t}\n\tif (b instanceof SingletonPredictionContext) {\n\t\tb = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n\t}\n\treturn mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n//\n// Merge two {@link SingletonPredictionContext} instances.\n//\n// <p>Stack tops equal, parents merge is same; return left graph.<br>\n// <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Same stack top, parents differ; merge parents giving array node, then\n// remainders of those graphs. A new root node is created to point to the\n// merged parents.<br>\n// <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to same parent. Make array node for the\n// root where both element in the root point to the same (original)\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to different parents. Make array node for\n// the root where each element points to the corresponding original\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// @param mergeCache\n// /\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tvar previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\n\tvar rootMerge = mergeRoot(a, b, rootIsWildcard);\n\tif (rootMerge !== null) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, rootMerge);\n\t\t}\n\t\treturn rootMerge;\n\t}\n\tif (a.returnState === b.returnState) {\n\t\tvar parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n\t\t// if parent is same as existing a or b parent or reduced to a parent,\n\t\t// return it\n\t\tif (parent === a.parentCtx) {\n\t\t\treturn a; // ax + bx = ax, if a=b\n\t\t}\n\t\tif (parent === b.parentCtx) {\n\t\t\treturn b; // ax + bx = bx, if a=b\n\t\t}\n\t\t// else: ax + ay = a'[x,y]\n\t\t// merge parents x and y, giving array node with x,y then remainders\n\t\t// of those graphs. dup a, a' points at merged array\n\t\t// new joined parent so create new singleton pointing to it, a'\n\t\tvar spc = SingletonPredictionContext.create(parent, a.returnState);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, spc);\n\t\t}\n\t\treturn spc;\n\t} else { // a != b payloads differ\n\t\t// see if we can collapse parents due to $+x parents if local ctx\n\t\tvar singleParent = null;\n\t\tif (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// bx =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [a,b]x\n\t\t\tsingleParent = a.parentCtx;\n\t\t}\n\t\tif (singleParent !== null) { // parents are same\n\t\t\t// sort payloads and use same parent\n\t\t\tvar payloads = [ a.returnState, b.returnState ];\n\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t}\n\t\t\tvar parents = [ singleParent, singleParent ];\n\t\t\tvar apc = new ArrayPredictionContext(parents, payloads);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, apc);\n\t\t\t}\n\t\t\treturn apc;\n\t\t}\n\t\t// parents differ and can't merge them. Just pack together\n\t\t// into array; can't merge.\n\t\t// ax + by = [ax,by]\n\t\tvar payloads = [ a.returnState, b.returnState ];\n\t\tvar parents = [ a.parentCtx, b.parentCtx ];\n\t\tif (a.returnState > b.returnState) { // sort by payload\n\t\t\tpayloads[0] = b.returnState;\n\t\t\tpayloads[1] = a.returnState;\n\t\t\tparents = [ b.parentCtx, a.parentCtx ];\n\t\t}\n\t\tvar a_ = new ArrayPredictionContext(parents, payloads);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a_);\n\t\t}\n\t\treturn a_;\n\t}\n}\n\n//\n// Handle case where at least one of {@code a} or {@code b} is\n// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n// to represent {@link //EMPTY}.\n//\n// <h2>Local-Context Merges</h2>\n//\n// <p>These local-context merge operations are used when {@code rootIsWildcard}\n// is true.</p>\n//\n// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n// <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n// {@code //EMPTY}; return left graph.<br>\n// <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Special case of last merge if local context.<br>\n// <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <h2>Full-Context Merges</h2>\n//\n// <p>These full-context merge operations are used when {@code rootIsWildcard}\n// is false.</p>\n//\n// <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n// null parent).<br>\n// <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// /\nfunction mergeRoot(a, b, rootIsWildcard) {\n\tif (rootIsWildcard) {\n\t\tif (a === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // // + b =//\n\t\t}\n\t\tif (b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // a +// =//\n\t\t}\n\t} else {\n\t\tif (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // $ + $ = $\n\t\t} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]\n\t\t\tvar payloads = [ b.returnState,\n\t\t\t\t\tPredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tvar parents = [ b.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)\n\t\t\tvar payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tvar parents = [ a.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t}\n\t}\n\treturn null;\n}\n\n//\n// Merge two {@link ArrayPredictionContext} instances.\n//\n// <p>Different tops, different parents.<br>\n// <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, same parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, different parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, all shared parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Equal tops, merge parents and reduce top to\n// {@link SingletonPredictionContext}.<br>\n// <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n// /\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tvar previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\t// merge sorted payloads a + b => M\n\tvar i = 0; // walks a\n\tvar j = 0; // walks b\n\tvar k = 0; // walks target M array\n\n\tvar mergedReturnStates = [];\n\tvar mergedParents = [];\n\t// walk and merge to yield mergedParents, mergedReturnStates\n\twhile (i < a.returnStates.length && j < b.returnStates.length) {\n\t\tvar a_parent = a.parents[i];\n\t\tvar b_parent = b.parents[j];\n\t\tif (a.returnStates[i] === b.returnStates[j]) {\n\t\t\t// same payload (stack tops are equal), must yield merged singleton\n\t\t\tvar payload = a.returnStates[i];\n\t\t\t// $+$ = $\n\t\t\tvar bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&\n\t\t\t\t\ta_parent === null && b_parent === null;\n\t\t\tvar ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ax\n\t\t\tif (bothDollars || ax_ax) {\n\t\t\t\tmergedParents[k] = a_parent; // choose left\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t} else { // ax+ay -> a'[x,y]\n\t\t\t\tvar mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n\t\t\t\tmergedParents[k] = mergedParent;\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t}\n\t\t\ti += 1; // hop over left one as usual\n\t\t\tj += 1; // but also skip one in right side since we merge\n\t\t} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M\n\t\t\tmergedParents[k] = a_parent;\n\t\t\tmergedReturnStates[k] = a.returnStates[i];\n\t\t\ti += 1;\n\t\t} else { // b > a, copy b[j] to M\n\t\t\tmergedParents[k] = b_parent;\n\t\t\tmergedReturnStates[k] = b.returnStates[j];\n\t\t\tj += 1;\n\t\t}\n\t\tk += 1;\n\t}\n\t// copy over any payloads remaining in either array\n\tif (i < a.returnStates.length) {\n\t\tfor (var p = i; p < a.returnStates.length; p++) {\n\t\t\tmergedParents[k] = a.parents[p];\n\t\t\tmergedReturnStates[k] = a.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t} else {\n\t\tfor (var p = j; p < b.returnStates.length; p++) {\n\t\t\tmergedParents[k] = b.parents[p];\n\t\t\tmergedReturnStates[k] = b.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t}\n\t// trim merged if we combined a few that had same stack tops\n\tif (k < mergedParents.length) { // write index < last position; trim\n\t\tif (k === 1) { // for just one merged element, return singleton top\n\t\t\tvar a_ = SingletonPredictionContext.create(mergedParents[0],\n\t\t\t\t\tmergedReturnStates[0]);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t}\n\t\t\treturn a_;\n\t\t}\n\t\tmergedParents = mergedParents.slice(0, k);\n\t\tmergedReturnStates = mergedReturnStates.slice(0, k);\n\t}\n\n\tvar M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n\t// if we created same array as a or b, return that instead\n\t// TODO: track whether this is possible above during merge sort for speed\n\tif (M === a) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a);\n\t\t}\n\t\treturn a;\n\t}\n\tif (M === b) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, b);\n\t\t}\n\t\treturn b;\n\t}\n\tcombineCommonParents(mergedParents);\n\n\tif (mergeCache !== null) {\n\t\tmergeCache.set(a, b, M);\n\t}\n\treturn M;\n}\n\n//\n// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n// ones.\n// /\nfunction combineCommonParents(parents) {\n\tvar uniqueParents = new Map();\n\n\tfor (var p = 0; p < parents.length; p++) {\n\t\tvar parent = parents[p];\n\t\tif (!(uniqueParents.containsKey(parent))) {\n\t\t\tuniqueParents.put(parent, parent);\n\t\t}\n\t}\n\tfor (var q = 0; q < parents.length; q++) {\n\t\tparents[q] = uniqueParents.get(parents[q]);\n\t}\n}\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n\tif (context.isEmpty()) {\n\t\treturn context;\n\t}\n\tvar existing = visited.get(context) || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\texisting = contextCache.get(context);\n\tif (existing !== null) {\n\t\tvisited.put(context, existing);\n\t\treturn existing;\n\t}\n\tvar changed = false;\n\tvar parents = [];\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tvar parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\tif (!changed) {\n\t\t\t\tparents = [];\n\t\t\t\tfor (var j = 0; j < context.length; j++) {\n\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t}\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tparents[i] = parent;\n\t\t}\n\t}\n\tif (!changed) {\n\t\tcontextCache.add(context);\n\t\tvisited.put(context, context);\n\t\treturn context;\n\t}\n\tvar updated = null;\n\tif (parents.length === 0) {\n\t\tupdated = PredictionContext.EMPTY;\n\t} else if (parents.length === 1) {\n\t\tupdated = SingletonPredictionContext.create(parents[0], context\n\t\t\t\t.getReturnState(0));\n\t} else {\n\t\tupdated = new ArrayPredictionContext(parents, context.returnStates);\n\t}\n\tcontextCache.add(updated);\n\tvisited.put(updated, updated);\n\tvisited.put(context, updated);\n\n\treturn updated;\n}\n\n// ter's recursive version of Sam's getAllNodes()\nfunction getAllContextNodes(context, nodes, visited) {\n\tif (nodes === null) {\n\t\tnodes = [];\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else if (visited === null) {\n\t\tvisited = new Map();\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else {\n\t\tif (context === null || visited.containsKey(context)) {\n\t\t\treturn nodes;\n\t\t}\n\t\tvisited.put(context, context);\n\t\tnodes.push(context);\n\t\tfor (var i = 0; i < context.length; i++) {\n\t\t\tgetAllContextNodes(context.getParent(i), nodes, visited);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nexports.merge = merge;\nexports.PredictionContext = PredictionContext;\nexports.PredictionContextCache = PredictionContextCache;\nexports.SingletonPredictionContext = SingletonPredictionContext;\nexports.predictionContextFromRuleContext = predictionContextFromRuleContext;\nexports.getCachedPredictionContext = getCachedPredictionContext;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\n\nfunction ATN(grammarType , maxTokenType) {\n\n    // Used for runtime deserialization of ATNs from strings///\n    // The type of the ATN.\n    this.grammarType = grammarType;\n    // The maximum value for any symbol recognized by a transition in the ATN.\n    this.maxTokenType = maxTokenType;\n    this.states = [];\n    // Each subrule/rule is a decision point and we must track them so we\n    //  can go back later and build DFA predictors for them.  This includes\n    //  all the rules, subrules, optional blocks, ()+, ()* etc...\n    this.decisionToState = [];\n    // Maps from rule index to starting state number.\n    this.ruleToStartState = [];\n    // Maps from rule index to stop state number.\n    this.ruleToStopState = null;\n    this.modeNameToStartState = {};\n    // For lexer ATNs, this maps the rule index to the resulting token type.\n    // For parser ATNs, this maps the rule index to the generated bypass token\n    // type if the\n    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n    // deserialization option was specified; otherwise, this is {@code null}.\n    this.ruleToTokenType = null;\n    // For lexer ATNs, this is an array of {@link LexerAction} objects which may\n    // be referenced by action transitions in the ATN.\n    this.lexerActions = null;\n    this.modeToStartState = [];\n\n    return this;\n}\n\n// Compute the set of valid tokens that can occur starting in state {@code s}.\n//  If {@code ctx} is null, the set of tokens will not include what can follow\n//  the rule surrounding {@code s}. In other words, the set will be\n//  restricted to tokens reachable staying within {@code s}'s rule.\nATN.prototype.nextTokensInContext = function(s, ctx) {\n    var anal = new LL1Analyzer(this);\n    return anal.LOOK(s, null, ctx);\n};\n\n// Compute the set of valid tokens that can occur starting in {@code s} and\n// staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n// rule.\nATN.prototype.nextTokensNoContext = function(s) {\n    if (s.nextTokenWithinRule !== null ) {\n        return s.nextTokenWithinRule;\n    }\n    s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n    s.nextTokenWithinRule.readOnly = true;\n    return s.nextTokenWithinRule;\n};\n\nATN.prototype.nextTokens = function(s, ctx) {\n    if ( ctx===undefined ) {\n        return this.nextTokensNoContext(s);\n    } else {\n        return this.nextTokensInContext(s, ctx);\n    }\n};\n\nATN.prototype.addState = function( state) {\n    if ( state !== null ) {\n        state.atn = this;\n        state.stateNumber = this.states.length;\n    }\n    this.states.push(state);\n};\n\nATN.prototype.removeState = function( state) {\n    this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n};\n\nATN.prototype.defineDecisionState = function( s) {\n    this.decisionToState.push(s);\n    s.decision = this.decisionToState.length-1;\n    return s.decision;\n};\n\nATN.prototype.getDecisionState = function( decision) {\n    if (this.decisionToState.length===0) {\n        return null;\n    } else {\n        return this.decisionToState[decision];\n    }\n};\n\n// Computes the set of input symbols which could follow ATN state number\n// {@code stateNumber} in the specified full {@code context}. This method\n// considers the complete parser context, but does not evaluate semantic\n// predicates (i.e. all predicates encountered during the calculation are\n// assumed true). If a path in the ATN exists from the starting state to the\n// {@link RuleStopState} of the outermost context without matching any\n// symbols, {@link Token//EOF} is added to the returned set.\n//\n// <p>If {@code context} is {@code null}, it is treated as\n// {@link ParserRuleContext//EMPTY}.</p>\n//\n// @param stateNumber the ATN state number\n// @param context the full parse context\n// @return The set of potentially valid input symbols which could follow the\n// specified state in the specified context.\n// @throws IllegalArgumentException if the ATN does not contain a state with\n// number {@code stateNumber}\nvar Token = require('./../Token').Token;\n\nATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {\n    if ( stateNumber < 0 || stateNumber >= this.states.length ) {\n        throw(\"Invalid state number.\");\n    }\n    var s = this.states[stateNumber];\n    var following = this.nextTokens(s);\n    if (!following.contains(Token.EPSILON)) {\n        return following;\n    }\n    var expected = new IntervalSet();\n    expected.addSet(following);\n    expected.removeOne(Token.EPSILON);\n    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n        var invokingState = this.states[ctx.invokingState];\n        var rt = invokingState.transitions[0];\n        following = this.nextTokens(rt.followState);\n        expected.addSet(following);\n        expected.removeOne(Token.EPSILON);\n        ctx = ctx.parentCtx;\n    }\n    if (following.contains(Token.EPSILON)) {\n        expected.addOne(Token.EOF);\n    }\n    return expected;\n};\n\nATN.INVALID_ALT_NUMBER = 0;\n\nexports.ATN = ATN;","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//  An ATN transition between any two ATN states.  Subclasses define\n//  atom, set, epsilon, action, predicate, rule transitions.\n//\n//  <p>This is a one way link.  It emanates from a state (usually via a list of\n//  transitions) and has a target state.</p>\n//\n//  <p>Since we never have to change the ATN transitions once we construct it,\n//  we can fix these transitions as specific classes. The DFA transitions\n//  on the other hand need to update the labels as it adds transitions to\n//  the states. We'll use the term Edge for the DFA to distinguish them from\n//  ATN transitions.</p>\n\nvar Token = require('./../Token').Token;\nvar Interval = require('./../IntervalSet').Interval;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\nvar Predicate = require('./SemanticContext').Predicate;\nvar PrecedencePredicate = require('./SemanticContext').PrecedencePredicate;\n\nfunction Transition (target) {\n    // The target of this transition.\n    if (target===undefined || target===null) {\n        throw \"target cannot be null.\";\n    }\n    this.target = target;\n    // Are we epsilon, action, sempred?\n    this.isEpsilon = false;\n    this.label = null;\n    return this;\n}\n    // constants for serialization\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\nTransition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?\nTransition.ATOM = 5;\nTransition.ACTION = 6;\nTransition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ];\n\nTransition.serializationTypes = {\n        EpsilonTransition: Transition.EPSILON,\n        RangeTransition: Transition.RANGE,\n        RuleTransition: Transition.RULE,\n        PredicateTransition: Transition.PREDICATE,\n        AtomTransition: Transition.ATOM,\n        ActionTransition: Transition.ACTION,\n        SetTransition: Transition.SET,\n        NotSetTransition: Transition.NOT_SET,\n        WildcardTransition: Transition.WILDCARD,\n        PrecedencePredicateTransition: Transition.PRECEDENCE\n    };\n\n\n// TODO: make all transitions sets? no, should remove set edges\nfunction AtomTransition(target, label) {\n\tTransition.call(this, target);\n\tthis.label_ = label; // The token type or character value; or, signifies special label.\n    this.label = this.makeLabel();\n    this.serializationType = Transition.ATOM;\n    return this;\n}\n\nAtomTransition.prototype = Object.create(Transition.prototype);\nAtomTransition.prototype.constructor = AtomTransition;\n\nAtomTransition.prototype.makeLabel = function() {\n\tvar s = new IntervalSet();\n    s.addOne(this.label_);\n    return s;\n};\n\nAtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {\n    return this.label_ === symbol;\n};\n\nAtomTransition.prototype.toString = function() {\n\treturn this.label_;\n};\n\nfunction RuleTransition(ruleStart, ruleIndex, precedence, followState) {\n\tTransition.call(this, ruleStart);\n    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref\n    this.precedence = precedence;\n    this.followState = followState; // what node to begin computations following ref to rule\n    this.serializationType = Transition.RULE;\n    this.isEpsilon = true;\n    return this;\n}\n\nRuleTransition.prototype = Object.create(Transition.prototype);\nRuleTransition.prototype.constructor = RuleTransition;\n\nRuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\n\nfunction EpsilonTransition(target, outermostPrecedenceReturn) {\n\tTransition.call(this, target);\n    this.serializationType = Transition.EPSILON;\n    this.isEpsilon = true;\n    this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    return this;\n}\n\nEpsilonTransition.prototype = Object.create(Transition.prototype);\nEpsilonTransition.prototype.constructor = EpsilonTransition;\n\nEpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nEpsilonTransition.prototype.toString = function() {\n\treturn \"epsilon\";\n};\n\nfunction RangeTransition(target, start, stop) {\n\tTransition.call(this, target);\n\tthis.serializationType = Transition.RANGE;\n    this.start = start;\n    this.stop = stop;\n    this.label = this.makeLabel();\n    return this;\n}\n\nRangeTransition.prototype = Object.create(Transition.prototype);\nRangeTransition.prototype.constructor = RangeTransition;\n\nRangeTransition.prototype.makeLabel = function() {\n    var s = new IntervalSet();\n    s.addRange(this.start, this.stop);\n    return s;\n};\n\nRangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn symbol >= this.start && symbol <= this.stop;\n};\n\nRangeTransition.prototype.toString = function() {\n\treturn \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n};\n\nfunction AbstractPredicateTransition(target) {\n\tTransition.call(this, target);\n\treturn this;\n}\n\nAbstractPredicateTransition.prototype = Object.create(Transition.prototype);\nAbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;\n\nfunction PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {\n\tAbstractPredicateTransition.call(this, target);\n    this.serializationType = Transition.PREDICATE;\n    this.ruleIndex = ruleIndex;\n    this.predIndex = predIndex;\n    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n    this.isEpsilon = true;\n    return this;\n}\n\nPredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPredicateTransition.prototype.constructor = PredicateTransition;\n\nPredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nPredicateTransition.prototype.getPredicate = function() {\n\treturn new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicateTransition.prototype.toString = function() {\n\treturn \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n};\n\nfunction ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {\n\tTransition.call(this, target);\n    this.serializationType = Transition.ACTION;\n    this.ruleIndex = ruleIndex;\n    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;\n    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred\n    this.isEpsilon = true;\n    return this;\n}\n\nActionTransition.prototype = Object.create(Transition.prototype);\nActionTransition.prototype.constructor = ActionTransition;\n\n\nActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nActionTransition.prototype.toString = function() {\n\treturn \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n};\n\n\n// A transition containing a set of values.\nfunction SetTransition(target, set) {\n\tTransition.call(this, target);\n\tthis.serializationType = Transition.SET;\n    if (set !==undefined && set !==null) {\n        this.label = set;\n    } else {\n        this.label = new IntervalSet();\n        this.label.addOne(Token.INVALID_TYPE);\n    }\n    return this;\n}\n\nSetTransition.prototype = Object.create(Transition.prototype);\nSetTransition.prototype.constructor = SetTransition;\n\nSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn this.label.contains(symbol);\n};\n\n\nSetTransition.prototype.toString = function() {\n\treturn this.label.toString();\n};\n\nfunction NotSetTransition(target, set) {\n\tSetTransition.call(this, target, set);\n\tthis.serializationType = Transition.NOT_SET;\n\treturn this;\n}\n\nNotSetTransition.prototype = Object.create(SetTransition.prototype);\nNotSetTransition.prototype.constructor = NotSetTransition;\n\nNotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&\n\t\t\t!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);\n};\n\nNotSetTransition.prototype.toString = function() {\n\treturn '~' + SetTransition.prototype.toString.call(this);\n};\n\nfunction WildcardTransition(target) {\n\tTransition.call(this, target);\n\tthis.serializationType = Transition.WILDCARD;\n\treturn this;\n}\n\nWildcardTransition.prototype = Object.create(Transition.prototype);\nWildcardTransition.prototype.constructor = WildcardTransition;\n\n\nWildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n};\n\nWildcardTransition.prototype.toString = function() {\n\treturn \".\";\n};\n\nfunction PrecedencePredicateTransition(target, precedence) {\n\tAbstractPredicateTransition.call(this, target);\n    this.serializationType = Transition.PRECEDENCE;\n    this.precedence = precedence;\n    this.isEpsilon = true;\n    return this;\n}\n\nPrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;\n\nPrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nPrecedencePredicateTransition.prototype.getPredicate = function() {\n\treturn new PrecedencePredicate(this.precedence);\n};\n\nPrecedencePredicateTransition.prototype.toString = function() {\n\treturn this.precedence + \" >= _p\";\n};\n\nexports.Transition = Transition;\nexports.AtomTransition = AtomTransition;\nexports.SetTransition = SetTransition;\nexports.NotSetTransition = NotSetTransition;\nexports.RuleTransition = RuleTransition;\nexports.ActionTransition = ActionTransition;\nexports.EpsilonTransition = EpsilonTransition;\nexports.RangeTransition = RangeTransition;\nexports.WildcardTransition = WildcardTransition;\nexports.PredicateTransition = PredicateTransition;\nexports.PrecedencePredicateTransition = PrecedencePredicateTransition;\nexports.AbstractPredicateTransition = AbstractPredicateTransition;","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n//\n// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n// info about the set, with support for combining similar configurations using a\n// graph-structured stack.\n///\n\nvar ATN = require('./ATN').ATN;\nvar Utils = require('./../Utils');\nvar Hash = Utils.Hash;\nvar Set = Utils.Set;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar merge = require('./../PredictionContext').merge;\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif ( a===b ) {\n\t\treturn true;\n\t} else if ( a===null || b===null ) {\n\t\treturn false;\n\t} else\n       return a.equalsForConfigSet(b);\n }\n\n\nfunction ATNConfigSet(fullCtx) {\n\t//\n\t// The reason that we need this is because we don't want the hash map to use\n\t// the standard hash code and equals. We need all configurations with the\n\t// same\n\t// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t// doubles\n\t// the number of objects associated with ATNConfigs. The other solution is\n\t// to\n\t// use a hash table that lets us specify the equals/hashcode operation.\n\t// All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t// when we go readonly as this set becomes a DFA state.\n\tthis.configLookup = new Set(hashATNConfig, equalATNConfigs);\n\t// Indicates that this configuration set is part of a full context\n\t// LL prediction. It will be used to determine how to merge $. With SLL\n\t// it's a wildcard whereas it is not for LL context merge.\n\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t// Indicates that the set of configurations is read-only. Do not\n\t// allow any code to manipulate the set; DFA states will point at\n\t// the sets and they must not change. This does not protect the other\n\t// fields; in particular, conflictingAlts is set after\n\t// we've made this readonly.\n\tthis.readOnly = false;\n\t// Track the elements as they are added to the set; supports get(i)///\n\tthis.configs = [];\n\n\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t// together, saves recomputation\n\t// TODO: can we track conflicts as they are added to save scanning configs\n\t// later?\n\tthis.uniqueAlt = 0;\n\tthis.conflictingAlts = null;\n\n\t// Used in parser and lexer. In lexer, it indicates we hit a pred\n\t// while computing a closure operation. Don't make a DFA state from this.\n\tthis.hasSemanticContext = false;\n\tthis.dipsIntoOuterContext = false;\n\n\tthis.cachedHashCode = -1;\n\n\treturn this;\n}\n\n// Adding a new config means merging contexts with existing configs for\n// {@code (s, i, pi, _)}, where {@code s} is the\n// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n// {@code pi} is the {@link ATNConfig//semanticContext}. We use\n// {@code (s,i,pi)} as key.\n//\n// <p>This method updates {@link //dipsIntoOuterContext} and\n// {@link //hasSemanticContext} when necessary.</p>\n// /\nATNConfigSet.prototype.add = function(config, mergeCache) {\n\tif (mergeCache === undefined) {\n\t\tmergeCache = null;\n\t}\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\tthis.hasSemanticContext = true;\n\t}\n\tif (config.reachesIntoOuterContext > 0) {\n\t\tthis.dipsIntoOuterContext = true;\n\t}\n\tvar existing = this.configLookup.add(config);\n\tif (existing === config) {\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configs.push(config); // track order here\n\t\treturn true;\n\t}\n\t// a previous (s,i,pi,_), merge with it and save result\n\tvar rootIsWildcard = !this.fullCtx;\n\tvar merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t// no need to check for existing.context, config.context in cache\n\t// since only way to create new graphs is \"call rule\" and here. We\n\t// cache at both places.\n\texisting.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t// make sure to preserve the precedence filter suppression during the merge\n\tif (config.precedenceFilterSuppressed) {\n\t\texisting.precedenceFilterSuppressed = true;\n\t}\n\texisting.context = merged; // replace context; no need to alt mapping\n\treturn true;\n};\n\nATNConfigSet.prototype.getStates = function() {\n\tvar states = new Set();\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tstates.add(this.configs[i].state);\n\t}\n\treturn states;\n};\n\nATNConfigSet.prototype.getPredicates = function() {\n\tvar preds = [];\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tvar c = this.configs[i].semanticContext;\n\t\tif (c !== SemanticContext.NONE) {\n\t\t\tpreds.push(c.semanticContext);\n\t\t}\n\t}\n\treturn preds;\n};\n\nObject.defineProperty(ATNConfigSet.prototype, \"items\", {\n\tget : function() {\n\t\treturn this.configs;\n\t}\n});\n\nATNConfigSet.prototype.optimizeConfigs = function(interpreter) {\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tif (this.configLookup.length === 0) {\n\t\treturn;\n\t}\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tvar config = this.configs[i];\n\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t}\n};\n\nATNConfigSet.prototype.addAll = function(coll) {\n\tfor (var i = 0; i < coll.length; i++) {\n\t\tthis.add(coll[i]);\n\t}\n\treturn false;\n};\n\nATNConfigSet.prototype.equals = function(other) {\n\treturn this === other ||\n\t\t(other instanceof ATNConfigSet &&\n\t\tUtils.equalArrays(this.configs, other.configs) &&\n\t\tthis.fullCtx === other.fullCtx &&\n\t\tthis.uniqueAlt === other.uniqueAlt &&\n\t\tthis.conflictingAlts === other.conflictingAlts &&\n\t\tthis.hasSemanticContext === other.hasSemanticContext &&\n\t\tthis.dipsIntoOuterContext === other.dipsIntoOuterContext);\n};\n\nATNConfigSet.prototype.hashCode = function() {\n    var hash = new Hash();\n\thash.update(this.configs);\n    return hash.finish();\n};\n\n\nATNConfigSet.prototype.updateHashCode = function(hash) {\n\tif (this.readOnly) {\n\t\tif (this.cachedHashCode === -1) {\n            this.cachedHashCode = this.hashCode();\n\t\t}\n        hash.update(this.cachedHashCode);\n\t} else {\n        hash.update(this.hashCode());\n\t}\n};\n\n\nObject.defineProperty(ATNConfigSet.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.configs.length;\n\t}\n});\n\nATNConfigSet.prototype.isEmpty = function() {\n\treturn this.configs.length === 0;\n};\n\nATNConfigSet.prototype.contains = function(item) {\n\tif (this.configLookup === null) {\n\t\tthrow \"This method is not implemented for readonly sets.\";\n\t}\n\treturn this.configLookup.contains(item);\n};\n\nATNConfigSet.prototype.containsFast = function(item) {\n\tif (this.configLookup === null) {\n\t\tthrow \"This method is not implemented for readonly sets.\";\n\t}\n\treturn this.configLookup.containsFast(item);\n};\n\nATNConfigSet.prototype.clear = function() {\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tthis.configs = [];\n\tthis.cachedHashCode = -1;\n\tthis.configLookup = new Set();\n};\n\nATNConfigSet.prototype.setReadonly = function(readOnly) {\n\tthis.readOnly = readOnly;\n\tif (readOnly) {\n\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t}\n};\n\nATNConfigSet.prototype.toString = function() {\n\treturn Utils.arrayToString(this.configs) +\n\t\t(this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") +\n\t\t(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") +\n\t\t(this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") +\n\t\t(this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n};\n\nfunction OrderedATNConfigSet() {\n\tATNConfigSet.call(this);\n\tthis.configLookup = new Set();\n\treturn this;\n}\n\nOrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);\nOrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;\n\nexports.ATNConfigSet = ATNConfigSet;\nexports.OrderedATNConfigSet = OrderedATNConfigSet;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// A tree structure used to record the semantic context in which\n//  an ATN configuration is valid.  It's either a single predicate,\n//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n//\n//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n//  {@link SemanticContext} within the scope of this outer class.</p>\n//\n\nvar Set = require('./../Utils').Set;\nvar Hash = require('./../Utils').Hash;\n\nfunction SemanticContext() {\n\treturn this;\n}\n\nSemanticContext.prototype.hashCode = function() {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish();\n};\n\n// For context independent predicates, we evaluate them without a local\n// context (i.e., null context). That way, we can evaluate them without\n// having to create proper rule-specific context during prediction (as\n// opposed to the parser, which creates them naturally). In a practical\n// sense, this avoids a cast exception from RuleContext to myruleContext.\n//\n// <p>For context dependent predicates, we must pass in a local context so that\n// references such as $arg evaluate properly as _localctx.arg. We only\n// capture context dependent predicates in the context in which we begin\n// prediction, so we passed in the outer context here in case of context\n// dependent predicate evaluation.</p>\n//\nSemanticContext.prototype.evaluate = function(parser, outerContext) {\n};\n\n//\n// Evaluate the precedence predicates for the context and reduce the result.\n//\n// @param parser The parser instance.\n// @param outerContext The current parser context object.\n// @return The simplified semantic context after precedence predicates are\n// evaluated, which will be one of the following values.\n// <ul>\n// <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n// precedence predicates are evaluated.</li>\n// <li>{@code null}: if the predicate simplifies to {@code false} after\n// precedence predicates are evaluated.</li>\n// <li>{@code this}: if the semantic context is not changed as a result of\n// precedence predicate evaluation.</li>\n// <li>A non-{@code null} {@link SemanticContext}: the new simplified\n// semantic context after precedence predicates are evaluated.</li>\n// </ul>\n//\nSemanticContext.prototype.evalPrecedence = function(parser, outerContext) {\n\treturn this;\n};\n\nSemanticContext.andContext = function(a, b) {\n\tif (a === null || a === SemanticContext.NONE) {\n\t\treturn b;\n\t}\n\tif (b === null || b === SemanticContext.NONE) {\n\t\treturn a;\n\t}\n\tvar result = new AND(a, b);\n\tif (result.opnds.length === 1) {\n\t\treturn result.opnds[0];\n\t} else {\n\t\treturn result;\n\t}\n};\n\nSemanticContext.orContext = function(a, b) {\n\tif (a === null) {\n\t\treturn b;\n\t}\n\tif (b === null) {\n\t\treturn a;\n\t}\n\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\treturn SemanticContext.NONE;\n\t}\n\tvar result = new OR(a, b);\n\tif (result.opnds.length === 1) {\n\t\treturn result.opnds[0];\n\t} else {\n\t\treturn result;\n\t}\n};\n\nfunction Predicate(ruleIndex, predIndex, isCtxDependent) {\n\tSemanticContext.call(this);\n\tthis.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n\tthis.predIndex = predIndex === undefined ? -1 : predIndex;\n\tthis.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\treturn this;\n}\n\nPredicate.prototype = Object.create(SemanticContext.prototype);\nPredicate.prototype.constructor = Predicate;\n\n//The default {@link SemanticContext}, which is semantically equivalent to\n//a predicate of the form {@code {true}?}.\n//\nSemanticContext.NONE = new Predicate();\n\n\nPredicate.prototype.evaluate = function(parser, outerContext) {\n\tvar localctx = this.isCtxDependent ? outerContext : null;\n\treturn parser.sempred(localctx, this.ruleIndex, this.predIndex);\n};\n\nPredicate.prototype.updateHashCode = function(hash) {\n\thash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicate.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof Predicate)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.ruleIndex === other.ruleIndex &&\n\t\t\t\tthis.predIndex === other.predIndex &&\n\t\t\t\tthis.isCtxDependent === other.isCtxDependent;\n\t}\n};\n\nPredicate.prototype.toString = function() {\n\treturn \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n};\n\nfunction PrecedencePredicate(precedence) {\n\tSemanticContext.call(this);\n\tthis.precedence = precedence === undefined ? 0 : precedence;\n}\n\nPrecedencePredicate.prototype = Object.create(SemanticContext.prototype);\nPrecedencePredicate.prototype.constructor = PrecedencePredicate;\n\nPrecedencePredicate.prototype.evaluate = function(parser, outerContext) {\n\treturn parser.precpred(outerContext, this.precedence);\n};\n\nPrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {\n\tif (parser.precpred(outerContext, this.precedence)) {\n\t\treturn SemanticContext.NONE;\n\t} else {\n\t\treturn null;\n\t}\n};\n\nPrecedencePredicate.prototype.compareTo = function(other) {\n\treturn this.precedence - other.precedence;\n};\n\nPrecedencePredicate.prototype.updateHashCode = function(hash) {\n    hash.update(31);\n};\n\nPrecedencePredicate.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof PrecedencePredicate)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.precedence === other.precedence;\n\t}\n};\n\nPrecedencePredicate.prototype.toString = function() {\n\treturn \"{\"+this.precedence+\">=prec}?\";\n};\n\n\n\nPrecedencePredicate.filterPrecedencePredicates = function(set) {\n\tvar result = [];\n\tset.values().map( function(context) {\n\t\tif (context instanceof PrecedencePredicate) {\n\t\t\tresult.push(context);\n\t\t}\n\t});\n\treturn result;\n};\n\n\n// A semantic context which is true whenever none of the contained contexts\n// is false.\n//\nfunction AND(a, b) {\n\tSemanticContext.call(this);\n\tvar operands = new Set();\n\tif (a instanceof AND) {\n\t\ta.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(a);\n\t}\n\tif (b instanceof AND) {\n\t\tb.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(b);\n\t}\n\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\tif (precedencePredicates.length > 0) {\n\t\t// interested in the transition with the lowest precedence\n\t\tvar reduced = null;\n\t\tprecedencePredicates.map( function(p) {\n\t\t\tif(reduced===null || p.precedence<reduced.precedence) {\n\t\t\t\treduced = p;\n\t\t\t}\n\t\t});\n\t\toperands.add(reduced);\n\t}\n\tthis.opnds = operands.values();\n\treturn this;\n}\n\nAND.prototype = Object.create(SemanticContext.prototype);\nAND.prototype.constructor = AND;\n\nAND.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof AND)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.opnds === other.opnds;\n\t}\n};\n\nAND.prototype.updateHashCode = function(hash) {\n    hash.update(this.opnds, \"AND\");\n};\n//\n// {@inheritDoc}\n//\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\nAND.prototype.evaluate = function(parser, outerContext) {\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\nAND.prototype.evalPrecedence = function(parser, outerContext) {\n\tvar differs = false;\n\tvar operands = [];\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tvar context = this.opnds[i];\n\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\tdiffers |= (evaluated !== context);\n\t\tif (evaluated === null) {\n\t\t\t// The AND context is false if any element is false\n\t\t\treturn null;\n\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t// Reduce the result by skipping true elements\n\t\t\toperands.push(evaluated);\n\t\t}\n\t}\n\tif (!differs) {\n\t\treturn this;\n\t}\n\tif (operands.length === 0) {\n\t\t// all elements were true, so the AND context is true\n\t\treturn SemanticContext.NONE;\n\t}\n\tvar result = null;\n\toperands.map(function(o) {\n\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t});\n\treturn result;\n};\n\nAND.prototype.toString = function() {\n\tvar s = \"\";\n\tthis.opnds.map(function(o) {\n\t\ts += \"&& \" + o.toString();\n\t});\n\treturn s.length > 3 ? s.slice(3) : s;\n};\n\n//\n// A semantic context which is true whenever at least one of the contained\n// contexts is true.\n//\nfunction OR(a, b) {\n\tSemanticContext.call(this);\n\tvar operands = new Set();\n\tif (a instanceof OR) {\n\t\ta.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(a);\n\t}\n\tif (b instanceof OR) {\n\t\tb.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(b);\n\t}\n\n\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\tif (precedencePredicates.length > 0) {\n\t\t// interested in the transition with the highest precedence\n\t\tvar s = precedencePredicates.sort(function(a, b) {\n\t\t\treturn a.compareTo(b);\n\t\t});\n\t\tvar reduced = s[s.length-1];\n\t\toperands.add(reduced);\n\t}\n\tthis.opnds = operands.values();\n\treturn this;\n}\n\nOR.prototype = Object.create(SemanticContext.prototype);\nOR.prototype.constructor = OR;\n\nOR.prototype.constructor = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof OR)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.opnds === other.opnds;\n\t}\n};\n\nOR.prototype.updateHashCode = function(hash) {\n    hash.update(this.opnds, \"OR\");\n};\n\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\nOR.prototype.evaluate = function(parser, outerContext) {\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\nOR.prototype.evalPrecedence = function(parser, outerContext) {\n\tvar differs = false;\n\tvar operands = [];\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tvar context = this.opnds[i];\n\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\tdiffers |= (evaluated !== context);\n\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t// The OR context is true if any element is true\n\t\t\treturn SemanticContext.NONE;\n\t\t} else if (evaluated !== null) {\n\t\t\t// Reduce the result by skipping false elements\n\t\t\toperands.push(evaluated);\n\t\t}\n\t}\n\tif (!differs) {\n\t\treturn this;\n\t}\n\tif (operands.length === 0) {\n\t\t// all elements were false, so the OR context is false\n\t\treturn null;\n\t}\n\tvar result = null;\n\toperands.map(function(o) {\n\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t});\n\treturn result;\n};\n\nOR.prototype.toString = function() {\n\tvar s = \"\";\n\tthis.opnds.map(function(o) {\n\t\ts += \"|| \" + o.toString();\n\t});\n\treturn s.length > 3 ? s.slice(3) : s;\n};\n\nexports.SemanticContext = SemanticContext;\nexports.PrecedencePredicate = PrecedencePredicate;\nexports.Predicate = Predicate;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;\nvar Utils = require('./../Utils');\nvar Hash = Utils.Hash;\nvar Set = Utils.Set;\n\n// Map a predicate to a predicted alternative.///\n\nfunction PredPrediction(pred, alt) {\n\tthis.alt = alt;\n\tthis.pred = pred;\n\treturn this;\n}\n\nPredPrediction.prototype.toString = function() {\n\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n};\n\n// A DFA state represents a set of possible ATN configurations.\n// As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n// to keep track of all possible states the ATN can be in after\n// reading each input symbol. That is to say, after reading\n// input a1a2..an, the DFA is in a state that represents the\n// subset T of the states of the ATN that are reachable from the\n// ATN's start state along some path labeled a1a2..an.\"\n// In conventional NFA&rarr;DFA conversion, therefore, the subset T\n// would be a bitset representing the set of states the\n// ATN could be in. We need to track the alt predicted by each\n// state as well, however. More importantly, we need to maintain\n// a stack of states, tracking the closure operations as they\n// jump from rule to rule, emulating rule invocations (method calls).\n// I have to add a stack to simulate the proper lookahead sequences for\n// the underlying LL grammar from which the ATN was derived.\n//\n// <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n// is both a state (ala normal conversion) and a RuleContext describing\n// the chain of rules (if any) followed to arrive at that state.</p>\n//\n// <p>A DFA state may have multiple references to a particular state,\n// but with different ATN contexts (with same or different alts)\n// meaning that state was reached via a different set of rule invocations.</p>\n// /\n\nfunction DFAState(stateNumber, configs) {\n\tif (stateNumber === null) {\n\t\tstateNumber = -1;\n\t}\n\tif (configs === null) {\n\t\tconfigs = new ATNConfigSet();\n\t}\n\tthis.stateNumber = stateNumber;\n\tthis.configs = configs;\n\t// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t// {@link Token//EOF} maps to {@code edges[0]}.\n\tthis.edges = null;\n\tthis.isAcceptState = false;\n\t// if accept state, what ttype do we match or alt do we predict?\n\t// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link\n\t// //predicates}{@code !=null} or\n\t// {@link //requiresFullContext}.\n\tthis.prediction = 0;\n\tthis.lexerActionExecutor = null;\n\t// Indicates that this state was created during SLL prediction that\n\t// discovered a conflict between the configurations in the state. Future\n\t// {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t// full context prediction if this field is true.\n\tthis.requiresFullContext = false;\n\t// During SLL parsing, this is a list of predicates associated with the\n\t// ATN configurations of the DFA state. When we have predicates,\n\t// {@link //requiresFullContext} is {@code false} since full context\n\t// prediction evaluates predicates\n\t// on-the-fly. If this is not null, then {@link //prediction} is\n\t// {@link ATN//INVALID_ALT_NUMBER}.\n\t//\n\t// <p>We only use these for non-{@link //requiresFullContext} but\n\t// conflicting states. That\n\t// means we know from the context (it's $ or we don't dip into outer\n\t// context) that it's an ambiguity not a conflict.</p>\n\t//\n\t// <p>This list is computed by {@link\n\t// ParserATNSimulator//predicateDFAState}.</p>\n\tthis.predicates = null;\n\treturn this;\n}\n\n// Get the set of all alts mentioned by all ATN configurations in this\n// DFA state.\nDFAState.prototype.getAltSet = function() {\n\tvar alts = new Set();\n\tif (this.configs !== null) {\n\t\tfor (var i = 0; i < this.configs.length; i++) {\n\t\t\tvar c = this.configs[i];\n\t\t\talts.add(c.alt);\n\t\t}\n\t}\n\tif (alts.length === 0) {\n\t\treturn null;\n\t} else {\n\t\treturn alts;\n\t}\n};\n\n// Two {@link DFAState} instances are equal if their ATN configuration sets\n// are the same. This method is used to see if a state already exists.\n//\n// <p>Because the number of alternatives and number of ATN configurations are\n// finite, there is a finite number of DFA states that can be processed.\n// This is necessary to show that the algorithm terminates.</p>\n//\n// <p>Cannot test the DFA state numbers here because in\n// {@link ParserATNSimulator//addDFAState} we need to know if any other state\n// exists that has this exact set of ATN configurations. The\n// {@link //stateNumber} is irrelevant.</p>\nDFAState.prototype.equals = function(other) {\n\t// compare set of ATN configurations in this set with other\n\treturn this === other ||\n\t\t\t(other instanceof DFAState &&\n\t\t\t\tthis.configs.equals(other.configs));\n};\n\nDFAState.prototype.toString = function() {\n\tvar s = \"\" + this.stateNumber + \":\" + this.configs;\n\tif(this.isAcceptState) {\n        s = s + \"=>\";\n        if (this.predicates !== null)\n            s = s + this.predicates;\n        else\n            s = s + this.prediction;\n    }\n\treturn s;\n};\n\nDFAState.prototype.hashCode = function() {\n\tvar hash = new Hash();\n\thash.update(this.configs);\n    return hash.finish();\n};\n\nexports.DFAState = DFAState;\nexports.PredPrediction = PredPrediction;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.atn = require('./atn/index');\nexports.codepointat = require('./polyfills/codepointat');\nexports.dfa = require('./dfa/index');\nexports.fromcodepoint = require('./polyfills/fromcodepoint');\nexports.tree = require('./tree/index');\nexports.error = require('./error/index');\nexports.Token = require('./Token').Token;\nexports.CharStreams = require('./CharStreams').CharStreams;\nexports.CommonToken = require('./Token').CommonToken;\nexports.InputStream = require('./InputStream').InputStream;\nexports.FileStream = require('./FileStream').FileStream;\nexports.CommonTokenStream = require('./CommonTokenStream').CommonTokenStream;\nexports.Lexer = require('./Lexer').Lexer;\nexports.Parser = require('./Parser').Parser;\nvar pc = require('./PredictionContext');\nexports.PredictionContextCache = pc.PredictionContextCache;\nexports.ParserRuleContext = require('./ParserRuleContext').ParserRuleContext;\nexports.Interval = require('./IntervalSet').Interval;\nexports.Utils = require('./Utils');\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// A tuple: (ATN state, predicted alt, syntactic, semantic context).\n//  The syntactic context is a graph-structured stack node whose\n//  path(s) to the root is the rule invocation(s)\n//  chain used to arrive at the state.  The semantic context is\n//  the tree of semantic predicates encountered before reaching\n//  an ATN state.\n///\n\nvar DecisionState = require('./ATNState').DecisionState;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar Hash = require(\"../Utils\").Hash;\n\n\nfunction checkParams(params, isCfg) {\n\tif(params===null) {\n\t\tvar result = { state:null, alt:null, context:null, semanticContext:null };\n\t\tif(isCfg) {\n\t\t\tresult.reachesIntoOuterContext = 0;\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tvar props = {};\n\t\tprops.state = params.state || null;\n\t\tprops.alt = (params.alt === undefined) ? null : params.alt;\n\t\tprops.context = params.context || null;\n\t\tprops.semanticContext = params.semanticContext || null;\n\t\tif(isCfg) {\n\t\t\tprops.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t\t\tprops.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t\t}\n\t\treturn props;\n\t}\n}\n\nfunction ATNConfig(params, config) {\n\tthis.checkContext(params, config);\n\tparams = checkParams(params);\n\tconfig = checkParams(config, true);\n    // The ATN state associated with this configuration///\n    this.state = params.state!==null ? params.state : config.state;\n    // What alt (or lexer rule) is predicted by this configuration///\n    this.alt = params.alt!==null ? params.alt : config.alt;\n    // The stack of invoking states leading to the rule/states associated\n    //  with this config.  We track only those contexts pushed during\n    //  execution of the ATN simulator.\n    this.context = params.context!==null ? params.context : config.context;\n    this.semanticContext = params.semanticContext!==null ? params.semanticContext :\n        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);\n    // We cannot execute predicates dependent upon local context unless\n    // we know for sure we are in the correct context. Because there is\n    // no way to do this efficiently, we simply cannot evaluate\n    // dependent predicates unless we are in the rule that initially\n    // invokes the ATN simulator.\n    //\n    // closure() tracks the depth of how far we dip into the\n    // outer context: depth &gt; 0.  Note that it may not be totally\n    // accurate depth since I don't ever decrement. TODO: make it a boolean then\n    this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    return this;\n}\n\nATNConfig.prototype.checkContext = function(params, config) {\n\tif((params.context===null || params.context===undefined) &&\n\t\t\t(config===null || config.context===null || config.context===undefined)) {\n\t\tthis.context = null;\n\t}\n};\n\n\nATNConfig.prototype.hashCode = function() {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish();\n};\n\n\nATNConfig.prototype.updateHashCode = function(hash) {\n    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n};\n\n// An ATN configuration is equal to another if both have\n//  the same state, they predict the same alternative, and\n//  syntactic/semantic contexts are the same.\n\nATNConfig.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof ATNConfig)) {\n        return false;\n    } else {\n        return this.state.stateNumber===other.state.stateNumber &&\n            this.alt===other.alt &&\n            (this.context===null ? other.context===null : this.context.equals(other.context)) &&\n            this.semanticContext.equals(other.semanticContext) &&\n            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;\n    }\n};\n\n\nATNConfig.prototype.hashCodeForConfigSet = function() {\n    var hash = new Hash();\n    hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n    return hash.finish();\n};\n\n\nATNConfig.prototype.equalsForConfigSet = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof ATNConfig)) {\n        return false;\n    } else {\n        return this.state.stateNumber===other.state.stateNumber &&\n            this.alt===other.alt &&\n            this.semanticContext.equals(other.semanticContext);\n    }\n};\n\n\nATNConfig.prototype.toString = function() {\n    return \"(\" + this.state + \",\" + this.alt +\n        (this.context!==null ? \",[\" + this.context.toString() + \"]\" : \"\") +\n        (this.semanticContext !== SemanticContext.NONE ?\n                (\",\" + this.semanticContext.toString())\n                : \"\") +\n        (this.reachesIntoOuterContext>0 ?\n                (\",up=\" + this.reachesIntoOuterContext)\n                : \"\") + \")\";\n};\n\n\nfunction LexerATNConfig(params, config) {\n\tATNConfig.call(this, params, config);\n\n    // This is the backing field for {@link //getLexerActionExecutor}.\n\tvar lexerActionExecutor = params.lexerActionExecutor || null;\n    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);\n    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;\n    return this;\n}\n\nLexerATNConfig.prototype = Object.create(ATNConfig.prototype);\nLexerATNConfig.prototype.constructor = LexerATNConfig;\n\nLexerATNConfig.prototype.updateHashCode = function(hash) {\n    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n};\n\nLexerATNConfig.prototype.equals = function(other) {\n    return this === other ||\n            (other instanceof LexerATNConfig &&\n            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&\n            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&\n            ATNConfig.prototype.equals.call(this, other));\n};\n\nLexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n\nLexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;\n\n\nLexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {\n    return source.passedThroughNonGreedyDecision ||\n        (target instanceof DecisionState) && target.nonGreedy;\n};\n\nexports.ATNConfig = ATNConfig;\nexports.LexerATNConfig = LexerATNConfig;","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n//  A rule context is a record of a single rule invocation. It knows\n//  which context invoked it, if any. If there is no parent context, then\n//  naturally the invoking state is not valid.  The parent link\n//  provides a chain upwards from the current rule invocation to the root\n//  of the invocation tree, forming a stack. We actually carry no\n//  information about the rule associated with this context (except\n//  when parsing). We keep only the state number of the invoking state from\n//  the ATN submachine that invoked this. Contrast this with the s\n//  pointer inside ParserRuleContext that tracks the current state\n//  being \"executed\" for the current rule.\n//\n//  The parent contexts are useful for computing lookahead sets and\n//  getting error information.\n//\n//  These objects are used during parsing and prediction.\n//  For the special case of parsers, we use the subclass\n//  ParserRuleContext.\n//\n//  @see ParserRuleContext\n///\n\nvar RuleNode = require('./tree/Tree').RuleNode;\nvar INVALID_INTERVAL = require('./tree/Tree').INVALID_INTERVAL;\nvar INVALID_ALT_NUMBER = require('./atn/ATN').INVALID_ALT_NUMBER;\n\nfunction RuleContext(parent, invokingState) {\n\tRuleNode.call(this);\n\t// What context invoked this rule?\n\tthis.parentCtx = parent || null;\n\t// What state invoked the rule associated with this context?\n\t// The \"return address\" is the followState of invokingState\n\t// If parent is null, this should be -1.\n\tthis.invokingState = invokingState || -1;\n\treturn this;\n}\n\nRuleContext.prototype = Object.create(RuleNode.prototype);\nRuleContext.prototype.constructor = RuleContext;\n\nRuleContext.prototype.depth = function() {\n\tvar n = 0;\n\tvar p = this;\n\twhile (p !== null) {\n\t\tp = p.parentCtx;\n\t\tn += 1;\n\t}\n\treturn n;\n};\n\n// A context is empty if there is no invoking state; meaning nobody call\n// current context.\nRuleContext.prototype.isEmpty = function() {\n\treturn this.invokingState === -1;\n};\n\n// satisfy the ParseTree / SyntaxTree interface\n\nRuleContext.prototype.getSourceInterval = function() {\n\treturn INVALID_INTERVAL;\n};\n\nRuleContext.prototype.getRuleContext = function() {\n\treturn this;\n};\n\nRuleContext.prototype.getPayload = function() {\n\treturn this;\n};\n\n// Return the combined text of all child nodes. This method only considers\n// tokens which have been added to the parse tree.\n// <p>\n// Since tokens on hidden channels (e.g. whitespace or comments) are not\n// added to the parse trees, they will not appear in the output of this\n// method.\n// /\nRuleContext.prototype.getText = function() {\n\tif (this.getChildCount() === 0) {\n\t\treturn \"\";\n\t} else {\n\t\treturn this.children.map(function(child) {\n\t\t\treturn child.getText();\n\t\t}).join(\"\");\n\t}\n};\n\n// For rule associated with this parse tree internal node, return\n// the outer alternative number used to match the input. Default\n// implementation does not compute nor store this alt num. Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\n// to set it.\nRuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }\n\n// Set the outer alternative number for this context node. Default\n// implementation does nothing to avoid backing field overhead for\n// trees that don't need it.  Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\nRuleContext.prototype.setAltNumber = function(altNumber) { }\n\nRuleContext.prototype.getChild = function(i) {\n\treturn null;\n};\n\nRuleContext.prototype.getChildCount = function() {\n\treturn 0;\n};\n\nRuleContext.prototype.accept = function(visitor) {\n\treturn visitor.visitChildren(this);\n};\n\n//need to manage circular dependencies, so export now\nexports.RuleContext = RuleContext;\nvar Trees = require('./tree/Trees').Trees;\n\n\n// Print out a whole tree, not just a node, in LISP format\n// (root child1 .. childN). Print just a node if this is a leaf.\n//\n\nRuleContext.prototype.toStringTree = function(ruleNames, recog) {\n\treturn Trees.toStringTree(this, ruleNames, recog);\n};\n\nRuleContext.prototype.toString = function(ruleNames, stop) {\n\truleNames = ruleNames || null;\n\tstop = stop || null;\n\tvar p = this;\n\tvar s = \"[\";\n\twhile (p !== null && p !== stop) {\n\t\tif (ruleNames === null) {\n\t\t\tif (!p.isEmpty()) {\n\t\t\t\ts += p.invokingState;\n\t\t\t}\n\t\t} else {\n\t\t\tvar ri = p.ruleIndex;\n\t\t\tvar ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]\n\t\t\t\t\t: \"\" + ri;\n\t\t\ts += ruleName;\n\t\t}\n\t\tif (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n\t\t\ts += \" \";\n\t\t}\n\t\tp = p.parentCtx;\n\t}\n\ts += \"]\";\n\treturn s;\n};\n\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// A lexer is recognizer that draws input symbols from a character stream.\n//  lexer grammars result in a subclass of this object. A Lexer object\n//  uses simplified match() and error recovery mechanisms in the interest of speed.\n\nvar Token = require('./Token').Token;\nvar Recognizer = require('./Recognizer').Recognizer;\nvar CommonTokenFactory = require('./CommonTokenFactory').CommonTokenFactory;\nvar RecognitionException  = require('./error/Errors').RecognitionException;\nvar LexerNoViableAltException = require('./error/Errors').LexerNoViableAltException;\n\nfunction TokenSource() {\n\treturn this;\n}\n\nfunction Lexer(input) {\n\tRecognizer.call(this);\n\tthis._input = input;\n\tthis._factory = CommonTokenFactory.DEFAULT;\n\tthis._tokenFactorySourcePair = [ this, input ];\n\n\tthis._interp = null; // child classes must populate this\n\n\t// The goal of all lexer rules/methods is to create a token object.\n\t// this is an instance variable as multiple rules may collaborate to\n\t// create a single token. nextToken will return this object after\n\t// matching lexer rule(s). If you subclass to allow multiple token\n\t// emissions, then set this to the last token to be matched or\n\t// something nonnull so that the auto token emit mechanism will not\n\t// emit another token.\n\tthis._token = null;\n\n\t// What character index in the stream did the current token start at?\n\t// Needed, for example, to get the text for current token. Set at\n\t// the start of nextToken.\n\tthis._tokenStartCharIndex = -1;\n\n\t// The line on which the first character of the token resides///\n\tthis._tokenStartLine = -1;\n\n\t// The character position of first character within the line///\n\tthis._tokenStartColumn = -1;\n\n\t// Once we see EOF on char stream, next token will be EOF.\n\t// If you have DONE : EOF ; then you see DONE EOF.\n\tthis._hitEOF = false;\n\n\t// The channel number for the current token///\n\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t// The token type for the current token///\n\tthis._type = Token.INVALID_TYPE;\n\n\tthis._modeStack = [];\n\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t// You can set the text for the current token to override what is in\n\t// the input char buffer. Use setText() or can set this instance var.\n\t// /\n\tthis._text = null;\n\n\treturn this;\n}\n\nLexer.prototype = Object.create(Recognizer.prototype);\nLexer.prototype.constructor = Lexer;\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\nLexer.prototype.reset = function() {\n\t// wack Lexer state variables\n\tif (this._input !== null) {\n\t\tthis._input.seek(0); // rewind the input\n\t}\n\tthis._token = null;\n\tthis._type = Token.INVALID_TYPE;\n\tthis._channel = Token.DEFAULT_CHANNEL;\n\tthis._tokenStartCharIndex = -1;\n\tthis._tokenStartColumn = -1;\n\tthis._tokenStartLine = -1;\n\tthis._text = null;\n\n\tthis._hitEOF = false;\n\tthis._mode = Lexer.DEFAULT_MODE;\n\tthis._modeStack = [];\n\n\tthis._interp.reset();\n};\n\n// Return a token from this source; i.e., match a token on the char stream.\nLexer.prototype.nextToken = function() {\n\tif (this._input === null) {\n\t\tthrow \"nextToken requires a non-null input stream.\";\n\t}\n\n\t// Mark start location in char stream so unbuffered streams are\n\t// guaranteed at least have text of current token\n\tvar tokenStartMarker = this._input.mark();\n\ttry {\n\t\twhile (true) {\n\t\t\tif (this._hitEOF) {\n\t\t\t\tthis.emitEOF();\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t\tthis._token = null;\n\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\tthis._text = null;\n\t\t\tvar continueOuter = false;\n\t\t\twhile (true) {\n\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\tvar ttype = Lexer.SKIP;\n\t\t\t\ttry {\n\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t} catch (e) {\n\t\t\t\t    if(e instanceof RecognitionException) {\n                        this.notifyListeners(e); // report error\n                        this.recover(e);\n                    } else {\n                        console.log(e.stack);\n                        throw e;\n                    }\n\t\t\t\t}\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t}\n\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\tthis._type = ttype;\n\t\t\t\t}\n\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (continueOuter) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this._token === null) {\n\t\t\t\tthis.emit();\n\t\t\t}\n\t\t\treturn this._token;\n\t\t}\n\t} finally {\n\t\t// make sure we release marker after match or\n\t\t// unbuffered char stream will keep buffering\n\t\tthis._input.release(tokenStartMarker);\n\t}\n};\n\n// Instruct the lexer to skip creating a token for current lexer rule\n// and look for another token. nextToken() knows to keep looking when\n// a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n// if token==null at end of any token rule, it creates one for you\n// and emits it.\n// /\nLexer.prototype.skip = function() {\n\tthis._type = Lexer.SKIP;\n};\n\nLexer.prototype.more = function() {\n\tthis._type = Lexer.MORE;\n};\n\nLexer.prototype.mode = function(m) {\n\tthis._mode = m;\n};\n\nLexer.prototype.pushMode = function(m) {\n\tif (this._interp.debug) {\n\t\tconsole.log(\"pushMode \" + m);\n\t}\n\tthis._modeStack.push(this._mode);\n\tthis.mode(m);\n};\n\nLexer.prototype.popMode = function() {\n\tif (this._modeStack.length === 0) {\n\t\tthrow \"Empty Stack\";\n\t}\n\tif (this._interp.debug) {\n\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t}\n\tthis.mode(this._modeStack.pop());\n\treturn this._mode;\n};\n\n// Set the char stream and reset the lexer\nObject.defineProperty(Lexer.prototype, \"inputStream\", {\n\tget : function() {\n\t\treturn this._input;\n\t},\n\tset : function(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"sourceName\", {\n\tget : function sourceName() {\n\t\treturn this._input.sourceName;\n\t}\n});\n\n// By default does not support multiple emits per nextToken invocation\n// for efficiency reasons. Subclass and override this method, nextToken,\n// and getToken (to push tokens into a list and pull from that list\n// rather than a single variable as this implementation does).\n// /\nLexer.prototype.emitToken = function(token) {\n\tthis._token = token;\n};\n\n// The standard method called to automatically emit a token at the\n// outermost lexical rule. The token object should point into the\n// char buffer start..stop. If there is a text override in 'text',\n// use that to set the token's text. Override this method to emit\n// custom Token objects or provide a new factory.\n// /\nLexer.prototype.emit = function() {\n\tvar t = this._factory.create(this._tokenFactorySourcePair, this._type,\n\t\t\tthis._text, this._channel, this._tokenStartCharIndex, this\n\t\t\t\t\t.getCharIndex() - 1, this._tokenStartLine,\n\t\t\tthis._tokenStartColumn);\n\tthis.emitToken(t);\n\treturn t;\n};\n\nLexer.prototype.emitEOF = function() {\n\tvar cpos = this.column;\n\tvar lpos = this.line;\n\tvar eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,\n\t\t\tnull, Token.DEFAULT_CHANNEL, this._input.index,\n\t\t\tthis._input.index - 1, lpos, cpos);\n\tthis.emitToken(eof);\n\treturn eof;\n};\n\nObject.defineProperty(Lexer.prototype, \"type\", {\n\tget : function() {\n\t\treturn this.type;\n\t},\n\tset : function(type) {\n\t\tthis._type = type;\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"line\", {\n\tget : function() {\n\t\treturn this._interp.line;\n\t},\n\tset : function(line) {\n\t\tthis._interp.line = line;\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"column\", {\n\tget : function() {\n\t\treturn this._interp.column;\n\t},\n\tset : function(column) {\n\t\tthis._interp.column = column;\n\t}\n});\n\n\n// What is the index of the current character of lookahead?///\nLexer.prototype.getCharIndex = function() {\n\treturn this._input.index;\n};\n\n// Return the text matched so far for the current token or any text override.\n//Set the complete text of this token; it wipes any previous changes to the text.\nObject.defineProperty(Lexer.prototype, \"text\", {\n\tget : function() {\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t},\n\tset : function(text) {\n\t\tthis._text = text;\n\t}\n});\n// Return a list of all Token objects in input char stream.\n// Forces load of all tokens. Does not include EOF token.\n// /\nLexer.prototype.getAllTokens = function() {\n\tvar tokens = [];\n\tvar t = this.nextToken();\n\twhile (t.type !== Token.EOF) {\n\t\ttokens.push(t);\n\t\tt = this.nextToken();\n\t}\n\treturn tokens;\n};\n\nLexer.prototype.notifyListeners = function(e) {\n\tvar start = this._tokenStartCharIndex;\n\tvar stop = this._input.index;\n\tvar text = this._input.getText(start, stop);\n\tvar msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\tvar listener = this.getErrorListenerDispatch();\n\tlistener.syntaxError(this, null, this._tokenStartLine,\n\t\t\tthis._tokenStartColumn, msg, e);\n};\n\nLexer.prototype.getErrorDisplay = function(s) {\n\tvar d = [];\n\tfor (var i = 0; i < s.length; i++) {\n\t\td.push(s[i]);\n\t}\n\treturn d.join('');\n};\n\nLexer.prototype.getErrorDisplayForChar = function(c) {\n\tif (c.charCodeAt(0) === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else if (c === '\\n') {\n\t\treturn \"\\\\n\";\n\t} else if (c === '\\t') {\n\t\treturn \"\\\\t\";\n\t} else if (c === '\\r') {\n\t\treturn \"\\\\r\";\n\t} else {\n\t\treturn c;\n\t}\n};\n\nLexer.prototype.getCharErrorDisplay = function(c) {\n\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n};\n\n// Lexers can normally match any char in it's vocabulary after matching\n// a token, so do the easy thing and just kill a character and hope\n// it all works out. You can instead use the rule invocation stack\n// to do sophisticated error recovery if you are in a fragment rule.\n// /\nLexer.prototype.recover = function(re) {\n\tif (this._input.LA(1) !== Token.EOF) {\n\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t// skip a char and try again\n\t\t\tthis._interp.consume(this._input);\n\t\t} else {\n\t\t\t// TODO: Do we lose character or line position information?\n\t\t\tthis._input.consume();\n\t\t}\n\t}\n};\n\nexports.Lexer = Lexer;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// Provides an empty default implementation of {@link ANTLRErrorListener}. The\n// default implementation of each method does nothing, but can be overridden as\n// necessary.\n\nfunction ErrorListener() {\n\treturn this;\n}\n\nErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n};\n\nErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n};\n\nErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n};\n\nErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n};\n\nfunction ConsoleErrorListener() {\n\tErrorListener.call(this);\n\treturn this;\n}\n\nConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);\nConsoleErrorListener.prototype.constructor = ConsoleErrorListener;\n\n//\n// Provides a default instance of {@link ConsoleErrorListener}.\n//\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\n//\n// {@inheritDoc}\n//\n// <p>\n// This implementation prints messages to {@link System//err} containing the\n// values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n// the following format.</p>\n//\n// <pre>\n// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n// </pre>\n//\nConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n    console.error(\"line \" + line + \":\" + column + \" \" + msg);\n};\n\nfunction ProxyErrorListener(delegates) {\n\tErrorListener.call(this);\n    if (delegates===null) {\n        throw \"delegates\";\n    }\n    this.delegates = delegates;\n\treturn this;\n}\n\nProxyErrorListener.prototype = Object.create(ErrorListener.prototype);\nProxyErrorListener.prototype.constructor = ProxyErrorListener;\n\nProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });\n};\n\nProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });\n};\n\nProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\tthis.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });\n};\n\nProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\tthis.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });\n};\n\nexports.ErrorListener = ErrorListener;\nexports.ConsoleErrorListener = ConsoleErrorListener;\nexports.ProxyErrorListener = ProxyErrorListener;\n\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// A DFA walker that knows how to dump them to serialized strings.#/\n\n\nfunction DFASerializer(dfa, literalNames, symbolicNames) {\n\tthis.dfa = dfa;\n\tthis.literalNames = literalNames || [];\n\tthis.symbolicNames = symbolicNames || [];\n\treturn this;\n}\n\nDFASerializer.prototype.toString = function() {\n   if(this.dfa.s0 === null) {\n       return null;\n   }\n   var buf = \"\";\n   var states = this.dfa.sortedStates();\n   for(var i=0;i<states.length;i++) {\n       var s = states[i];\n       if(s.edges!==null) {\n            var n = s.edges.length;\n            for(var j=0;j<n;j++) {\n                var t = s.edges[j] || null;\n                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {\n                    buf = buf.concat(this.getStateString(s));\n                    buf = buf.concat(\"-\");\n                    buf = buf.concat(this.getEdgeLabel(j));\n                    buf = buf.concat(\"->\");\n                    buf = buf.concat(this.getStateString(t));\n                    buf = buf.concat('\\n');\n                }\n            }\n       }\n   }\n   return buf.length===0 ? null : buf;\n};\n\nDFASerializer.prototype.getEdgeLabel = function(i) {\n    if (i===0) {\n        return \"EOF\";\n    } else if(this.literalNames !==null || this.symbolicNames!==null) {\n        return this.literalNames[i-1] || this.symbolicNames[i-1];\n    } else {\n        return String.fromCharCode(i-1);\n    }\n};\n\nDFASerializer.prototype.getStateString = function(s) {\n    var baseStateStr = ( s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + ( s.requiresFullContext ? \"^\" : \"\");\n    if(s.isAcceptState) {\n        if (s.predicates !== null) {\n            return baseStateStr + \"=>\" + s.predicates.toString();\n        } else {\n            return baseStateStr + \"=>\" + s.prediction.toString();\n        }\n    } else {\n        return baseStateStr;\n    }\n};\n\nfunction LexerDFASerializer(dfa) {\n\tDFASerializer.call(this, dfa, null);\n\treturn this;\n}\n\nLexerDFASerializer.prototype = Object.create(DFASerializer.prototype);\nLexerDFASerializer.prototype.constructor = LexerDFASerializer;\n\nLexerDFASerializer.prototype.getEdgeLabel = function(i) {\n\treturn \"'\" + String.fromCharCode(i) + \"'\";\n};\n\nexports.DFASerializer = DFASerializer;\nexports.LexerDFASerializer = LexerDFASerializer;\n\n","import { functionDictionary,FunctionDef } from \"./functions\";\r\n\r\nexport const NodeType = {\r\n    _Constant:0,\r\n    _Function:1,\r\n    _Variable:2,\r\n    _Ternary:3,\r\n    _Division:4,\r\n    _Multiplication:5,\r\n    _Negation:6,\r\n    _Subtraction:7,\r\n\t_Addition:8,\r\n\t_Inverse:9\r\n};\r\nfunction simplifyMultiplication(node:Multiplication|Division):Expression{\r\n\tlet stack:Expression[] = [];\r\n\tstack.push(node);\r\n\tlet operands:Expression[] = []\r\n\tlet constants:Constant[] = [];\r\n\twhile(stack.length!=0){\r\n\t\tlet current = stack.pop();\r\n\t\tif(current instanceof Multiplication){\r\n\t\t\tstack.push(current.right.simplify());\r\n\t\t\tstack.push(current.left.simplify());\r\n\t\t}else if(current instanceof Division){\r\n\t\t\tstack.push(new Inverse(current.right).simplify());\r\n\t\t\tstack.push(current.left.simplify());\r\n\t\t}else if (current instanceof Constant){\r\n\t\t\tconstants.push(current);\r\n\t\t}else{\r\n\t\t\toperands.push(current);\r\n\t\t}\r\n\t}\r\n\tlet root:Expression;\r\n\tif(constants.length>0){\r\n\t\tlet result = new Constant(1.);\r\n\t\tconstants.forEach((node)=>{\r\n\t\t\tresult.value*=node.value;\r\n\t\t});\r\n\t\troot = result;\r\n\t\tif (result.value==1.0)\r\n\t\t{\r\n\t\t\tif (operands.length > 0)\r\n\t\t\t{\r\n\t\t\t\troot = operands.pop();\r\n\t\t\t}\r\n\t\t}else if(result.value==0.0){\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}else{\r\n\t\troot = operands.pop();\r\n\t}\r\n\tif(root instanceof Inverse){\r\n\t\troot = new Division(new Constant(1.0),root.inner);\r\n\t}\r\n\toperands.forEach((operand)=>{\r\n\t\tif(operand instanceof Inverse){\r\n\t\t\troot = new Division(root,operand.inner);\r\n\t\t}else{\r\n\t\t\troot = new Multiplication(root,operand);\r\n\t\t}\r\n\t});\r\n\treturn root;\r\n}\r\n\r\nfunction simplifyAddition(node:Addition|Subtraction):Expression{\r\n\tlet stack:Expression[] = [];\r\n\tstack.push(node);\r\n\tlet operands:Expression[] = []\r\n\tlet constants:Constant[] = [];\r\n\twhile(stack.length!=0){\r\n\t\tlet current = stack.pop();\r\n\t\tif(current instanceof Addition){\r\n\t\t\tstack.push(current.right.simplify());\r\n\t\t\tstack.push(current.left.simplify());\r\n\t\t}else if(current instanceof Subtraction){\r\n\t\t\tstack.push(new Negation(current.right).simplify());\r\n\t\t\tstack.push(current.left.simplify());\r\n\t\t}else if (current instanceof Constant){\r\n\t\t\tconstants.push(current);\r\n\t\t}else{\r\n\t\t\toperands.push(current);\r\n\t\t}\r\n\t}\r\n\tlet root:Expression;\r\n\tif(constants.length>0){\r\n\t\tlet result = new Constant(0.);\r\n\t\tconstants.forEach((node)=>{\r\n\t\t\tresult.value+=node.value;\r\n\t\t});\r\n\t\troot = result;\r\n\t\tif (result.value==0.0)\r\n\t\t{\r\n\t\t\tif (operands.length > 0)\r\n\t\t\t{\r\n\t\t\t\troot = operands.pop();\r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\troot = operands.pop();\r\n\t}\r\n\toperands.forEach((operand)=>{\r\n\t\tif(operand instanceof Negation){\r\n\t\t\troot = new Subtraction(root,operand.inner);\r\n\t\t}else{\r\n\t\t\troot = new Addition(root,operand);\r\n\t\t}\r\n\t});\r\n\treturn root;\r\n}\r\n\r\nexport abstract class Expression{\r\n    type:number;\r\n    constructor(type:number){\r\n        this.type = type;\r\n    }\r\n    abstract clone():Expression;\r\n\tabstract differentiate(variable:string,epsilon:number):Expression;\r\n    abstract $eval(variables:Record<string,number>|number[]):number;\r\n\tabstract simplify():Expression;\r\n\tabstract print():string;\r\n\tabstract printLatex():string;\r\n}\r\nexport class Constant extends Expression{\r\n    value:number;\r\n    constructor(value:number){\r\n        super(NodeType._Constant);\r\n        this.value = value;\r\n    }\r\n    clone():Expression{\r\n        return new Constant(this.value);\r\n    }\r\n\tdifferentiate(variable:string, epsilon:number):Expression{\r\n\t\treturn new Constant(0.0);\r\n\t}\r\n    $eval(variables:Record<string,number>|number[]):number{\r\n        return this.value;\r\n    }\r\n    simplify():Expression{\r\n        return this.clone();\r\n\t}\r\n\tprint():string{\r\n\t\treturn this.value.toString();\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn this.value.toString();\r\n\t}\r\n}\r\nclass Inverse extends Expression{\r\n\tinner:Expression;\r\n\tconstructor(inner:Expression){\r\n\t\tsuper(NodeType._Inverse);\r\n\t\tthis.inner = inner;\r\n\t}\r\n    clone(){\r\n        return new Inverse(this.inner.clone());\r\n    }\r\n\tdifferentiate(variable:string, epsilon:number){\r\n\t\treturn new Division(this.inner.differentiate(variable,epsilon),new Multiplication(this.inner.clone(),this.inner.clone()));\r\n\t}\r\n    $eval(variables:Record<string,number>|number[]):number{\r\n        return 1./this.inner.$eval(variables);\r\n    }\r\n\tsimplify(){\r\n\t\tlet node = this.inner.simplify();\r\n\t\tif(node instanceof Constant)\r\n\t\t\treturn new Constant(1/node.value);\r\n\t\tif(node instanceof Division){\r\n\t\t\treturn new Division(node.right,node.left);\r\n\t\t}\r\n\t\treturn new Inverse(node);\r\n\t}\r\n\tprint():string{\r\n\t\tlet arg = this.inner.print();\r\n\t\treturn \"1/\"+(this.inner.type>=this.type?\"(\"+arg+\")\":arg);\r\n\t\r\n\t}\r\n\tprintLatex():string{\r\n\t\tlet arg = this.inner.printLatex();\r\n\t\treturn \"\\\\frac{1/\"+(this.inner.type>=this.type?\"(\"+arg+\")\":arg)+\"}\";\r\n\t}\r\n}\r\nexport class Negation extends Expression{\r\n    inner:Expression;\r\n    constructor(inner:Expression){\r\n        super(NodeType._Negation);\r\n        this.inner = inner;\r\n    }\r\n    clone(){\r\n        return new Negation(this.inner.clone());\r\n    }\r\n\tdifferentiate(variable:string, epsilon:number){\r\n\t\treturn new Negation(this.inner.differentiate(variable,epsilon));\r\n\t}\r\n    $eval(variables:Record<string,number>|number[]):number{\r\n        return -this.inner.$eval(variables);\r\n    }\r\n\tsimplify(){\r\n\t\tlet node = this.inner.simplify();\r\n\t\tif(node instanceof Constant)\r\n\t\t\treturn new Constant(-node.value);\r\n\t\tif(node instanceof Negation){\r\n\t\t\treturn node.inner;\r\n\t\t}\r\n\t\treturn new Negation(node);\r\n\t}\r\n\tprint():string{\r\n\t\tlet arg = this.inner.print();\r\n\t\treturn \"-\"+(this.inner.type>=this.type?\"(\"+arg+\")\":arg);\r\n\t}\r\n\tprintLatex():string{\r\n\t\tlet arg = this.inner.printLatex();\r\n\t\treturn \"-\"+(this.inner.type>=this.type?\"(\"+arg+\")\":arg);\r\n\t}\r\n}\r\nabstract class BinaryOp extends Expression{\r\n    left:Expression;\r\n    right:Expression;\r\n    constructor(type:number,left:Expression,right:Expression){\r\n        super(type);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\nexport class Multiplication extends BinaryOp{\r\n    constructor(left:Expression,right:Expression){\r\n        super(NodeType._Multiplication,left,right)\r\n    }\r\n    clone(){\r\n        return new Multiplication(this.left.clone(),this.right.clone());\r\n    }\r\n\tdifferentiate(variable:string, epsilon:number){\r\n\t\treturn new Addition(\r\n\t\t\t\tnew Multiplication(\r\n\t\t\t\t\tthis.left.differentiate(variable, epsilon),\r\n\t\t\t\t\tthis.right.clone()\r\n\t\t\t\t),\r\n\t\t\t\tnew Multiplication(\r\n\t\t\t\t\tthis.left.clone(),\r\n\t\t\t\t\tthis.right.differentiate(variable, epsilon)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n    $eval(variables:Record<string,number>|number[]):number{\r\n        return this.left.$eval(variables)*this.right.$eval(variables);\r\n    }\r\n\tsimplify(){\r\n\t\treturn simplifyMultiplication(this);\r\n\t\t/*let l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant){\r\n\t\t\tif(r instanceof Constant){\r\n\t\t\t\treturn new Constant(l.value * r.value);\r\n\t\t\t}\r\n\t\t\tif(Math.abs(l.value)==0.0)\r\n\t\t\t\treturn l;\r\n\t\t\tif(l.value == 1)\r\n\t\t\t\treturn r;\r\n\t\t\tif(l.value == -1)\r\n\t\t\t\treturn new Negation(r);\r\n\t\t}else if(r instanceof Constant){\r\n\t\t\tif(Math.abs(r.value)==0.0)\r\n\t\t\t\treturn r;\r\n\t\t\tif(r.value == 1)\r\n\t\t\t\treturn l;\r\n\t\t\tif(r.value == -1)\r\n\t\t\t\treturn new Negation(l);\r\n\t\t}\r\n\t\treturn new Multiplication(l,r);*/\r\n\t}\r\n\tprint():string{\r\n\t\tlet l = this.left.print();\r\n\t\tlet r = this.right.print();\r\n\t\treturn (this.left.type>this.type?\"(\"+l+\")\":l)+\"*\"+(this.right.type>this.type?\"(\"+r+\")\":r);\r\n\t}\r\n\tprintLatex():string{\r\n\t\tlet l = this.left.printLatex();\r\n\t\tlet r = this.right.printLatex();\r\n\t\treturn (this.left.type>this.type?\"(\"+l+\")\":l)+\" \\\\cdot \"+(this.right.type>this.type?\"(\"+r+\")\":r);\r\n\t}\r\n}\r\nexport class Addition extends BinaryOp{\r\n    constructor(left:Expression,right:Expression){\r\n        super(NodeType._Addition, left, right)\r\n    }\r\n    clone(){\r\n        return new Addition(this.left.clone(),this.right.clone());\r\n    }\r\n\tdifferentiate(variable:string, epsilon:number){\r\n\t\treturn new Addition(\r\n\t\t\tthis.left.differentiate(variable,epsilon),\r\n\t\t\tthis.right.differentiate(variable,epsilon)\r\n\t\t\t);\r\n\t}\r\n    $eval(variables:Record<string,number>|number[]):number{\r\n        return this.left.$eval(variables)+this.right.$eval(variables);\r\n    }\r\n\tsimplify(){\r\n\t\treturn simplifyAddition(this);\r\n/*\r\n\t\tlet l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant){\r\n\t\t\tif(r instanceof Constant){\r\n\t\t\t\treturn new Constant(l.value + r.value);\r\n\t\t\t}\r\n\t\t\tif(Math.abs(l.value)==0)\r\n\t\t\t\treturn r;\r\n\t\t}else if(r instanceof Constant){\r\n\t\t\tif(Math.abs(r.value)==0.0)\r\n\t\t\t\treturn l;\r\n\t\t}\r\n\t\treturn new Addition(l,r);*/\r\n\t}\r\n\tprint():string{\r\n\t\tlet l = this.left.print();\r\n\t\tlet r = this.right.print();\r\n\t\treturn (this.left.type>this.type?\"(\"+l+\")\":l)+\"+\"+(this.right.type>this.type?\"(\"+r+\")\":r);\r\n\t}\r\n\tprintLatex():string{\r\n\t\tlet l = this.left.printLatex();\r\n\t\tlet r = this.right.printLatex();\r\n\t\treturn (this.left.type>this.type?\"(\"+l+\")\":l)+\"+\"+(this.right.type>this.type?\"(\"+r+\")\":r);\r\n\t}\r\n}\r\nexport class Subtraction extends BinaryOp{\r\n    constructor(left:Expression,right:Expression){\r\n        super(NodeType._Subtraction, left, right)\r\n    }\r\n    clone(){\r\n        return new Subtraction(this.left.clone(),this.right.clone());\r\n    }\r\n\tdifferentiate(variable:string, epsilon:number){\r\n\t\treturn new Subtraction(\r\n\t\t\tthis.left.differentiate(variable,epsilon),\r\n\t\t\tthis.right.differentiate(variable,epsilon)\r\n\t\t\t);\r\n\t}\r\n    $eval(variables:Record<string,number>|number[]):number{\r\n        return this.left.$eval(variables)-this.right.$eval(variables);\r\n    }\r\n\tsimplify(){\r\n\t\treturn simplifyAddition(this);\r\n\t\t/*let l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant){\r\n\t\t\tif(r instanceof Constant){\r\n\t\t\t\treturn new Constant(l.value - r.value);\r\n\t\t\t}\r\n\t\t\tif(Math.abs(l.value)==0)\r\n\t\t\t\treturn new Negation(r);\r\n\t\t}else if(r instanceof Constant){\r\n\t\t\tif(Math.abs(r.value)==0)\r\n\t\t\t\treturn l;\r\n\t\t}\r\n\t\treturn new Subtraction(l,r);*/\r\n\t}\r\n\tprint():string{\r\n\t\tlet l = this.left.print();\r\n\t\tlet r = this.right.print();\r\n\t\treturn (this.left.type>this.type?\"(\"+l+\")\":l)+\"-\"+(this.right.type>=this.type?\"(\"+r+\")\":r);\r\n\t}\r\n\tprintLatex():string{\r\n\t\tlet l = this.left.printLatex();\r\n\t\tlet r = this.right.printLatex();\r\n\t\treturn (this.left.type>this.type?\"(\"+l+\")\":l)+\"-\"+(this.right.type>=this.type?\"(\"+r+\")\":r);\r\n\t}\r\n}\r\nexport class Division extends BinaryOp{\r\n    constructor(left:Expression,right:Expression){\r\n        super(NodeType._Division, left, right)\r\n    }\r\n    clone(){\r\n        return new Division(this.left.clone(),this.right.clone());\r\n    }\r\n\tdifferentiate(variable:string, epsilon:number){\r\n\t\treturn new Subtraction(\r\n\t\t\tnew Division(\r\n\t\t\t\tthis.left.differentiate(variable,epsilon),\r\n\t\t\t\tthis.right.clone(),\r\n\t\t\t),\r\n\t\t\tnew Multiplication(\r\n\t\t\t\tthis.right.differentiate(variable,epsilon),\r\n\t\t\t\tnew Division(\r\n\t\t\t\t\tthis.left.clone(),\r\n\t\t\t\t\tnew Multiplication(this.right.clone(),this.right.clone())\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n    $eval(variables:Record<string,number>|number[]):number{\r\n        return this.left.$eval(variables)/this.right.$eval(variables);\r\n    }\r\n\tsimplify(){\r\n\t\treturn simplifyMultiplication(this);\r\n\t\t/*let l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant){\r\n\t\t\tif(Math.abs(l.value)==0.0)\r\n\t\t\t\treturn l;\r\n\t\t\tif(r instanceof Constant){\r\n\t\t\t\treturn new Constant(l.value / r.value);\r\n\t\t\t}\r\n\t\t}else if(r instanceof Constant){\r\n\t\t\tif(r.value == 1)\r\n\t\t\t\treturn l;\r\n\t\t\tif(r.value == -1)\r\n\t\t\t\treturn new Negation(l);\r\n\t\t}\r\n\t\treturn new Division(l,r);*/\r\n\t}\r\n\tprint():string{\r\n\t\tlet l = this.left.print();\r\n\t\tlet r = this.right.print();\r\n\t\treturn (this.left.type>=this.type?\"(\"+l+\")\":l)+\"/\"+(this.right.type>=this.type?\"(\"+r+\")\":r);\r\n\t}\r\n\tprintLatex():string{\r\n\t\tlet l = this.left.printLatex();\r\n\t\tlet r = this.right.printLatex();\r\n\t\treturn \"\\\\frac{\"+(this.left.type>=this.type?\"(\"+l+\")\":l)+\"}{\"+(this.right.type>=this.type?\"(\"+r+\")\":r)+\"}\";\r\n\t}\r\n}\r\nexport class Function extends Expression{\r\n    functionName:string;\r\n    function:FunctionDef;\r\n    args:Array<Expression>;\r\n    constructor(functionName:string,args:Array<Expression>){\r\n        super(NodeType._Function);\r\n        this.functionName = functionName;\r\n        this.function = functionDictionary[functionName];\r\n        this.args = args;\r\n        if(this.function ===undefined)\r\n            throw `Unknown function \\\"${functionName}`;\r\n        if(this.function.argCount!=args.length)\r\n            throw `Incorrect number of arguments in function \\\"${functionName}: ${args.length}, ${this.function.argCount} expected`;\r\n    }\r\n    clone():Expression{\r\n        return new Function(this.functionName,this.args.map(function(item:Expression){\r\n            return item.clone();\r\n        }\r\n        ));\r\n    }\r\n\tdifferentiate(variable:string,epsilon:number = 0.001):Expression{\r\n\t\tif(this.args.length==0)\r\n\t\t\treturn new Constant(0.0);\r\n\t\tif (this.args.length == 1){\r\n\t\t\treturn new Multiplication(\r\n\t\t\t\t\tthis.args[0].differentiate(variable, epsilon),\r\n\t\t\t\t\tthis.getDerivative(0,epsilon)\r\n\t\t\t);\r\n\t\t}\r\n\t\tlet root = new Addition(null,null);\r\n\t\tlet current:Addition = root;\r\n\t\tfor (let i = 0; i < this.args.length - 1; i++){\r\n\t\t\tcurrent.left = new Multiplication\r\n\t\t\t(\r\n\t\t\t\tthis.args[i].differentiate(variable,epsilon),\r\n\t\t\t\tthis.getDerivative(i,epsilon)\r\n\t\t\t);\r\n\t\t\tif (i < this.args.length - 2){\r\n\t\t\t\tcurrent.right = new Addition(null,null);\r\n\t\t\t\tcurrent = current.right as Addition;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcurrent.right = new Multiplication\r\n\t\t(\r\n\t\t\tthis.args[this.args.length - 1].differentiate(variable,epsilon),\r\n\t\t\tthis.getDerivative(this.args.length - 1,epsilon)\r\n\t\t);\r\n\t\treturn root;\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):number{\r\n\t\tlet args = this.args.map((item)=>{\r\n                return item.$eval(variables);\r\n            }\r\n\t\t);\r\n\t\treturn this.function.exec(args);\r\n\t}\r\n\tgetDerivative(index:number, epsilon:number):Expression{\r\n\t\tif(this.function.derivatives===null){//use backward difference{\r\n\t\t\tlet argumentsBackward = this.args.map((item)=>item.clone());\r\n\t\t\targumentsBackward[index] = new Subtraction(argumentsBackward[index],new Constant(epsilon));\r\n\t\t\treturn new Division(new Subtraction(\r\n\t\t\t\tnew Function(this.functionName, this.args).clone(),\r\n\t\t\t\tnew Function(this.functionName, argumentsBackward).clone(),\r\n\t\t\t\t),new Constant(epsilon));\r\n\t\t}\r\n\t\treturn this.function.derivatives[index](this.args.map((item)=>item.clone()));\r\n\t}\r\n\tsimplify():Expression{\r\n\t\tlet constantArgs = true;\r\n\t\tlet args = this.args.map((item)=>{\r\n\t\t\t\tlet _item = item.simplify();\r\n\t\t\t\tconstantArgs = constantArgs && (item instanceof Constant);\r\n\t\t\t\treturn _item;\r\n\t\t\t}\r\n\t\t);\r\n\t\tif(constantArgs){\r\n\t\t\tlet constArgs = args.map((item:Constant)=>{return item.value;});\r\n\t\t\treturn new Constant(this.function.exec(constArgs));\r\n\t\t}\r\n\t\tthis.args = args;\r\n\t\treturn this;\r\n\t}\r\n\tprint():string{\r\n\t\tlet result = this.function.name+\"(\";\r\n\t\tthis.args.forEach((item,index)=>{\r\n\t\t\tresult+=(index>0?\", \":\"\")+item.print();\r\n\t\t})\r\n\t\treturn result + \")\";\r\n\t}\r\n\tprintLatex():string{\r\n\t\tlet result = \"\\\\text{\"+this.function.name+\"}(\";\r\n\t\tthis.args.forEach((item,index)=>{\r\n\t\t\tresult+=(index>0?\", \":\"\")+item.printLatex();\r\n\t\t})\r\n\t\treturn result + \")\";\r\n\t}\r\n}\r\nexport class Variable extends Expression{\r\n    index:number;\r\n    name:string;\r\n\tconstructor(index:number,name:string){\r\n\t\tsuper(NodeType._Variable);\r\n        this.index = index;\r\n\t\tthis.name = name;\r\n    }\r\n\tclone():Expression{\r\n\t\treturn new Variable(this.index,this.name);\r\n\t}\r\n\tdifferentiate(variable:string, epsilon:number){\r\n\t\tif(variable == this.name)\r\n\t\t\treturn new Constant(1.0);\r\n\t\treturn new Constant(0.0);\r\n    }\r\n\t$eval(variables:Record<string,number>|number[]):number{\r\n\t\tif(variables instanceof Array){\r\n\t\t\treturn variables[this.index];\r\n\t\t}\r\n\t\treturn variables[this.name];\r\n\t}\r\n\tsimplify(){\r\n\t\treturn this.clone();\r\n\t}\r\n\tprint():string{\r\n\t\treturn this.name;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn this.name;\r\n\t}\r\n}\r\nexport class TernaryOperator extends Expression{\r\n\tcondition:BoolExpression;\r\n\tt:Expression;\r\n\tf:Expression;\r\n\tconstructor(condition:BoolExpression,t:Expression,f:Expression){\r\n        super(NodeType._Ternary);\r\n        this.condition = condition;\r\n\t\tthis.t = t;\r\n\t\tthis.f = f;\r\n\t}\r\n\tclone():Expression{\r\n\t\treturn new TernaryOperator(this.condition.clone(),this.t.clone(),this.f.clone());\r\n\t}\r\n\tdifferentiate(variable:string, epsilon:number){\r\n        return new TernaryOperator(this.condition.clone(),\r\n        this.t.differentiate(variable,epsilon),\r\n        this.f.differentiate(variable,epsilon));\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):number{\r\n        if(this.condition.$eval(variables)){\r\n            return this.t.$eval(variables);\r\n        }\r\n        return this.f.$eval(variables);\r\n\t}\r\n\tsimplify(){\r\n        let condition = this.condition.simplify();\r\n        if(condition instanceof BoolConstant){\r\n            let constant = condition as BoolConstant;\r\n            if(constant.value)\r\n                return this.t.simplify();\r\n            return this.f.simplify();\r\n        }\r\n        return new TernaryOperator(condition,this.t.simplify(),this.f.simplify());\r\n\t}\r\n\tprint():string{\r\n\t\treturn `{${this.condition.print()}?${this.t.print()}:${this.f.print()}}`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `\\\\{${this.condition.printLatex()}?${this.t.printLatex()}:${this.f.printLatex()}\\\\}`;\r\n\t}\r\n}\r\n\r\nexport abstract class BoolExpression{\r\n    abstract clone():BoolExpression;\r\n\tabstract $eval(variables:Record<string,number>|number[]):boolean;\r\n\tabstract simplify():BoolExpression;\r\n\tabstract convertToExpression(epsilon:number):Expression;\r\n\tabstract print():string;\r\n\tabstract printLatex():string;\r\n}\r\nabstract class BoolBinaryOp extends BoolExpression{\r\n\tleft:BoolExpression;\r\n\tright:BoolExpression;\r\n\tconstructor(left:BoolExpression,right:BoolExpression){\r\n\t\tsuper();\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t}\r\n}\r\nabstract class BoolBinaryExpOp extends BoolExpression{\r\n\tleft:Expression;\r\n\tright:Expression;\r\n\tconstructor(left:Expression,right:Expression){\r\n\t\tsuper();\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t}\r\n}\r\nexport class And extends BoolBinaryOp{\r\n\tclone(){\r\n\t\treturn new And(this.left.clone(),this.right.clone());\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)&&this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tif(l instanceof BoolConstant){\r\n\t\t\tif(l.value == false)\r\n\t\t\t\treturn l;\r\n\t\t\treturn this.right.simplify();\r\n\t\t}\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(r instanceof BoolConstant){\r\n\t\t\tif(r.value == false){\r\n\t\t\t\treturn r;\r\n\t\t\t}\r\n\t\t\treturn l;\r\n\t\t}\r\n\t\treturn new And(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Function(\"min\",\r\n\t\t[this.left.convertToExpression(epsilon),this.right.convertToExpression(epsilon)]);\r\n\t}\r\n\tprint():string{\r\n\t\treturn `(${this.left.print()}) and (${this.right.print()})`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `(${this.left.printLatex()}) \\\\text{and} (${this.right.printLatex()})`;\r\n\t}\r\n}\r\nexport class Or extends BoolBinaryOp{\r\n\tclone(){\r\n\t\treturn new Or(this.left.clone(),this.right.clone());\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)||this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tif(l instanceof BoolConstant){\r\n\t\t\tif(l.value == true)\r\n\t\t\t\treturn l;\r\n\t\t\treturn this.right.simplify();\r\n\t\t}\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(r instanceof BoolConstant){\r\n\t\t\tif(r.value == true){\r\n\t\t\t\treturn r;\r\n\t\t\t}\r\n\t\t\treturn l;\r\n\t\t}\r\n\t\treturn new Or(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Function(\"max\",\r\n\t\t[this.left.convertToExpression(epsilon),this.right.convertToExpression(epsilon)]);\r\n\t}\r\n\tprint():string{\r\n\t\treturn `(${this.left.print()}) or (${this.right.print()})`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `(${this.left.printLatex()}) \\\\text{or} (${this.right.printLatex()})`;\r\n\t}\r\n}\r\nexport class Equal extends BoolBinaryExpOp{\r\n\tclone(){\r\n\t\treturn new Equal(this.left,this.right);\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)==this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant && r instanceof Constant){\r\n\t\t\treturn new BoolConstant(l.value==r.value);\r\n\t\t}\r\n\t\treturn new Equal(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Subtraction(new Constant(epsilon*epsilon),\r\n\t\tnew Function(\"pow\",[new Subtraction(this.left.clone(),this.right.clone()),new Constant(2)]));\r\n\t}\r\n\tprint():string{\r\n\t\treturn `${this.left.print()} = ${this.right.print()}`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `(${this.left.printLatex()}) = (${this.right.printLatex()})`;\r\n\t}\r\n}\r\nexport class NotEqual extends BoolBinaryExpOp{\r\n\tclone(){\r\n\t\treturn new NotEqual(this.left,this.right);\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)!=this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant && r instanceof Constant){\r\n\t\t\treturn new BoolConstant(l.value!=r.value);\r\n\t\t}\r\n\t\treturn new NotEqual(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Addition(new Constant(-epsilon*epsilon),\r\n\t\tnew Function(\"pow\",[new Subtraction(this.left.clone(),this.right.clone()),new Constant(2)]));\r\n\t}\r\n\tprint():string{\r\n\t\treturn `${this.left.print()} != ${this.right.print()}`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `(${this.left.printLatex()}) != (${this.right.printLatex()})`;\r\n\t}\r\n}\r\nexport class Greater extends BoolBinaryExpOp{\r\n\tclone(){\r\n\t\treturn new Greater(this.left,this.right);\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)>this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant && r instanceof Constant){\r\n\t\t\treturn new BoolConstant(l.value>r.value);\r\n\t\t}\r\n\t\treturn new Greater(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Subtraction(this.left.clone(),this.right.clone());\r\n\t}\r\n\tprint():string{\r\n\t\treturn `${this.left.print()}>${this.right.print()}`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `${this.left.printLatex()}>${this.right.printLatex()}`;\r\n\t}\r\n}\r\nexport class GEqual extends BoolBinaryExpOp{\r\n\tclone(){\r\n\t\treturn new GEqual(this.left,this.right);\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)>=this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant && r instanceof Constant){\r\n\t\t\treturn new BoolConstant(l.value>=r.value);\r\n\t\t}\r\n\t\treturn new GEqual(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Addition(new Subtraction(this.left.clone(),this.right.clone()),new Constant(epsilon));\r\n\t}\r\n\tprint():string{\r\n\t\treturn `${this.left.print()} >= ${this.right.print()}`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `${this.left.printLatex()}>=${this.right.printLatex()}`;\r\n\t}\r\n}\r\nexport class Less extends BoolBinaryExpOp{\r\n\tclone(){\r\n\t\treturn new Less(this.left,this.right);\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)<this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant && r instanceof Constant){\r\n\t\t\treturn new BoolConstant(l.value<r.value);\r\n\t\t}\r\n\t\treturn new Less(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Subtraction(this.right.clone(),this.left.clone());\r\n\t}\r\n\tprint():string{\r\n\t\treturn `${this.left.print()} < ${this.right.print()}`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `${this.left.printLatex()}<${this.right.printLatex()}`;\r\n\t}\r\n}\r\nexport class LEqual extends BoolBinaryExpOp{\r\n\tclone(){\r\n\t\treturn new LEqual(this.left,this.right);\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t\treturn this.left.$eval(variables)<=this.right.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet l = this.left.simplify();\r\n\t\tlet r = this.right.simplify();\r\n\t\tif(l instanceof Constant && r instanceof Constant){\r\n\t\t\treturn new BoolConstant(l.value<=r.value);\r\n\t\t}\r\n\t\treturn new LEqual(l,r);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Addition(new Subtraction(this.right.clone(),this.left.clone()),new Constant(epsilon));\r\n\t}\r\n\tprint():string{\r\n\t\treturn `${this.left.print()} <= ${this.right.print()}`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `${this.left.printLatex()}<=${this.right.printLatex()}`;\r\n\t}\r\n}\r\nexport class BoolNot extends BoolExpression{\r\n\tinner:BoolExpression;\r\n\tconstructor(inner:BoolExpression){\r\n\t\tsuper();\r\n\t\tthis.inner = inner;\r\n\t}\r\n\tclone(){\r\n\t\treturn new BoolNot(this.inner.clone());\r\n\t}\r\n\t$eval(variables:Record<string,number>|number[]):boolean{\r\n\t    return !this.inner.$eval(variables);\r\n\t}\r\n\tsimplify():BoolExpression{\r\n\t\tlet i = this.inner.simplify();\r\n\t\tif(i instanceof BoolConstant){\r\n\t\t\treturn new BoolConstant(!i.value);\r\n\t\t}else if(i instanceof BoolNot){\r\n\t\t\treturn i.inner;\r\n\t\t}\r\n\t\treturn new BoolNot(i);\r\n\t}\r\n\tconvertToExpression(epsilon:number):Expression{\r\n\t\treturn new Constant(-this.inner.convertToExpression(epsilon));\r\n\t}\r\n\tprint():string{\r\n\t\treturn `!(${this.inner.print()})`;\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn `!(${this.inner.printLatex()})`;\r\n\t}\r\n}\r\nexport class BoolConstant extends BoolExpression{\r\n    value:boolean;\r\n    constructor(value:boolean){\r\n        super();\r\n        this.value = value;\r\n    }\r\n    clone():BoolExpression{\r\n        return new BoolConstant(this.value);\r\n    }\r\n    $eval(variables:Record<string,number>|number[]):boolean{\r\n        return this.value;\r\n    }\r\n    simplify():BoolExpression{\r\n        return this.clone()\r\n\t}\r\n\tconvertToExpression():Expression{\r\n\t\treturn new Constant(this.value?1:-1);\r\n\t}\r\n\tprint():string{\r\n\t\treturn this.value?\"true\":\"false\";\r\n\t}\r\n\tprintLatex():string{\r\n\t\treturn this.value?\"\\\\text{true}\":\"\\\\text{false}\";\r\n\t}\r\n}","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n//* A rule invocation record for parsing.\n//\n//  Contains all of the information about the current rule not stored in the\n//  RuleContext. It handles parse tree children list, Any ATN state\n//  tracing, and the default values available for rule indications:\n//  start, stop, rule index, current alt number, current\n//  ATN state.\n//\n//  Subclasses made for each rule and grammar track the parameters,\n//  return values, locals, and labels specific to that rule. These\n//  are the objects that are returned from rules.\n//\n//  Note text is not an actual field of a rule return value; it is computed\n//  from start and stop using the input stream's toString() method.  I\n//  could add a ctor to this so that we can pass in and store the input\n//  stream, but I'm not sure we want to do that.  It would seem to be undefined\n//  to get the .text property anyway if the rule matches tokens from multiple\n//  input streams.\n//\n//  I do not use getters for fields of objects that are used simply to\n//  group values such as this aggregate.  The getters/setters are there to\n//  satisfy the superclass interface.\n\nvar RuleContext = require('./RuleContext').RuleContext;\nvar Tree = require('./tree/Tree');\nvar INVALID_INTERVAL = Tree.INVALID_INTERVAL;\nvar TerminalNode = Tree.TerminalNode;\nvar TerminalNodeImpl = Tree.TerminalNodeImpl;\nvar ErrorNodeImpl = Tree.ErrorNodeImpl;\nvar Interval = require(\"./IntervalSet\").Interval;\n\nfunction ParserRuleContext(parent, invokingStateNumber) {\n\tparent = parent || null;\n\tinvokingStateNumber = invokingStateNumber || null;\n\tRuleContext.call(this, parent, invokingStateNumber);\n\tthis.ruleIndex = -1;\n    // * If we are debugging or building a parse tree for a visitor,\n    // we need to track all of the tokens and rule invocations associated\n    // with this rule's context. This is empty for parsing w/o tree constr.\n    // operation because we don't the need to track the details about\n    // how we parse this rule.\n    // /\n    this.children = null;\n    this.start = null;\n    this.stop = null;\n    // The exception that forced this rule to return. If the rule successfully\n    // completed, this is {@code null}.\n    this.exception = null;\n}\n\nParserRuleContext.prototype = Object.create(RuleContext.prototype);\nParserRuleContext.prototype.constructor = ParserRuleContext;\n\n// * COPY a ctx (I'm deliberately not using copy constructor)///\nParserRuleContext.prototype.copyFrom = function(ctx) {\n    // from RuleContext\n    this.parentCtx = ctx.parentCtx;\n    this.invokingState = ctx.invokingState;\n    this.children = null;\n    this.start = ctx.start;\n    this.stop = ctx.stop;\n    // copy any error nodes to alt label node\n    if(ctx.children) {\n        this.children = [];\n        // reset parent pointer for any error nodes\n    \tctx.children.map(function(child) {\n    \t\tif (child instanceof ErrorNodeImpl) {\n                this.children.push(child);\n                child.parentCtx = this;\n            }\n\t\t}, this);\n\t}\n};\n\n// Double dispatch methods for listeners\nParserRuleContext.prototype.enterRule = function(listener) {\n};\n\nParserRuleContext.prototype.exitRule = function(listener) {\n};\n\n// * Does not set parent link; other add methods do that///\nParserRuleContext.prototype.addChild = function(child) {\n    if (this.children === null) {\n        this.children = [];\n    }\n    this.children.push(child);\n    return child;\n};\n\n// * Used by enterOuterAlt to toss out a RuleContext previously added as\n// we entered a rule. If we have // label, we will need to remove\n// generic ruleContext object.\n// /\nParserRuleContext.prototype.removeLastChild = function() {\n    if (this.children !== null) {\n        this.children.pop();\n    }\n};\n\nParserRuleContext.prototype.addTokenNode = function(token) {\n    var node = new TerminalNodeImpl(token);\n    this.addChild(node);\n    node.parentCtx = this;\n    return node;\n};\n\nParserRuleContext.prototype.addErrorNode = function(badToken) {\n    var node = new ErrorNodeImpl(badToken);\n    this.addChild(node);\n    node.parentCtx = this;\n    return node;\n};\n\nParserRuleContext.prototype.getChild = function(i, type) {\n\ttype = type || null;\n\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\treturn null;\n\t}\n\tif (type === null) {\n\t\treturn this.children[i];\n\t} else {\n\t\tfor(var j=0; j<this.children.length; j++) {\n\t\t\tvar child = this.children[j];\n\t\t\tif(child instanceof type) {\n\t\t\t\tif(i===0) {\n\t\t\t\t\treturn child;\n\t\t\t\t} else {\n\t\t\t\t\ti -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n    }\n};\n\n\nParserRuleContext.prototype.getToken = function(ttype, i) {\n\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\treturn null;\n\t}\n\tfor(var j=0; j<this.children.length; j++) {\n\t\tvar child = this.children[j];\n\t\tif (child instanceof TerminalNode) {\n\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\tif(i===0) {\n\t\t\t\t\treturn child;\n\t\t\t\t} else {\n\t\t\t\t\ti -= 1;\n\t\t\t\t}\n\t\t\t}\n        }\n\t}\n    return null;\n};\n\nParserRuleContext.prototype.getTokens = function(ttype ) {\n    if (this.children=== null) {\n        return [];\n    } else {\n\t\tvar tokens = [];\n\t\tfor(var j=0; j<this.children.length; j++) {\n\t\t\tvar child = this.children[j];\n\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\ttokens.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tokens;\n    }\n};\n\nParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {\n    return this.getChild(i, ctxType);\n};\n\nParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {\n    if (this.children=== null) {\n        return [];\n    } else {\n\t\tvar contexts = [];\n\t\tfor(var j=0; j<this.children.length; j++) {\n\t\t\tvar child = this.children[j];\n\t\t\tif (child instanceof ctxType) {\n\t\t\t\tcontexts.push(child);\n\t\t\t}\n\t\t}\n\t\treturn contexts;\n\t}\n};\n\nParserRuleContext.prototype.getChildCount = function() {\n\tif (this.children=== null) {\n\t\treturn 0;\n\t} else {\n\t\treturn this.children.length;\n\t}\n};\n\nParserRuleContext.prototype.getSourceInterval = function() {\n    if( this.start === null || this.stop === null) {\n        return INVALID_INTERVAL;\n    } else {\n        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n    }\n};\n\nRuleContext.EMPTY = new ParserRuleContext();\n\nfunction InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {\n\tParserRuleContext.call(parent, invokingStateNumber);\n    this.ruleIndex = ruleIndex;\n    return this;\n}\n\nInterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);\nInterpreterRuleContext.prototype.constructor = InterpreterRuleContext;\n\nexports.ParserRuleContext = ParserRuleContext;","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = require('./Token').Token;\nrequire('./polyfills/codepointat');\nrequire('./polyfills/fromcodepoint');\n\n// Vacuum all input from a string and then treat it like a buffer.\n\nfunction _loadString(stream) {\n\tstream._index = 0;\n\tstream.data = [];\n\tif (stream.decodeToUnicodeCodePoints) {\n\t\tfor (var i = 0; i < stream.strdata.length; ) {\n\t\t\tvar codePoint = stream.strdata.codePointAt(i);\n\t\t\tstream.data.push(codePoint);\n\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t}\n\t} else {\n\t\tfor (var i = 0; i < stream.strdata.length; i++) {\n\t\t\tvar codeUnit = stream.strdata.charCodeAt(i);\n\t\t\tstream.data.push(codeUnit);\n\t\t}\n\t}\n\tstream._size = stream.data.length;\n}\n\n// If decodeToUnicodeCodePoints is true, the input is treated\n// as a series of Unicode code points.\n//\n// Otherwise, the input is treated as a series of 16-bit UTF-16 code\n// units.\nfunction InputStream(data, decodeToUnicodeCodePoints) {\n\tthis.name = \"<empty>\";\n\tthis.strdata = data;\n\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t_loadString(this);\n\treturn this;\n}\n\nObject.defineProperty(InputStream.prototype, \"index\", {\n\tget : function() {\n\t\treturn this._index;\n\t}\n});\n\nObject.defineProperty(InputStream.prototype, \"size\", {\n\tget : function() {\n\t\treturn this._size;\n\t}\n});\n\n// Reset the stream so that it's in the same state it was\n// when the object was created *except* the data array is not\n// touched.\n//\nInputStream.prototype.reset = function() {\n\tthis._index = 0;\n};\n\nInputStream.prototype.consume = function() {\n\tif (this._index >= this._size) {\n\t\t// assert this.LA(1) == Token.EOF\n\t\tthrow (\"cannot consume EOF\");\n\t}\n\tthis._index += 1;\n};\n\nInputStream.prototype.LA = function(offset) {\n\tif (offset === 0) {\n\t\treturn 0; // undefined\n\t}\n\tif (offset < 0) {\n\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t}\n\tvar pos = this._index + offset - 1;\n\tif (pos < 0 || pos >= this._size) { // invalid\n\t\treturn Token.EOF;\n\t}\n\treturn this.data[pos];\n};\n\nInputStream.prototype.LT = function(offset) {\n\treturn this.LA(offset);\n};\n\n// mark/release do nothing; we have entire buffer\nInputStream.prototype.mark = function() {\n\treturn -1;\n};\n\nInputStream.prototype.release = function(marker) {\n};\n\n// consume() ahead until p==_index; can't just set p=_index as we must\n// update line and column. If we seek backwards, just set p\n//\nInputStream.prototype.seek = function(_index) {\n\tif (_index <= this._index) {\n\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t\t\t\t\t\t// ...)\n\t\treturn;\n\t}\n\t// seek forward\n\tthis._index = Math.min(_index, this._size);\n};\n\nInputStream.prototype.getText = function(start, stop) {\n\tif (stop >= this._size) {\n\t\tstop = this._size - 1;\n\t}\n\tif (start >= this._size) {\n\t\treturn \"\";\n\t} else {\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tvar result = \"\";\n\t\t\tfor (var i = start; i <= stop; i++) {\n\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t}\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t}\n\t}\n};\n\nInputStream.prototype.toString = function() {\n\treturn this.strdata;\n};\n\nexports.InputStream = InputStream;\n","\r\nexport enum NodeType{\r\n    _Constant=0,\r\n    _Identifier,\r\n    _Function,\r\n    _Addition,\r\n    _Subtraction,\r\n    _Multiplication,\r\n    _Division,\r\n    _Negation,\r\n    _Less,\r\n    _LessEqual,\r\n    _Greater,\r\n    _GreaterEqual,\r\n    _Equal,\r\n    _NotEqual,\r\n    _And,\r\n    _Or,\r\n    _Not,\r\n    _BoolConstant,\r\n    _Ternary\r\n}\r\n\r\nexport class TextPosition{\r\n    readonly line:number;\r\n    readonly column:number;\r\n    readonly start:number;\r\n    readonly stop:number;\r\n    constructor(line:number,column:number,start:number,stop:number){\r\n        this.line = line;\r\n        this.column = column;\r\n        this.start = start;\r\n        this.stop = stop;\r\n    }\r\n    static invalid():TextPosition{\r\n        return new TextPosition(-1,-1,-1,-1);\r\n    }\r\n}\r\n\r\nexport abstract class ASTNode{\r\n    type:number;\r\n    textPos:TextPosition;\r\n    constructor(type:number){\r\n        this.type = type;\r\n        this.textPos = TextPosition.invalid();\r\n    }\r\n    setTextPos(textPos:TextPosition){\r\n        this.textPos = textPos;\r\n        return this;\r\n    }\r\n}\r\nexport abstract class BoolExpressionNode extends ASTNode{\r\n    constructor(type:number){\r\n        super(type);\r\n    }\r\n    abstract clone():BoolExpressionNode;\r\n}\r\nexport class BoolNegationNode extends BoolExpressionNode{\r\n    inner:BoolExpressionNode;\r\n    constructor(inner:BoolExpressionNode){\r\n        super(NodeType._Negation);\r\n        this.inner = inner;\r\n    }\r\n    clone(){\r\n        return new BoolNegationNode(this.inner.clone());\r\n    }\r\n}\r\nexport class BoolLNode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._Less);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolLNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolLENode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._LessEqual);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolLENode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolGNode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._Greater);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolGNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolGENode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._GreaterEqual);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolGENode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolENode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._Equal);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolENode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolNENode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._NotEqual);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolNENode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolAndNode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._And);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolAndNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolOrNode extends BoolExpressionNode{\r\n    left:BoolExpressionNode;\r\n    right:BoolExpressionNode;\r\n    constructor(left:BoolExpressionNode,right:BoolExpressionNode){\r\n        super(NodeType._Or);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new BoolOrNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class BoolConstantNode extends BoolExpressionNode{\r\n    value:boolean;\r\n    constructor(value:boolean){\r\n        super(NodeType._BoolConstant);\r\n        this.value = value;\r\n    }\r\n    clone(){\r\n        return new BoolConstantNode(this.value);\r\n    }\r\n}\r\nexport abstract class ExpressionNode extends ASTNode{\r\n    constructor(type:number){\r\n        super(type);\r\n    }\r\n    abstract clone():ExpressionNode\r\n}\r\nexport class IdentifierNode extends ExpressionNode{\r\n    id:string;\r\n    constructor(id:string){\r\n        super(NodeType._Identifier);\r\n        this.id = id;\r\n    }\r\n    clone(){\r\n        return new IdentifierNode(this.id);\r\n    }\r\n}\r\nexport class ConstantNode extends ExpressionNode{\r\n    value:number;\r\n    constructor(value:number){\r\n        super(NodeType._Constant);\r\n        this.value = value;\r\n    }\r\n    clone(){\r\n        return new ConstantNode(this.value);\r\n    }\r\n}\r\nexport class FunctionNode extends ExpressionNode{\r\n    name:string;\r\n    args:ExpressionNode[];\r\n    constructor(name:string,args:ExpressionNode[]){\r\n        super(NodeType._Function);\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n    clone(){\r\n        return new FunctionNode(this.name,this.args.map(function(item){return item.clone()}));\r\n    }\r\n}\r\nexport class AdditionNode extends ExpressionNode{\r\n    left:ExpressionNode;\r\n    right:ExpressionNode;\r\n    constructor(left:ExpressionNode,right:ExpressionNode){\r\n        super(NodeType._Addition);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new AdditionNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class MultiplicationNode extends ExpressionNode{\r\n    left:ExpressionNode;\r\n    right:ExpressionNode;\r\n    constructor(left:ExpressionNode,right:ExpressionNode){\r\n        super(NodeType._Multiplication);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new MultiplicationNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class SubtractionNode extends ExpressionNode{\r\n    left:ExpressionNode;\r\n    right:ExpressionNode;\r\n    constructor(left:ExpressionNode,right:ExpressionNode){\r\n        super(NodeType._Subtraction);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new SubtractionNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class DivisionNode extends ExpressionNode{\r\n    left:ExpressionNode;\r\n    right:ExpressionNode;\r\n    constructor(left:ExpressionNode,right:ExpressionNode){\r\n        super(NodeType._Division);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    clone(){\r\n        return new DivisionNode(this.left.clone(),this.right.clone());\r\n    }\r\n}\r\nexport class TernaryOperatorNode extends ExpressionNode{\r\n    condition:BoolExpressionNode;\r\n    true:ExpressionNode;\r\n    false:ExpressionNode;\r\n    constructor(cond:BoolExpressionNode,tr:ExpressionNode,fls:ExpressionNode){\r\n        super(NodeType._Ternary);\r\n        this.condition = cond;\r\n        this.true = tr;\r\n        this.false = fls;\r\n    }\r\n    clone(){\r\n        return new TernaryOperatorNode(this.condition.clone(),this.true.clone(),this.false.clone());\r\n    }\r\n}\r\nexport class NegationNode extends ExpressionNode{\r\n    inner:ExpressionNode;\r\n    constructor(inner:ExpressionNode){\r\n        super(NodeType._Negation);\r\n        this.inner = inner;\r\n    }\r\n    clone(){\r\n        return new NegationNode(this.inner.clone());\r\n    }\r\n}","import {\r\n    Expression,\r\n    Function,\r\n    Negation,\r\n    Constant,\r\n    Division,\r\n    Multiplication, \r\n    Subtraction,\r\n    Addition\r\n} from \"./expression\";\r\nexport interface FunctionDerivative{\r\n    (args:Expression[]):Expression;\r\n}\r\n\r\n\r\nexport abstract class FunctionDef{\r\n    name:string;\r\n    argCount:number;\r\n    derivatives:Array<(args: Expression[])=>Expression>;\r\n    constructor(name:string,argCount:number,derivatives:FunctionDerivative[]){\r\n        this.name = name;\r\n        this.argCount = argCount;\r\n        this.derivatives = derivatives;\r\n    }\r\n    abstract exec(args:number[]):number;\r\n    getDerivative(index:number, args:Expression[]):Expression{\r\n        return this.derivatives[index](args);\r\n    }\r\n}\r\nclass sin extends FunctionDef{\r\n    constructor(){\r\n        super(\"sin\",1, [sin.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.sin(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Function(\"cos\",args);\r\n    }\r\n}\r\nclass cos extends FunctionDef{\r\n    constructor(){\r\n        super(\"cos\",1, [cos.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.cos(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Negation(new Function(\"cos\",args));\r\n    }\r\n}\r\nclass sinc extends FunctionDef{\r\n    constructor(){\r\n        super(\"sinc\",1,[sinc.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return sinc.call(args[0]);\r\n    }\r\n    static call(x:number){\r\n        x = Math.abs(x);\r\n        if(x<0.001)\r\n            return 1.0-x*x/6.0*(1.-x*x/20);//truncated maclaurin series \r\n        return Math.sin(x)/x;\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(\r\n            new Subtraction(new Function(\"cos\",args),new Function(\"sinc\",args)),\r\n            args[0]\r\n            );\r\n    }\r\n};\r\nclass tan extends FunctionDef{\r\n    constructor(){\r\n        super(\"tan\",1,[tan.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.tan(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Function(\"pow\",[\r\n            new Function(\"cos\", args),\r\n            new Constant(2)]);\r\n    }\r\n};\r\nclass cot extends FunctionDef{\r\n    constructor(){\r\n        super(\"cot\",1,[cot.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.cos(args[0])/Math.sin(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Negation(\r\n            new Function(\"pow\",[\r\n                new Function(\"sin\",args),\r\n                new Constant(2)])\r\n        );\r\n    }\r\n};\r\nclass asin extends FunctionDef{\r\n    constructor(){\r\n        super(\"asin\",1,[asin.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.asin(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(new Constant(1.0),\r\n        new Function(\"sqrt\",\r\n        [\r\n            new Subtraction(\r\n                new Constant(1),\r\n                new Multiplication(args[0],args[0]))\r\n        ])) \r\n    }\r\n};\r\nclass acos extends FunctionDef{\r\n    constructor(){\r\n        super(\"acos\",1,[acos.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.acos(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Negation(\r\n            new Division(new Constant(1.0),\r\n        new Function(\"sqrt\",\r\n        [\r\n            new Subtraction(\r\n                new Constant(1),\r\n                new Multiplication(args[0],args[0]))\r\n        ])));\r\n    }};\r\nclass atan extends FunctionDef{\r\n    constructor(){\r\n        super(\"atan\",1,[atan.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.atan(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(new Constant(1.0),\r\n            new Addition(\r\n                new Constant(1),\r\n                new Multiplication(args[0],args[0])\r\n                )\r\n        );\r\n    }};\r\nclass acot extends FunctionDef{\r\n    constructor(){\r\n        super(\"acot\",1,[acot.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.PI/2-Math.atan(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Negation(new Division(new Constant(1.0),\r\n            new Addition(\r\n                new Constant(1),\r\n                new Multiplication(args[0],args[0])\r\n                )\r\n        ));\r\n    }};\r\nclass sinh extends FunctionDef{\r\n    constructor(){\r\n        super(\"sinh\",1,[sinh.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.sinh(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Function(\"cosh\",args);\r\n    }};\r\nclass cosh extends FunctionDef{\r\n    constructor(){\r\n        super(\"cosh\",1,[cosh.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.cosh(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Function(\"sinh\",args);\r\n    }};\r\nclass tanh extends FunctionDef{\r\n    constructor(){\r\n        super(\"tanh\",1,[tanh.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.tanh(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Function(\"pow\",[\r\n            new Function(\"cosh\",args)\r\n            ,new Constant(-2)\r\n        ]);\r\n    }};\r\nclass coth extends FunctionDef{\r\n    constructor(){\r\n        super(\"coth\",1,[coth.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return 1.0/Math.tanh(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Negation(new Function(\"pow\",[\r\n            new Function(\"sinh\",args)\r\n            ,new Constant(-2)\r\n        ]));\r\n    }};\r\nclass asinh extends FunctionDef{\r\n    constructor(){\r\n        super(\"asinh\",1,[asinh.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.asinh(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(new Constant(1),\r\n            new Function(\"sqrt\",[new Addition(\r\n                new Multiplication(args[0],args[0]),\r\n                new Constant(1)\r\n            )])\r\n        ); \r\n    }};\r\nclass acosh extends FunctionDef{\r\n    constructor(){\r\n        super(\"acosh\",1,[acosh.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.acosh(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(new Constant(1),\r\n            new Function(\"sqrt\",[new Subtraction(\r\n                new Multiplication(args[0],args[0]),\r\n                new Constant(1)\r\n            )])\r\n        );\r\n    }};\r\nclass atanh extends FunctionDef{\r\n    constructor(){\r\n        super(\"atanh\",1,[atanh.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.atanh(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(\r\n            new Constant(1),\r\n            new Subtraction(\r\n                new Constant(1),\r\n                new Multiplication(args[0],args[0])\r\n            ),\r\n        )\r\n    }};\r\nclass acoth extends FunctionDef{\r\n    constructor(){\r\n        super(\"acoth\",1,[acoth.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return 0.5*Math.log((1+args[0])/(args[0]-1));\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(\r\n            new Constant(1),\r\n            new Subtraction(\r\n                new Constant(1),\r\n                new Multiplication(args[0],args[0])\r\n            ),\r\n        )\r\n    }};\r\nclass erf extends FunctionDef{\r\n    constructor(){\r\n        super(\"erf\",1,[erf.der]);\r\n    }\r\n    static call(x:number):number{\r\n       var sign = Math.sign(x);\r\n       x = Math.abs(x);\r\n       var a1 = 0.254829592;\r\n       var a2 = -0.284496736;\r\n       var a3 = 1.421413741;\r\n       var a4 = -1.453152027;\r\n       var a5 = 1.061405429;\r\n       var p = 0.3275911;\r\n       var t = 1.0 / (1.0 + p * x);\r\n       var y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\r\n       return sign * y;\r\n    }\r\n    exec(args:number[]){\r\n        return erf.call(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Multiplication(new Constant(2.0 / Math.sqrt(Math.PI)), new Function(\"exp\", [new Negation(new Multiplication(args[0], args[0]))]));\r\n    }\r\n};\r\nclass exp extends FunctionDef{\r\n    constructor(){\r\n        super(\"exp\",1,[exp.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.exp(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Function(\"exp\", args);\r\n    }\r\n};\r\nclass pow extends FunctionDef{\r\n    constructor(){\r\n        super(\"pow\",2,[pow.derX,pow.derY]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.pow(args[0], args[1]);\r\n    }\r\n    static derX(args:Expression[]){\r\n        return new Multiplication(args[1], new Function(\"pow\", [\r\n            args[0],new Subtraction(args[1], new Constant(1))\r\n        ]));\r\n    }\r\n    static derY(args:Expression[]){\r\n        return new Multiplication(new Function(\"ln\", [args[0]]), new Function(\"pow\", args));\r\n    }\r\n};\r\nclass ln extends FunctionDef{\r\n    constructor(){\r\n        super(\"ln\",1,[ln.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.log(args[0]);\r\n    }\r\n    static der(args:Expression[]){return new Division(new Constant(1.0), args[0]); \r\n    }\r\n};\r\nclass log extends FunctionDef{\r\n    constructor(){\r\n        super(\"log\",2,[log.derX,log.derY]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.log(args[1])/Math.log(args[0]);\r\n    }\r\n    static derX(args:Expression[]){\r\n        return new Division(\r\n            new Function(\"ln\",[args[1]]),\r\n            new Multiplication(\r\n                new Function(\"pow\",[\r\n                    new Function(\"ln\",[args[0]]),\r\n                    new Constant(2)]),\r\n                    args[0])\r\n        );\r\n    }\r\n    static derY(args:Expression[]){\r\n        return new Division(\r\n            new Constant(1),\r\n            new Multiplication(args[1],new Function(\"ln\",[args[0]]))\r\n        );\r\n    }\r\n};\r\nclass lg extends FunctionDef{\r\n    constructor(){\r\n        super(\"lg\",1,[lg.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.log10(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(\r\n            new Constant(1.0/Math.log(10)),\r\n            args[0]);\r\n    }\r\n};\r\nclass sqrt extends FunctionDef{\r\n    constructor(){\r\n        super(\"sqrt\",1,[sqrt.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.sqrt(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Division(new Constant(0.5),new Function(\"sqrt\",args));\r\n    }\r\n};\r\nclass abs extends FunctionDef{\r\n    constructor(){\r\n        super(\"abs\",1,[abs.der]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.abs(args[0]);\r\n    }\r\n    static der(args:Expression[]){\r\n        return new Function(\"step\",args);\r\n    }\r\n};\r\nclass min extends FunctionDef{\r\n    constructor(){\r\n        super(\"min\",2,null);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.min(args[0], args[1]);\r\n    }\r\n};\r\nclass max extends FunctionDef{\r\n    constructor(){\r\n        super(\"max\",2,null);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.max(args[0], args[1]);\r\n    }\r\n};\r\nclass sign extends FunctionDef{\r\n    constructor(){\r\n        super(\"sign\",1,null);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.sign(args[0]);\r\n    }\r\n};\r\nclass step extends FunctionDef{\r\n    constructor(){\r\n        super(\"step\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        return x<0?0:1;\r\n    }\r\n    exec(args:number[]){\r\n        return step.call(args[0]);\r\n    }\r\n};\r\nclass frac extends FunctionDef{\r\n    constructor(){\r\n        super(\"frac\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        return (x-Math.floor(x));\r\n    }\r\n    exec(args:number[]){\r\n        return frac.call(args[0]);\r\n    }\r\n}\r\nclass squarewave extends FunctionDef{\r\n    constructor(){\r\n        super(\"squarewave\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        return Math.sign(frac.call(x/2)-0.5);\r\n        //return Math.sign(Math.abs(x)%1);\r\n    }\r\n    exec(args:number[]){\r\n        return squarewave.call(args[0]);\r\n    }\r\n}\r\nclass smoothstep extends FunctionDef{\r\n    constructor(){\r\n        super(\"smoothstep\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        x = Math.max(Math.min(1,x),0);\r\n        return x*x*(3-2*x);\r\n    }\r\n    exec(args:number[]){\r\n        return smoothstep.call(args[0]);\r\n    }\r\n    /*static der(args:Expression[]){\r\n        let x = args[0];\r\n        return new \r\n        x = Math.max(Math.min(1,x),0);\r\n        return new Constant(6*x*(1-x));\r\n    }*/\r\n};\r\nclass e extends FunctionDef{\r\n    constructor(){\r\n        super(\"e\",0,[]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.E;\r\n    }\r\n};\r\nclass pi extends FunctionDef{\r\n    constructor(){\r\n        super(\"pi\",0,[]);\r\n    }\r\n    exec(args:number[]){\r\n        return Math.PI;\r\n    }\r\n};\r\nclass floor extends FunctionDef{\r\n    constructor(){\r\n        super(\"floor\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        return Math.floor(x);\r\n    }\r\n    exec(args:number[]){\r\n        return floor.call(args[0]);\r\n    }\r\n}\r\nclass ceil extends FunctionDef{\r\n    constructor(){\r\n        super(\"ceil\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        return Math.ceil(x);\r\n    }\r\n    exec(args:number[]){\r\n        return ceil.call(args[0]);\r\n    }\r\n}\r\nclass round extends FunctionDef{\r\n    constructor(){\r\n        super(\"round\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        return Math.round(x);\r\n    }\r\n    exec(args:number[]){\r\n        return round.call(args[0]);\r\n    }\r\n}\r\nclass lerp extends FunctionDef{\r\n    constructor(){\r\n        super(\"lerp\",3,[lerp.derX,lerp.derY,lerp.derT]);\r\n    }\r\n    static call(x:number,y:number,t:number):number{\r\n        return x*(1-t)+y*t;\r\n    }\r\n    exec(args:number[]){\r\n        return lerp.call(args[0],args[1],args[2]);\r\n    }\r\n    static derX(args:Expression[]){\r\n        return new Subtraction(new Constant(1),args[2]);\r\n    }\r\n    static derY(args:Expression[]){\r\n        return args[2];\r\n    }\r\n    static derT(args:Expression[]){\r\n        return new Subtraction(args[1],args[0]);\r\n    }\r\n}\r\nclass clamp extends FunctionDef{\r\n    constructor(){\r\n        super(\"clamp\",3,null);\r\n    }\r\n    static call(x:number,min:number,max:number):number{\r\n        return Math.max(min,Math.min(x,max));\r\n    }\r\n    exec(args:number[]){\r\n        return clamp.call(args[0],args[1],args[2]);\r\n    }\r\n}\r\nclass saturate extends FunctionDef{\r\n    constructor(){\r\n        super(\"saturate\",1,null);\r\n    }\r\n    static call(x:number):number{\r\n        return Math.max(0,Math.min(x,1));\r\n    }\r\n    exec(args:number[]){\r\n        return saturate.call(args[0]);\r\n    }\r\n}\r\n\r\nexport var functionDictionary:Record<string,FunctionDef> = {\r\n    sin:new sin(),\r\n    cos:new cos(),\r\n    tan:new tan(),\r\n    cot:new cot(),\r\n    asin:new asin(),\r\n    acos:new acos(),\r\n    atan:new atan(),\r\n    acot:new acot(),\r\n    sinh:new sinh(),\r\n    cosh:new cosh(),\r\n    tanh:new tanh(),\r\n    coth:new coth(),\r\n    asinh:new asinh(),\r\n    acosh:new acosh(),\r\n    atanh:new atanh(),\r\n    acoth:new acoth(),\r\n    erf:new erf(),\r\n    exp:new exp(),\r\n    pow:new pow(),\r\n    ln:new ln(),\r\n    log:new log(),\r\n    lg:new lg(),\r\n    sqrt:new sqrt(),\r\n    abs:new abs(),\r\n    min:new min(),\r\n    max:new max(),\r\n    lerp:new lerp(),\r\n    clamp:new clamp(),\r\n    saturate:new saturate(),\r\n    sign:new sign(),\r\n    step:new step(),\r\n    frac:new frac(),\r\n    floor:new floor(),\r\n    round:new round(),\r\n    ceil:new ceil(),\r\n    smoothstep:new smoothstep(),\r\n    e:new e(),\r\n    pi:new pi(),\r\n    sinc:new sinc(),\r\n    squarewave:new squarewave()\r\n};","// Generated from e:\\projects\\evalExp\\src\\grammar\\expGrammar.g4 by ANTLR 4.8\r\n// jshint ignore: start\r\nvar antlr4 = require('antlr4/index');\r\n\r\n// This class defines a complete generic visitor for a parse tree produced by expGrammarParser.\r\n\r\nfunction expGrammarVisitor() {\r\n\tantlr4.tree.ParseTreeVisitor.call(this);\r\n\treturn this;\r\n}\r\n\r\nexpGrammarVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);\r\nexpGrammarVisitor.prototype.constructor = expGrammarVisitor;\r\n\r\n// Visit a parse tree produced by expGrammarParser#number.\r\nexpGrammarVisitor.prototype.visitNumber = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#BoolConstant.\r\nexpGrammarVisitor.prototype.visitBoolConstant = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#BoolUnaryOperator.\r\nexpGrammarVisitor.prototype.visitBoolUnaryOperator = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#BracketBoolExpression.\r\nexpGrammarVisitor.prototype.visitBracketBoolExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#BBoolBinaryOperator.\r\nexpGrammarVisitor.prototype.visitBBoolBinaryOperator = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#EBoolBinaryOperator.\r\nexpGrammarVisitor.prototype.visitEBoolBinaryOperator = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#BracketExpression.\r\nexpGrammarVisitor.prototype.visitBracketExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#BinaryOperatorExpression.\r\nexpGrammarVisitor.prototype.visitBinaryOperatorExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#FunctionExpression.\r\nexpGrammarVisitor.prototype.visitFunctionExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#UnaryOperatorExpression.\r\nexpGrammarVisitor.prototype.visitUnaryOperatorExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#ConstantExpression.\r\nexpGrammarVisitor.prototype.visitConstantExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#VariableExpression.\r\nexpGrammarVisitor.prototype.visitVariableExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#TernaryOperatorExpression.\r\nexpGrammarVisitor.prototype.visitTernaryOperatorExpression = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by expGrammarParser#functionArguments.\r\nexpGrammarVisitor.prototype.visitFunctionArguments = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n\r\nexports.expGrammarVisitor = expGrammarVisitor;","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Utils = require('./../Utils');\nvar Token = require('./../Token').Token;\nvar RuleNode = require('./Tree').RuleNode;\nvar ErrorNode = require('./Tree').ErrorNode;\nvar TerminalNode = require('./Tree').TerminalNode;\nvar ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;\nvar RuleContext = require('./../RuleContext').RuleContext;\nvar INVALID_ALT_NUMBER = require('./../atn/ATN').INVALID_ALT_NUMBER;\n\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nfunction Trees() {\n}\n\n// Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n//  node payloads to get the text for the nodes.  Detect\n//  parse trees and extract data appropriately.\nTrees.toStringTree = function(tree, ruleNames, recog) {\n\truleNames = ruleNames || null;\n\trecog = recog || null;\n    if(recog!==null) {\n       ruleNames = recog.ruleNames;\n    }\n    var s = Trees.getNodeText(tree, ruleNames);\n    s = Utils.escapeWhitespace(s, false);\n    var c = tree.getChildCount();\n    if(c===0) {\n        return s;\n    }\n    var res = \"(\" + s + ' ';\n    if(c>0) {\n        s = Trees.toStringTree(tree.getChild(0), ruleNames);\n        res = res.concat(s);\n    }\n    for(var i=1;i<c;i++) {\n        s = Trees.toStringTree(tree.getChild(i), ruleNames);\n        res = res.concat(' ' + s);\n    }\n    res = res.concat(\")\");\n    return res;\n};\n\nTrees.getNodeText = function(t, ruleNames, recog) {\n\truleNames = ruleNames || null;\n\trecog = recog || null;\n    if(recog!==null) {\n        ruleNames = recog.ruleNames;\n    }\n    if(ruleNames!==null) {\n       if (t instanceof RuleContext) {\n           var altNumber = t.getAltNumber();\n           if ( altNumber!=INVALID_ALT_NUMBER ) {\n               return ruleNames[t.ruleIndex]+\":\"+altNumber;\n           }\n           return ruleNames[t.ruleIndex];\n       } else if ( t instanceof ErrorNode) {\n           return t.toString();\n       } else if(t instanceof TerminalNode) {\n           if(t.symbol!==null) {\n               return t.symbol.text;\n           }\n       }\n    }\n    // no recog for rule names\n    var payload = t.getPayload();\n    if (payload instanceof Token ) {\n       return payload.text;\n    }\n    return t.getPayload().toString();\n};\n\n\n// Return ordered list of all children of this node\nTrees.getChildren = function(t) {\n\tvar list = [];\n\tfor(var i=0;i<t.getChildCount();i++) {\n\t\tlist.push(t.getChild(i));\n\t}\n\treturn list;\n};\n\n// Return a list of all ancestors of this node.  The first node of\n//  list is the root and the last is the parent of this node.\n//\nTrees.getAncestors = function(t) {\n    var ancestors = [];\n    t = t.getParent();\n    while(t!==null) {\n        ancestors = [t].concat(ancestors);\n        t = t.getParent();\n    }\n    return ancestors;\n};\n\nTrees.findAllTokenNodes = function(t, ttype) {\n    return Trees.findAllNodes(t, ttype, true);\n};\n\nTrees.findAllRuleNodes = function(t, ruleIndex) {\n\treturn Trees.findAllNodes(t, ruleIndex, false);\n};\n\nTrees.findAllNodes = function(t, index, findTokens) {\n\tvar nodes = [];\n\tTrees._findAllNodes(t, index, findTokens, nodes);\n\treturn nodes;\n};\n\nTrees._findAllNodes = function(t, index, findTokens, nodes) {\n\t// check this node (the root) first\n\tif(findTokens && (t instanceof TerminalNode)) {\n\t\tif(t.symbol.type===index) {\n\t\t\tnodes.push(t);\n\t\t}\n\t} else if(!findTokens && (t instanceof ParserRuleContext)) {\n\t\tif(t.ruleIndex===index) {\n\t\t\tnodes.push(t);\n\t\t}\n\t}\n\t// check children\n\tfor(var i=0;i<t.getChildCount();i++) {\n\t\tTrees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n\t}\n};\n\nTrees.descendants = function(t) {\n\tvar nodes = [t];\n    for(var i=0;i<t.getChildCount();i++) {\n        nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n    }\n    return nodes;\n};\n\n\nexports.Trees = Trees;","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Token = require('./../Token').Token;\nvar ATN = require('./ATN').ATN;\nvar ATNType = require('./ATNType').ATNType;\nvar ATNStates = require('./ATNState');\nvar ATNState = ATNStates.ATNState;\nvar BasicState = ATNStates.BasicState;\nvar DecisionState = ATNStates.DecisionState;\nvar BlockStartState = ATNStates.BlockStartState;\nvar BlockEndState = ATNStates.BlockEndState;\nvar LoopEndState = ATNStates.LoopEndState;\nvar RuleStartState = ATNStates.RuleStartState;\nvar RuleStopState = ATNStates.RuleStopState;\nvar TokensStartState = ATNStates.TokensStartState;\nvar PlusLoopbackState = ATNStates.PlusLoopbackState;\nvar StarLoopbackState = ATNStates.StarLoopbackState;\nvar StarLoopEntryState = ATNStates.StarLoopEntryState;\nvar PlusBlockStartState = ATNStates.PlusBlockStartState;\nvar StarBlockStartState = ATNStates.StarBlockStartState;\nvar BasicBlockStartState = ATNStates.BasicBlockStartState;\nvar Transitions = require('./Transition');\nvar Transition = Transitions.Transition;\nvar AtomTransition = Transitions.AtomTransition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar RangeTransition = Transitions.RangeTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar EpsilonTransition = Transitions.EpsilonTransition;\nvar WildcardTransition = Transitions.WildcardTransition;\nvar PredicateTransition = Transitions.PredicateTransition;\nvar PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\nvar Interval = require('./../IntervalSet').Interval;\nvar ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;\nvar LexerActions = require('./LexerAction');\nvar LexerActionType = LexerActions.LexerActionType;\nvar LexerSkipAction = LexerActions.LexerSkipAction;\nvar LexerChannelAction = LexerActions.LexerChannelAction;\nvar LexerCustomAction = LexerActions.LexerCustomAction;\nvar LexerMoreAction = LexerActions.LexerMoreAction;\nvar LexerTypeAction = LexerActions.LexerTypeAction;\nvar LexerPushModeAction = LexerActions.LexerPushModeAction;\nvar LexerPopModeAction = LexerActions.LexerPopModeAction;\nvar LexerModeAction = LexerActions.LexerModeAction;\n// This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\nvar BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n\n//\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\nvar ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n\n// This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\nvar SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];\n\nvar SERIALIZED_VERSION = 3;\n\n// This is the current serialized UUID.\nvar SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray( length, value) {\n\tvar tmp = [];\n\ttmp[length-1] = value;\n\treturn tmp.map(function(i) {return value;});\n}\n\nfunction ATNDeserializer (options) {\n\n    if ( options=== undefined || options === null ) {\n        options = ATNDeserializationOptions.defaultOptions;\n    }\n    this.deserializationOptions = options;\n    this.stateFactories = null;\n    this.actionFactories = null;\n\n    return this;\n}\n\n// Determines if a particular serialized representation of an ATN supports\n// a particular feature, identified by the {@link UUID} used for serializing\n// the ATN at the time the feature was first introduced.\n//\n// @param feature The {@link UUID} marking the first time the feature was\n// supported in the serialized ATN.\n// @param actualUuid The {@link UUID} of the actual serialized ATN which is\n// currently being deserialized.\n// @return {@code true} if the {@code actualUuid} value represents a\n// serialized ATN at or after the feature identified by {@code feature} was\n// introduced; otherwise, {@code false}.\n\nATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {\n    var idx1 = SUPPORTED_UUIDS.indexOf(feature);\n    if (idx1<0) {\n        return false;\n    }\n    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n    return idx2 >= idx1;\n};\n\nATNDeserializer.prototype.deserialize = function(data) {\n    this.reset(data);\n    this.checkVersion();\n    this.checkUUID();\n    var atn = this.readATN();\n    this.readStates(atn);\n    this.readRules(atn);\n    this.readModes(atn);\n    var sets = [];\n    // First, deserialize sets with 16-bit arguments <= U+FFFF.\n    this.readSets(atn, sets, this.readInt.bind(this));\n    // Next, if the ATN was serialized with the Unicode SMP feature,\n    // deserialize sets with 32-bit arguments <= U+10FFFF.\n    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n        this.readSets(atn, sets, this.readInt32.bind(this));\n    }\n    this.readEdges(atn, sets);\n    this.readDecisions(atn);\n    this.readLexerActions(atn);\n    this.markPrecedenceDecisions(atn);\n    this.verifyATN(atn);\n    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {\n        this.generateRuleBypassTransitions(atn);\n        // re-verify after modification\n        this.verifyATN(atn);\n    }\n    return atn;\n};\n\nATNDeserializer.prototype.reset = function(data) {\n\tvar adjust = function(c) {\n        var v = c.charCodeAt(0);\n        return v>1  ? v-2 : v + 65534;\n\t};\n    var temp = data.split(\"\").map(adjust);\n    // don't adjust the first value since that's the version number\n    temp[0] = data.charCodeAt(0);\n    this.data = temp;\n    this.pos = 0;\n};\n\nATNDeserializer.prototype.checkVersion = function() {\n    var version = this.readInt();\n    if ( version !== SERIALIZED_VERSION ) {\n        throw (\"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\");\n    }\n};\n\nATNDeserializer.prototype.checkUUID = function() {\n    var uuid = this.readUUID();\n    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {\n        throw (\"Could not deserialize ATN with UUID: \" + uuid +\n                        \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID);\n    }\n    this.uuid = uuid;\n};\n\nATNDeserializer.prototype.readATN = function() {\n    var grammarType = this.readInt();\n    var maxTokenType = this.readInt();\n    return new ATN(grammarType, maxTokenType);\n};\n\nATNDeserializer.prototype.readStates = function(atn) {\n\tvar j, pair, stateNumber;\n    var loopBackStateNumbers = [];\n    var endStateNumbers = [];\n    var nstates = this.readInt();\n    for(var i=0; i<nstates; i++) {\n        var stype = this.readInt();\n        // ignore bad type of states\n        if (stype===ATNState.INVALID_TYPE) {\n            atn.addState(null);\n            continue;\n        }\n        var ruleIndex = this.readInt();\n        if (ruleIndex === 0xFFFF) {\n            ruleIndex = -1;\n        }\n        var s = this.stateFactory(stype, ruleIndex);\n        if (stype === ATNState.LOOP_END) { // special case\n            var loopBackStateNumber = this.readInt();\n            loopBackStateNumbers.push([s, loopBackStateNumber]);\n        } else if(s instanceof BlockStartState) {\n            var endStateNumber = this.readInt();\n            endStateNumbers.push([s, endStateNumber]);\n        }\n        atn.addState(s);\n    }\n    // delay the assignment of loop back and end states until we know all the\n\t// state instances have been initialized\n    for (j=0; j<loopBackStateNumbers.length; j++) {\n        pair = loopBackStateNumbers[j];\n        pair[0].loopBackState = atn.states[pair[1]];\n    }\n\n    for (j=0; j<endStateNumbers.length; j++) {\n        pair = endStateNumbers[j];\n        pair[0].endState = atn.states[pair[1]];\n    }\n\n    var numNonGreedyStates = this.readInt();\n    for (j=0; j<numNonGreedyStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].nonGreedy = true;\n    }\n\n    var numPrecedenceStates = this.readInt();\n    for (j=0; j<numPrecedenceStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].isPrecedenceRule = true;\n    }\n};\n\nATNDeserializer.prototype.readRules = function(atn) {\n    var i;\n    var nrules = this.readInt();\n    if (atn.grammarType === ATNType.LEXER ) {\n        atn.ruleToTokenType = initArray(nrules, 0);\n    }\n    atn.ruleToStartState = initArray(nrules, 0);\n    for (i=0; i<nrules; i++) {\n        var s = this.readInt();\n        var startState = atn.states[s];\n        atn.ruleToStartState[i] = startState;\n        if ( atn.grammarType === ATNType.LEXER ) {\n            var tokenType = this.readInt();\n            if (tokenType === 0xFFFF) {\n                tokenType = Token.EOF;\n            }\n            atn.ruleToTokenType[i] = tokenType;\n        }\n    }\n    atn.ruleToStopState = initArray(nrules, 0);\n    for (i=0; i<atn.states.length; i++) {\n        var state = atn.states[i];\n        if (!(state instanceof RuleStopState)) {\n            continue;\n        }\n        atn.ruleToStopState[state.ruleIndex] = state;\n        atn.ruleToStartState[state.ruleIndex].stopState = state;\n    }\n};\n\nATNDeserializer.prototype.readModes = function(atn) {\n    var nmodes = this.readInt();\n    for (var i=0; i<nmodes; i++) {\n        var s = this.readInt();\n        atn.modeToStartState.push(atn.states[s]);\n    }\n};\n\nATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {\n    var m = this.readInt();\n    for (var i=0; i<m; i++) {\n        var iset = new IntervalSet();\n        sets.push(iset);\n        var n = this.readInt();\n        var containsEof = this.readInt();\n        if (containsEof!==0) {\n            iset.addOne(-1);\n        }\n        for (var j=0; j<n; j++) {\n            var i1 = readUnicode();\n            var i2 = readUnicode();\n            iset.addRange(i1, i2);\n        }\n    }\n};\n\nATNDeserializer.prototype.readEdges = function(atn, sets) {\n\tvar i, j, state, trans, target;\n    var nedges = this.readInt();\n    for (i=0; i<nedges; i++) {\n        var src = this.readInt();\n        var trg = this.readInt();\n        var ttype = this.readInt();\n        var arg1 = this.readInt();\n        var arg2 = this.readInt();\n        var arg3 = this.readInt();\n        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n        var srcState = atn.states[src];\n        srcState.addTransition(trans);\n    }\n    // edges for rule stop states can be derived, so they aren't serialized\n    for (i=0; i<atn.states.length; i++) {\n        state = atn.states[i];\n        for (j=0; j<state.transitions.length; j++) {\n            var t = state.transitions[j];\n            if (!(t instanceof RuleTransition)) {\n                continue;\n            }\n\t\t\tvar outermostPrecedenceReturn = -1;\n\t\t\tif (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n\t\t\t\tif (t.precedence === 0) {\n\t\t\t\t\toutermostPrecedenceReturn = t.target.ruleIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttrans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n        }\n    }\n\n    for (i=0; i<atn.states.length; i++) {\n        state = atn.states[i];\n        if (state instanceof BlockStartState) {\n            // we need to know the end state to set its start state\n            if (state.endState === null) {\n                throw (\"IllegalState\");\n            }\n            // block end states can only be associated to a single block start\n\t\t\t// state\n            if ( state.endState.startState !== null) {\n                throw (\"IllegalState\");\n            }\n            state.endState.startState = state;\n        }\n        if (state instanceof PlusLoopbackState) {\n            for (j=0; j<state.transitions.length; j++) {\n                target = state.transitions[j].target;\n                if (target instanceof PlusBlockStartState) {\n                    target.loopBackState = state;\n                }\n            }\n        } else if (state instanceof StarLoopbackState) {\n            for (j=0; j<state.transitions.length; j++) {\n                target = state.transitions[j].target;\n                if (target instanceof StarLoopEntryState) {\n                    target.loopBackState = state;\n                }\n            }\n        }\n    }\n};\n\nATNDeserializer.prototype.readDecisions = function(atn) {\n    var ndecisions = this.readInt();\n    for (var i=0; i<ndecisions; i++) {\n        var s = this.readInt();\n        var decState = atn.states[s];\n        atn.decisionToState.push(decState);\n        decState.decision = i;\n    }\n};\n\nATNDeserializer.prototype.readLexerActions = function(atn) {\n    if (atn.grammarType === ATNType.LEXER) {\n        var count = this.readInt();\n        atn.lexerActions = initArray(count, null);\n        for (var i=0; i<count; i++) {\n            var actionType = this.readInt();\n            var data1 = this.readInt();\n            if (data1 === 0xFFFF) {\n                data1 = -1;\n            }\n            var data2 = this.readInt();\n            if (data2 === 0xFFFF) {\n                data2 = -1;\n            }\n            var lexerAction = this.lexerActionFactory(actionType, data1, data2);\n            atn.lexerActions[i] = lexerAction;\n        }\n    }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {\n\tvar i;\n    var count = atn.ruleToStartState.length;\n    for(i=0; i<count; i++) {\n        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n    }\n    for(i=0; i<count; i++) {\n        this.generateRuleBypassTransition(atn, i);\n    }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {\n\tvar i, state;\n    var bypassStart = new BasicBlockStartState();\n    bypassStart.ruleIndex = idx;\n    atn.addState(bypassStart);\n\n    var bypassStop = new BlockEndState();\n    bypassStop.ruleIndex = idx;\n    atn.addState(bypassStop);\n\n    bypassStart.endState = bypassStop;\n    atn.defineDecisionState(bypassStart);\n\n    bypassStop.startState = bypassStart;\n\n    var excludeTransition = null;\n    var endState = null;\n\n    if (atn.ruleToStartState[idx].isPrecedenceRule) {\n        // wrap from the beginning of the rule to the StarLoopEntryState\n        endState = null;\n        for(i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            if (this.stateIsEndStateFor(state, idx)) {\n                endState = state;\n                excludeTransition = state.loopBackState.transitions[0];\n                break;\n            }\n        }\n        if (excludeTransition === null) {\n            throw (\"Couldn't identify final state of the precedence rule prefix section.\");\n        }\n    } else {\n        endState = atn.ruleToStopState[idx];\n    }\n\n    // all non-excluded transitions that currently target end state need to\n\t// target blockEnd instead\n    for(i=0; i<atn.states.length; i++) {\n        state = atn.states[i];\n        for(var j=0; j<state.transitions.length; j++) {\n            var transition = state.transitions[j];\n            if (transition === excludeTransition) {\n                continue;\n            }\n            if (transition.target === endState) {\n                transition.target = bypassStop;\n            }\n        }\n    }\n\n    // all transitions leaving the rule start state need to leave blockStart\n\t// instead\n    var ruleToStartState = atn.ruleToStartState[idx];\n    var count = ruleToStartState.transitions.length;\n    while ( count > 0) {\n        bypassStart.addTransition(ruleToStartState.transitions[count-1]);\n        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n    }\n    // link the new states\n    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n    bypassStop.addTransition(new EpsilonTransition(endState));\n\n    var matchState = new BasicState();\n    atn.addState(matchState);\n    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n    bypassStart.addTransition(new EpsilonTransition(matchState));\n};\n\nATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {\n    if ( state.ruleIndex !== idx) {\n        return null;\n    }\n    if (!( state instanceof StarLoopEntryState)) {\n        return null;\n    }\n    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n    if (!( maybeLoopEndState instanceof LoopEndState)) {\n        return null;\n    }\n    if (maybeLoopEndState.epsilonOnlyTransitions &&\n        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n        return state;\n    } else {\n        return null;\n    }\n};\n\n//\n// Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n// the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n// correct value.\n//\n// @param atn The ATN.\n//\nATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {\n\tfor(var i=0; i<atn.states.length; i++) {\n\t\tvar state = atn.states[i];\n\t\tif (!( state instanceof StarLoopEntryState)) {\n            continue;\n        }\n        // We analyze the ATN to determine if this ATN decision state is the\n        // decision for the closure block that determines whether a\n        // precedence rule should continue or complete.\n        //\n        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n            if (maybeLoopEndState instanceof LoopEndState) {\n                if ( maybeLoopEndState.epsilonOnlyTransitions &&\n                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n                    state.isPrecedenceDecision = true;\n                }\n            }\n        }\n\t}\n};\n\nATNDeserializer.prototype.verifyATN = function(atn) {\n    if (!this.deserializationOptions.verifyATN) {\n        return;\n    }\n    // verify assumptions\n\tfor(var i=0; i<atn.states.length; i++) {\n        var state = atn.states[i];\n        if (state === null) {\n            continue;\n        }\n        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n        if (state instanceof PlusBlockStartState) {\n            this.checkCondition(state.loopBackState !== null);\n        } else  if (state instanceof StarLoopEntryState) {\n            this.checkCondition(state.loopBackState !== null);\n            this.checkCondition(state.transitions.length === 2);\n            if (state.transitions[0].target instanceof StarBlockStartState) {\n                this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n                this.checkCondition(!state.nonGreedy);\n            } else if (state.transitions[0].target instanceof LoopEndState) {\n                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n                this.checkCondition(state.nonGreedy);\n            } else {\n                throw(\"IllegalState\");\n            }\n        } else if (state instanceof StarLoopbackState) {\n            this.checkCondition(state.transitions.length === 1);\n            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n        } else if (state instanceof LoopEndState) {\n            this.checkCondition(state.loopBackState !== null);\n        } else if (state instanceof RuleStartState) {\n            this.checkCondition(state.stopState !== null);\n        } else if (state instanceof BlockStartState) {\n            this.checkCondition(state.endState !== null);\n        } else if (state instanceof BlockEndState) {\n            this.checkCondition(state.startState !== null);\n        } else if (state instanceof DecisionState) {\n            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n        } else {\n            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));\n        }\n\t}\n};\n\nATNDeserializer.prototype.checkCondition = function(condition, message) {\n    if (!condition) {\n        if (message === undefined || message===null) {\n            message = \"IllegalState\";\n        }\n        throw (message);\n    }\n};\n\nATNDeserializer.prototype.readInt = function() {\n    return this.data[this.pos++];\n};\n\nATNDeserializer.prototype.readInt32 = function() {\n    var low = this.readInt();\n    var high = this.readInt();\n    return low | (high << 16);\n};\n\nATNDeserializer.prototype.readLong = function() {\n    var low = this.readInt32();\n    var high = this.readInt32();\n    return (low & 0x00000000FFFFFFFF) | (high << 32);\n};\n\nfunction createByteToHex() {\n\tvar bth = [];\n\tfor (var i = 0; i < 256; i++) {\n\t\tbth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n\t}\n\treturn bth;\n}\n\nvar byteToHex = createByteToHex();\n\nATNDeserializer.prototype.readUUID = function() {\n\tvar bb = [];\n\tfor(var i=7;i>=0;i--) {\n\t\tvar int = this.readInt();\n\t\t/* jshint bitwise: false */\n\t\tbb[(2*i)+1] = int & 0xFF;\n\t\tbb[2*i] = (int >> 8) & 0xFF;\n\t}\n    return byteToHex[bb[0]] + byteToHex[bb[1]] +\n    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +\n    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +\n    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +\n    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +\n    byteToHex[bb[10]] + byteToHex[bb[11]] +\n    byteToHex[bb[12]] + byteToHex[bb[13]] +\n    byteToHex[bb[14]] + byteToHex[bb[15]];\n};\n\nATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {\n    var target = atn.states[trg];\n    switch(type) {\n    case Transition.EPSILON:\n        return new EpsilonTransition(target);\n    case Transition.RANGE:\n        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n    case Transition.RULE:\n        return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n    case Transition.PREDICATE:\n        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n    case Transition.PRECEDENCE:\n        return new PrecedencePredicateTransition(target, arg1);\n    case Transition.ATOM:\n        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n    case Transition.ACTION:\n        return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n    case Transition.SET:\n        return new SetTransition(target, sets[arg1]);\n    case Transition.NOT_SET:\n        return new NotSetTransition(target, sets[arg1]);\n    case Transition.WILDCARD:\n        return new WildcardTransition(target);\n    default:\n        throw \"The specified transition type: \" + type + \" is not valid.\";\n    }\n};\n\nATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {\n    if (this.stateFactories === null) {\n        var sf = [];\n        sf[ATNState.INVALID_TYPE] = null;\n        sf[ATNState.BASIC] = function() { return new BasicState(); };\n        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };\n        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };\n        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };\n        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };\n        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };\n        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };\n        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };\n        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };\n        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };\n        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };\n        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };\n        this.stateFactories = sf;\n    }\n    if (type>this.stateFactories.length || this.stateFactories[type] === null) {\n        throw(\"The specified state type \" + type + \" is not valid.\");\n    } else {\n        var s = this.stateFactories[type]();\n        if (s!==null) {\n            s.ruleIndex = ruleIndex;\n            return s;\n        }\n    }\n};\n\nATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {\n    if (this.actionFactories === null) {\n        var af = [];\n        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };\n        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };\n        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };\n        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };\n        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };\n        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };\n        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };\n        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };\n        this.actionFactories = af;\n    }\n    if (type>this.actionFactories.length || this.actionFactories[type] === null) {\n        throw(\"The specified lexer action type \" + type + \" is not valid.\");\n    } else {\n        return this.actionFactories[type](data1, data2);\n    }\n};\n\n\nexports.ATNDeserializer = ATNDeserializer;","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction ATNDeserializationOptions(copyFrom) {\n\tif(copyFrom===undefined) {\n\t\tcopyFrom = null;\n\t}\n\tthis.readOnly = false;\n    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;\n    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;\n\n    return this;\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n//    def __setattr__(self, key, value):\n//        if key!=\"readOnly\" and self.readOnly:\n//            raise Exception(\"The object is read only.\")\n//        super(type(self), self).__setattr__(key,value)\n\nexports.ATNDeserializationOptions = ATNDeserializationOptions;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n //\n\nfunction LexerActionType() {\n}\n\nLexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.\nLexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.\nLexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.\nLexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.\nLexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.\nLexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.\nLexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.\nLexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.\n\nfunction LexerAction(action) {\n    this.actionType = action;\n    this.isPositionDependent = false;\n    return this;\n}\n\nLexerAction.prototype.hashCode = function() {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish()\n};\n\nLexerAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType);\n};\n\nLexerAction.prototype.equals = function(other) {\n    return this === other;\n};\n\n\n\n//\n// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n//\n// <p>The {@code skip} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerSkipAction() {\n\tLexerAction.call(this, LexerActionType.SKIP);\n\treturn this;\n}\n\nLexerSkipAction.prototype = Object.create(LexerAction.prototype);\nLexerSkipAction.prototype.constructor = LexerSkipAction;\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\nLexerSkipAction.prototype.execute = function(lexer) {\n    lexer.skip();\n};\n\nLexerSkipAction.prototype.toString = function() {\n\treturn \"skip\";\n};\n\n//  Implements the {@code type} lexer action by calling {@link Lexer//setType}\n// with the assigned type.\nfunction LexerTypeAction(type) {\n\tLexerAction.call(this, LexerActionType.TYPE);\n\tthis.type = type;\n\treturn this;\n}\n\nLexerTypeAction.prototype = Object.create(LexerAction.prototype);\nLexerTypeAction.prototype.constructor = LexerTypeAction;\n\nLexerTypeAction.prototype.execute = function(lexer) {\n    lexer.type = this.type;\n};\n\nLexerTypeAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.type);\n};\n\n\nLexerTypeAction.prototype.equals = function(other) {\n    if(this === other) {\n        return true;\n    } else if (! (other instanceof LexerTypeAction)) {\n        return false;\n    } else {\n        return this.type === other.type;\n    }\n};\n\nLexerTypeAction.prototype.toString = function() {\n    return \"type(\" + this.type + \")\";\n};\n\n// Implements the {@code pushMode} lexer action by calling\n// {@link Lexer//pushMode} with the assigned mode.\nfunction LexerPushModeAction(mode) {\n\tLexerAction.call(this, LexerActionType.PUSH_MODE);\n    this.mode = mode;\n    return this;\n}\n\nLexerPushModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPushModeAction.prototype.constructor = LexerPushModeAction;\n\n// <p>This action is implemented by calling {@link Lexer//pushMode} with the\n// value provided by {@link //getMode}.</p>\nLexerPushModeAction.prototype.execute = function(lexer) {\n    lexer.pushMode(this.mode);\n};\n\nLexerPushModeAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.mode);\n};\n\nLexerPushModeAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerPushModeAction)) {\n        return false;\n    } else {\n        return this.mode === other.mode;\n    }\n};\n\nLexerPushModeAction.prototype.toString = function() {\n\treturn \"pushMode(\" + this.mode + \")\";\n};\n\n\n// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n//\n// <p>The {@code popMode} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerPopModeAction() {\n\tLexerAction.call(this,LexerActionType.POP_MODE);\n\treturn this;\n}\n\nLexerPopModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPopModeAction.prototype.constructor = LexerPopModeAction;\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\nLexerPopModeAction.prototype.execute = function(lexer) {\n    lexer.popMode();\n};\n\nLexerPopModeAction.prototype.toString = function() {\n\treturn \"popMode\";\n};\n\n// Implements the {@code more} lexer action by calling {@link Lexer//more}.\n//\n// <p>The {@code more} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerMoreAction() {\n\tLexerAction.call(this, LexerActionType.MORE);\n\treturn this;\n}\n\nLexerMoreAction.prototype = Object.create(LexerAction.prototype);\nLexerMoreAction.prototype.constructor = LexerMoreAction;\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\nLexerMoreAction.prototype.execute = function(lexer) {\n    lexer.more();\n};\n\nLexerMoreAction.prototype.toString = function() {\n    return \"more\";\n};\n\n\n// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n// the assigned mode.\nfunction LexerModeAction(mode) {\n\tLexerAction.call(this, LexerActionType.MODE);\n    this.mode = mode;\n    return this;\n}\n\nLexerModeAction.prototype = Object.create(LexerAction.prototype);\nLexerModeAction.prototype.constructor = LexerModeAction;\n\n// <p>This action is implemented by calling {@link Lexer//mode} with the\n// value provided by {@link //getMode}.</p>\nLexerModeAction.prototype.execute = function(lexer) {\n    lexer.mode(this.mode);\n};\n\nLexerModeAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.mode);\n};\n\nLexerModeAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerModeAction)) {\n        return false;\n    } else {\n        return this.mode === other.mode;\n    }\n};\n\nLexerModeAction.prototype.toString = function() {\n    return \"mode(\" + this.mode + \")\";\n};\n\n// Executes a custom lexer action by calling {@link Recognizer//action} with the\n// rule and action indexes assigned to the custom action. The implementation of\n// a custom action is added to the generated code for the lexer in an override\n// of {@link Recognizer//action} when the grammar is compiled.\n//\n// <p>This class may represent embedded actions created with the <code>{...}</code>\n// syntax in ANTLR 4, as well as actions created for lexer commands where the\n// command argument could not be evaluated when the grammar was compiled.</p>\n\n\n    // Constructs a custom lexer action with the specified rule and action\n    // indexes.\n    //\n    // @param ruleIndex The rule index to use for calls to\n    // {@link Recognizer//action}.\n    // @param actionIndex The action index to use for calls to\n    // {@link Recognizer//action}.\n\nfunction LexerCustomAction(ruleIndex, actionIndex) {\n\tLexerAction.call(this, LexerActionType.CUSTOM);\n    this.ruleIndex = ruleIndex;\n    this.actionIndex = actionIndex;\n    this.isPositionDependent = true;\n    return this;\n}\n\nLexerCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerCustomAction.prototype.constructor = LexerCustomAction;\n\n// <p>Custom actions are implemented by calling {@link Lexer//action} with the\n// appropriate rule and action indexes.</p>\nLexerCustomAction.prototype.execute = function(lexer) {\n    lexer.action(null, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerCustomAction)) {\n        return false;\n    } else {\n        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n    }\n};\n\n// Implements the {@code channel} lexer action by calling\n// {@link Lexer//setChannel} with the assigned channel.\n// Constructs a new {@code channel} action with the specified channel value.\n// @param channel The channel value to pass to {@link Lexer//setChannel}.\nfunction LexerChannelAction(channel) {\n\tLexerAction.call(this, LexerActionType.CHANNEL);\n    this.channel = channel;\n    return this;\n}\n\nLexerChannelAction.prototype = Object.create(LexerAction.prototype);\nLexerChannelAction.prototype.constructor = LexerChannelAction;\n\n// <p>This action is implemented by calling {@link Lexer//setChannel} with the\n// value provided by {@link //getChannel}.</p>\nLexerChannelAction.prototype.execute = function(lexer) {\n    lexer._channel = this.channel;\n};\n\nLexerChannelAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.channel);\n};\n\nLexerChannelAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerChannelAction)) {\n        return false;\n    } else {\n        return this.channel === other.channel;\n    }\n};\n\nLexerChannelAction.prototype.toString = function() {\n    return \"channel(\" + this.channel + \")\";\n};\n\n// This implementation of {@link LexerAction} is used for tracking input offsets\n// for position-dependent actions within a {@link LexerActionExecutor}.\n//\n// <p>This action is not serialized as part of the ATN, and is only required for\n// position-dependent lexer actions which appear at a location other than the\n// end of a rule. For more information about DFA optimizations employed for\n// lexer actions, see {@link LexerActionExecutor//append} and\n// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n\n// Constructs a new indexed custom action by associating a character offset\n// with a {@link LexerAction}.\n//\n// <p>Note: This class is only required for lexer actions for which\n// {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n//\n// @param offset The offset into the input {@link CharStream}, relative to\n// the token start index, at which the specified lexer action should be\n// executed.\n// @param action The lexer action to execute at a particular offset in the\n// input {@link CharStream}.\nfunction LexerIndexedCustomAction(offset, action) {\n\tLexerAction.call(this, action.actionType);\n    this.offset = offset;\n    this.action = action;\n    this.isPositionDependent = true;\n    return this;\n}\n\nLexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;\n\n// <p>This method calls {@link //execute} on the result of {@link //getAction}\n// using the provided {@code lexer}.</p>\nLexerIndexedCustomAction.prototype.execute = function(lexer) {\n    // assume the input stream position was properly set by the calling code\n    this.action.execute(lexer);\n};\n\nLexerIndexedCustomAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.offset, this.action);\n};\n\nLexerIndexedCustomAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerIndexedCustomAction)) {\n        return false;\n    } else {\n        return this.offset === other.offset && this.action === other.action;\n    }\n};\n\n\nexports.LexerActionType = LexerActionType;\nexports.LexerSkipAction = LexerSkipAction;\nexports.LexerChannelAction = LexerChannelAction;\nexports.LexerCustomAction = LexerCustomAction;\nexports.LexerIndexedCustomAction = LexerIndexedCustomAction;\nexports.LexerMoreAction = LexerMoreAction;\nexports.LexerTypeAction = LexerTypeAction;\nexports.LexerPushModeAction = LexerPushModeAction;\nexports.LexerPopModeAction = LexerPopModeAction;\nexports.LexerModeAction = LexerModeAction;","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = require('./Token').Token;\nvar ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;\nvar ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;\n\nfunction Recognizer() {\n    this._listeners = [ ConsoleErrorListener.INSTANCE ];\n    this._interp = null;\n    this._stateNumber = -1;\n    return this;\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\n\nRecognizer.prototype.checkVersion = function(toolVersion) {\n    var runtimeVersion = \"4.8\";\n    if (runtimeVersion!==toolVersion) {\n        console.log(\"ANTLR runtime and generated code versions disagree: \"+runtimeVersion+\"!=\"+toolVersion);\n    }\n};\n\nRecognizer.prototype.addErrorListener = function(listener) {\n    this._listeners.push(listener);\n};\n\nRecognizer.prototype.removeErrorListeners = function() {\n    this._listeners = [];\n};\n\nRecognizer.prototype.getTokenTypeMap = function() {\n    var tokenNames = this.getTokenNames();\n    if (tokenNames===null) {\n        throw(\"The current recognizer does not provide a list of token names.\");\n    }\n    var result = this.tokenTypeMapCache[tokenNames];\n    if(result===undefined) {\n        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });\n        result.EOF = Token.EOF;\n        this.tokenTypeMapCache[tokenNames] = result;\n    }\n    return result;\n};\n\n// Get a map from rule names to rule indexes.\n//\n// <p>Used for XPath and tree pattern compilation.</p>\n//\nRecognizer.prototype.getRuleIndexMap = function() {\n    var ruleNames = this.ruleNames;\n    if (ruleNames===null) {\n        throw(\"The current recognizer does not provide a list of rule names.\");\n    }\n    var result = this.ruleIndexMapCache[ruleNames];\n    if(result===undefined) {\n        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });\n        this.ruleIndexMapCache[ruleNames] = result;\n    }\n    return result;\n};\n\nRecognizer.prototype.getTokenType = function(tokenName) {\n    var ttype = this.getTokenTypeMap()[tokenName];\n    if (ttype !==undefined) {\n        return ttype;\n    } else {\n        return Token.INVALID_TYPE;\n    }\n};\n\n\n// What is the error header, normally line/character position information?//\nRecognizer.prototype.getErrorHeader = function(e) {\n    var line = e.getOffendingToken().line;\n    var column = e.getOffendingToken().column;\n    return \"line \" + line + \":\" + column;\n};\n\n\n// How should a token be displayed in an error message? The default\n//  is to display just the text, but during development you might\n//  want to have a lot of information spit out.  Override in that case\n//  to use t.toString() (which, for CommonToken, dumps everything about\n//  the token). This is better than forcing you to override a method in\n//  your token objects because you don't have to go modify your lexer\n//  so that it creates a new Java type.\n//\n// @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n// implementations of {@link ANTLRErrorStrategy} may provide a similar\n// feature when necessary. For example, see\n// {@link DefaultErrorStrategy//getTokenErrorDisplay}.\n//\nRecognizer.prototype.getTokenErrorDisplay = function(t) {\n    if (t===null) {\n        return \"<no token>\";\n    }\n    var s = t.text;\n    if (s===null) {\n        if (t.type===Token.EOF) {\n            s = \"<EOF>\";\n        } else {\n            s = \"<\" + t.type + \">\";\n        }\n    }\n    s = s.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\");\n    return \"'\" + s + \"'\";\n};\n\nRecognizer.prototype.getErrorListenerDispatch = function() {\n    return new ProxyErrorListener(this._listeners);\n};\n\n// subclass needs to override these if there are sempreds or actions\n// that the ATN interp needs to execute\nRecognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {\n    return true;\n};\n\nRecognizer.prototype.precpred = function(localctx , precedence) {\n    return true;\n};\n\n//Indicate that the recognizer has changed internal state that is\n//consistent with the ATN state passed in.  This way we always know\n//where we are in the ATN as the parser goes along. The rule\n//context objects form a stack that lets us see the stack of\n//invoking rules. Combine this and we have complete ATN\n//configuration information.\n\nObject.defineProperty(Recognizer.prototype, \"state\", {\n\tget : function() {\n\t\treturn this._stateNumber;\n\t},\n\tset : function(state) {\n\t\tthis._stateNumber = state;\n\t}\n});\n\n\nexports.Recognizer = Recognizer;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar DFAState = require('./../dfa/DFAState').DFAState;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar getCachedPredictionContext = require('./../PredictionContext').getCachedPredictionContext;\nvar Map = require('./../Utils').Map;\n\nfunction ATNSimulator(atn, sharedContextCache) {\n\n    // The context cache maps all PredictionContext objects that are ==\n    //  to a single cached copy. This cache is shared across all contexts\n    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n    //  to use only cached nodes/graphs in addDFAState(). We don't want to\n    //  fill this during closure() since there are lots of contexts that\n    //  pop up but are not used ever again. It also greatly slows down closure().\n    //\n    //  <p>This cache makes a huge difference in memory and a little bit in speed.\n    //  For the Java grammar on java.*, it dropped the memory requirements\n    //  at the end from 25M to 16M. We don't store any of the full context\n    //  graphs in the DFA because they are limited to local context only,\n    //  but apparently there's a lot of repetition there as well. We optimize\n    //  the config contexts before storing the config set in the DFA states\n    //  by literally rebuilding them with cached subgraphs only.</p>\n    //\n    //  <p>I tried a cache for use during closure operations, that was\n    //  whacked after each adaptivePredict(). It cost a little bit\n    //  more time I think and doesn't save on the overall footprint\n    //  so it's not worth the complexity.</p>\n    ///\n    this.atn = atn;\n    this.sharedContextCache = sharedContextCache;\n    return this;\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\n\nATNSimulator.prototype.getCachedContext = function(context) {\n    if (this.sharedContextCache ===null) {\n        return context;\n    }\n    var visited = new Map();\n    return getCachedPredictionContext(context, this.sharedContextCache, visited);\n};\n\nexports.ATNSimulator = ATNSimulator;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// This enumeration defines the prediction modes available in ANTLR 4 along with\n// utility methods for analyzing configuration sets for conflicts and/or\n// ambiguities.\n\nvar Set = require('./../Utils').Set;\nvar Map = require('./../Utils').Map;\nvar BitSet = require('./../Utils').BitSet;\nvar AltDict = require('./../Utils').AltDict;\nvar ATN = require('./ATN').ATN;\nvar RuleStopState = require('./ATNState').RuleStopState;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar ATNConfig = require('./ATNConfig').ATNConfig;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar Hash = require(\"../Utils\").Hash;\nvar hashStuff = require('./../Utils').hashStuff;\nvar equalArrays = require('./../Utils').equalArrays;\n\nfunction PredictionMode() {\n\treturn this;\n}\n\n//\n// The SLL(*) prediction mode. This prediction mode ignores the current\n// parser context when making predictions. This is the fastest prediction\n// mode, and provides correct results for many grammars. This prediction\n// mode is more powerful than the prediction mode provided by ANTLR 3, but\n// may result in syntax errors for grammar and input combinations which are\n// not SLL.\n//\n// <p>\n// When using this prediction mode, the parser will either return a correct\n// parse tree (i.e. the same parse tree that would be returned with the\n// {@link //LL} prediction mode), or it will report a syntax error. If a\n// syntax error is encountered when using the {@link //SLL} prediction mode,\n// it may be due to either an actual syntax error in the input or indicate\n// that the particular combination of grammar and input requires the more\n// powerful {@link //LL} prediction abilities to complete successfully.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.SLL = 0;\n//\n// The LL(*) prediction mode. This prediction mode allows the current parser\n// context to be used for resolving SLL conflicts that occur during\n// prediction. This is the fastest prediction mode that guarantees correct\n// parse results for all combinations of grammars with syntactically correct\n// inputs.\n//\n// <p>\n// When using this prediction mode, the parser will make correct decisions\n// for all syntactically-correct grammar and input combinations. However, in\n// cases where the grammar is truly ambiguous this prediction mode might not\n// report a precise answer for <em>exactly which</em> alternatives are\n// ambiguous.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.LL = 1;\n//\n// The LL(*) prediction mode with exact ambiguity detection. In addition to\n// the correctness guarantees provided by the {@link //LL} prediction mode,\n// this prediction mode instructs the prediction algorithm to determine the\n// complete and exact set of ambiguous alternatives for every ambiguous\n// decision encountered while parsing.\n//\n// <p>\n// This prediction mode may be used for diagnosing ambiguities during\n// grammar development. Due to the performance overhead of calculating sets\n// of ambiguous alternatives, this prediction mode should be avoided when\n// the exact results are not necessary.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.LL_EXACT_AMBIG_DETECTION = 2;\n\n\n//\n// Computes the SLL prediction termination condition.\n//\n// <p>\n// This method computes the SLL prediction termination condition for both of\n// the following cases.</p>\n//\n// <ul>\n// <li>The usual SLL+LL fallback upon SLL conflict</li>\n// <li>Pure SLL without LL fallback</li>\n// </ul>\n//\n// <p><strong>COMBINED SLL+LL PARSING</strong></p>\n//\n// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n// ensured regardless of how the termination condition is computed by this\n// method. Due to the substantially higher cost of LL prediction, the\n// prediction should only fall back to LL when the additional lookahead\n// cannot lead to a unique SLL prediction.</p>\n//\n// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n// conflicting subsets should fall back to full LL, even if the\n// configuration sets don't resolve to the same alternative (e.g.\n// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n// configuration, SLL could continue with the hopes that more lookahead will\n// resolve via one of those non-conflicting configurations.</p>\n//\n// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n// stops when it sees only conflicting configuration subsets. In contrast,\n// full LL keeps going when there is uncertainty.</p>\n//\n// <p><strong>HEURISTIC</strong></p>\n//\n// <p>As a heuristic, we stop prediction when we see any conflicting subset\n// unless we see a state that only has one alternative associated with it.\n// The single-alt-state thing lets prediction continue upon rules like\n// (otherwise, it would admit defeat too soon):</p>\n//\n// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n//\n// <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n// processing this node because alternative to has another way to continue,\n// via {@code [6|2|[]]}.</p>\n//\n// <p>It also let's us continue for this rule:</p>\n//\n// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n//\n// <p>After matching input A, we reach the stop state for rule A, state 1.\n// State 8 is the state right before B. Clearly alternatives 1 and 2\n// conflict and no amount of further lookahead will separate the two.\n// However, alternative 3 will be able to continue and so we do not stop\n// working on this state. In the previous example, we're concerned with\n// states associated with the conflicting alternatives. Here alt 3 is not\n// associated with the conflicting configs, but since we can continue\n// looking for input reasonably, don't declare the state done.</p>\n//\n// <p><strong>PURE SLL PARSING</strong></p>\n//\n// <p>To handle pure SLL parsing, all we have to do is make sure that we\n// combine stack contexts for configurations that differ only by semantic\n// predicate. From there, we can do the usual SLL termination heuristic.</p>\n//\n// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n//\n// <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n// states because they need to create the DFA cache that works in all\n// semantic situations. In contrast, full LL evaluates predicates collected\n// during start state computation so it can ignore predicates thereafter.\n// This means that SLL termination detection can totally ignore semantic\n// predicates.</p>\n//\n// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n// semantic predicate contexts so we might see two configurations like the\n// following.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n//\n// <p>Before testing these configurations against others, we have to merge\n// {@code x} and {@code x'} (without modifying the existing configurations).\n// For example, we test {@code (x+x')==x''} when looking for conflicts in\n// the following configurations.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n//\n// <p>If the configuration set has predicates (as indicated by\n// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n// the configurations to strip out all of the predicates so that a standard\n// {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n//\nPredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {\n    // Configs in rule stop states indicate reaching the end of the decision\n    // rule (local context) or end of start rule (full context). If all\n    // configs meet this condition, then none of the configurations is able\n    // to match additional input so we terminate prediction.\n    //\n    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return true;\n    }\n    // pure SLL mode parsing\n    if (mode === PredictionMode.SLL) {\n        // Don't bother with combining configs from different semantic\n        // contexts if we can fail over to full LL; costs more time\n        // since we'll often fail over anyway.\n        if (configs.hasSemanticContext) {\n            // dup configs, tossing out semantic predicates\n            var dup = new ATNConfigSet();\n            for(var i=0;i<configs.items.length;i++) {\n            \tvar c = configs.items[i];\n                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);\n                dup.add(c);\n            }\n            configs = dup;\n        }\n        // now we have combined contexts for configs with dissimilar preds\n    }\n    // pure SLL or combined SLL+LL mode parsing\n    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n};\n\n// Checks if any configuration in {@code configs} is in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if any configuration in {@code configs} is in a\n// {@link RuleStopState}, otherwise {@code false}\nPredictionMode.hasConfigInRuleStopState = function(configs) {\n\tfor(var i=0;i<configs.items.length;i++) {\n\t\tvar c = configs.items[i];\n        if (c.state instanceof RuleStopState) {\n            return true;\n        }\n\t}\n    return false;\n};\n\n// Checks if all configurations in {@code configs} are in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if all configurations in {@code configs} are in a\n// {@link RuleStopState}, otherwise {@code false}\nPredictionMode.allConfigsInRuleStopStates = function(configs) {\n\tfor(var i=0;i<configs.items.length;i++) {\n\t\tvar c = configs.items[i];\n        if (!(c.state instanceof RuleStopState)) {\n            return false;\n        }\n\t}\n    return true;\n};\n\n//\n// Full LL prediction termination.\n//\n// <p>Can we stop looking ahead during ATN simulation or is there some\n// uncertainty as to which alternative we will ultimately pick, after\n// consuming more input? Even if there are partial conflicts, we might know\n// that everything is going to resolve to the same minimum alternative. That\n// means we can stop since no more lookahead will change that fact. On the\n// other hand, there might be multiple conflicts that resolve to different\n// minimums. That means we need more look ahead to decide which of those\n// alternatives we should predict.</p>\n//\n// <p>The basic idea is to split the set of configurations {@code C}, into\n// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n// non-conflicting configurations. Two configurations conflict if they have\n// identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n//\n// <p>Reduce these configuration subsets to the set of possible alternatives.\n// You can compute the alternative subsets in one pass as follows:</p>\n//\n// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n// {@code C} holding {@code s} and {@code ctx} fixed.</p>\n//\n// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n//\n// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n//\n// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n// {@code s} and {@code ctx}.</p>\n//\n// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n// the union of these alternative subsets is a singleton, then no amount of\n// more lookahead will help us. We will always pick that alternative. If,\n// however, there is more than one alternative, then we are uncertain which\n// alternative to predict and must continue looking for resolution. We may\n// or may not discover an ambiguity in the future, even if there are no\n// conflicting subsets this round.</p>\n//\n// <p>The biggest sin is to terminate early because it means we've made a\n// decision but were uncertain as to the eventual outcome. We haven't used\n// enough lookahead. On the other hand, announcing a conflict too late is no\n// big deal; you will still have the conflict. It's just inefficient. It\n// might even look until the end of file.</p>\n//\n// <p>No special consideration for semantic predicates is required because\n// predicates are evaluated on-the-fly for full LL prediction, ensuring that\n// no configuration contains a semantic context during the termination\n// check.</p>\n//\n// <p><strong>CONFLICTING CONFIGS</strong></p>\n//\n// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n// when {@code i!=j} but {@code x=x'}. Because we merge all\n// {@code (s, i, _)} configurations together, that means that there are at\n// most {@code n} configurations associated with state {@code s} for\n// {@code n} possible alternatives in the decision. The merged stacks\n// complicate the comparison of configuration contexts {@code x} and\n// {@code x'}. Sam checks to see if one is a subset of the other by calling\n// merge and checking to see if the merged result is either {@code x} or\n// {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n// is the superset, then {@code i} is the only possible prediction since the\n// others resolve to {@code min(i)} as well. However, if {@code x} is\n// associated with {@code j>i} then at least one stack configuration for\n// {@code j} is not in conflict with alternative {@code i}. The algorithm\n// should keep going, looking for more lookahead due to the uncertainty.</p>\n//\n// <p>For simplicity, I'm doing a equality check between {@code x} and\n// {@code x'} that lets the algorithm continue to consume lookahead longer\n// than necessary. The reason I like the equality is of course the\n// simplicity but also because that is the test you need to detect the\n// alternatives that are actually in conflict.</p>\n//\n// <p><strong>CONTINUE/STOP RULE</strong></p>\n//\n// <p>Continue if union of resolved alternative sets from non-conflicting and\n// conflicting alternative subsets has more than one alternative. We are\n// uncertain about which alternative to predict.</p>\n//\n// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n// alternatives are still in the running for the amount of input we've\n// consumed at this point. The conflicting sets let us to strip away\n// configurations that won't lead to more states because we resolve\n// conflicts to the configuration with a minimum alternate for the\n// conflicting set.</p>\n//\n// <p><strong>CASES</strong></p>\n//\n// <ul>\n//\n// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n//\n// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1,3}} =&gt; continue\n// </li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1}} =&gt; stop and predict 1</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n// ambiguity {@code {1,2}}</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {2}} = {@code {1,2}} =&gt; continue</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {3}} = {@code {1,3}} =&gt; continue</li>\n//\n// </ul>\n//\n// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n//\n// <p>If all states report the same conflicting set of alternatives, then we\n// know we have the exact ambiguity set.</p>\n//\n// <p><code>|A_<em>i</em>|&gt;1</code> and\n// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n//\n// <p>In other words, we continue examining lookahead until all {@code A_i}\n// have more than one alternative and all {@code A_i} are the same. If\n// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n// because the resolved set is {@code {1}}. To determine what the real\n// ambiguity is, we have to know whether the ambiguity is between one and\n// two or one and three so we keep going. We can only stop prediction when\n// we need exact ambiguity detection when the sets look like\n// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n//\nPredictionMode.resolvesToJustOneViableAlt = function(altsets) {\n    return PredictionMode.getSingleViableAlt(altsets);\n};\n\n//\n// Determines if every alternative subset in {@code altsets} contains more\n// than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every {@link BitSet} in {@code altsets} has\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\nPredictionMode.allSubsetsConflict = function(altsets) {\n    return ! PredictionMode.hasNonConflictingAltSet(altsets);\n};\n//\n// Determines if any single alternative subset in {@code altsets} contains\n// exactly one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n//\nPredictionMode.hasNonConflictingAltSet = function(altsets) {\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        if (alts.length===1) {\n            return true;\n        }\n\t}\n    return false;\n};\n\n//\n// Determines if any single alternative subset in {@code altsets} contains\n// more than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\nPredictionMode.hasConflictingAltSet = function(altsets) {\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        if (alts.length>1) {\n            return true;\n        }\n\t}\n    return false;\n};\n\n//\n// Determines if every alternative subset in {@code altsets} is equivalent.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every member of {@code altsets} is equal to the\n// others, otherwise {@code false}\n//\nPredictionMode.allSubsetsEqual = function(altsets) {\n    var first = null;\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        if (first === null) {\n            first = alts;\n        } else if (alts!==first) {\n            return false;\n        }\n\t}\n    return true;\n};\n\n//\n// Returns the unique alternative predicted by all alternative subsets in\n// {@code altsets}. If no such alternative exists, this method returns\n// {@link ATN//INVALID_ALT_NUMBER}.\n//\n// @param altsets a collection of alternative subsets\n//\nPredictionMode.getUniqueAlt = function(altsets) {\n    var all = PredictionMode.getAlts(altsets);\n    if (all.length===1) {\n        return all.minValue();\n    } else {\n        return ATN.INVALID_ALT_NUMBER;\n    }\n};\n\n// Gets the complete set of represented alternatives for a collection of\n// alternative subsets. This method returns the union of each {@link BitSet}\n// in {@code altsets}.\n//\n// @param altsets a collection of alternative subsets\n// @return the set of represented alternatives in {@code altsets}\n//\nPredictionMode.getAlts = function(altsets) {\n    var all = new BitSet();\n    altsets.map( function(alts) { all.or(alts); });\n    return all;\n};\n\n//\n// This function gets the conflicting alt subsets from a configuration set.\n// For each configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n\nPredictionMode.getConflictingAltSubsets = function(configs) {\n    var configToAlts = new Map();\n    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };\n    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}\n    configs.items.map(function(cfg) {\n        var alts = configToAlts.get(cfg);\n        if (alts === null) {\n            alts = new BitSet();\n            configToAlts.put(cfg, alts);\n        }\n        alts.add(cfg.alt);\n\t});\n    return configToAlts.getValues();\n};\n\n//\n// Get a map from state to alt subset from a configuration set. For each\n// configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n// </pre>\n//\nPredictionMode.getStateToAltMap = function(configs) {\n    var m = new AltDict();\n    configs.items.map(function(c) {\n        var alts = m.get(c.state);\n        if (alts === null) {\n            alts = new BitSet();\n            m.put(c.state, alts);\n        }\n        alts.add(c.alt);\n    });\n    return m;\n};\n\nPredictionMode.hasStateAssociatedWithOneAlt = function(configs) {\n    var values = PredictionMode.getStateToAltMap(configs).values();\n    for(var i=0;i<values.length;i++) {\n        if (values[i].length===1) {\n            return true;\n        }\n    }\n    return false;\n};\n\nPredictionMode.getSingleViableAlt = function(altsets) {\n    var result = null;\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        var minAlt = alts.minValue();\n        if(result===null) {\n            result = minAlt;\n        } else if(result!==minAlt) { // more than 1 viable alt\n            return ATN.INVALID_ALT_NUMBER;\n        }\n\t}\n    return result;\n};\n\nexports.PredictionMode = PredictionMode;\n","/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? Number(position) : 0;\n\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n","/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar stringFromCharCode = String.fromCharCode;\n\t\tvar floor = Math.floor;\n\t\tvar fromCodePoint = function(_) {\n\t\t\tvar MAX_SIZE = 0x4000;\n\t\t\tvar codeUnits = [];\n\t\t\tvar highSurrogate;\n\t\t\tvar lowSurrogate;\n\t\t\tvar index = -1;\n\t\t\tvar length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tvar result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tvar codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.RecognitionException = require('./Errors').RecognitionException;\nexports.NoViableAltException = require('./Errors').NoViableAltException;\nexports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;\nexports.InputMismatchException = require('./Errors').InputMismatchException;\nexports.FailedPredicateException = require('./Errors').FailedPredicateException;\nexports.DiagnosticErrorListener = require('./DiagnosticErrorListener').DiagnosticErrorListener;\nexports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;\nexports.ErrorListener = require('./ErrorListener').ErrorListener;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = require('./../Token').Token;\nvar Errors = require('./Errors');\nvar NoViableAltException = Errors.NoViableAltException;\nvar InputMismatchException = Errors.InputMismatchException;\nvar FailedPredicateException = Errors.FailedPredicateException;\nvar ParseCancellationException = Errors.ParseCancellationException;\nvar ATNState = require('./../atn/ATNState').ATNState;\nvar Interval = require('./../IntervalSet').Interval;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\n\nfunction ErrorStrategy() {\n\n}\n\nErrorStrategy.prototype.reset = function(recognizer){\n};\n\nErrorStrategy.prototype.recoverInline = function(recognizer){\n};\n\nErrorStrategy.prototype.recover = function(recognizer, e){\n};\n\nErrorStrategy.prototype.sync = function(recognizer){\n};\n\nErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){\n};\n\nErrorStrategy.prototype.reportError = function(recognizer){\n};\n\n\n\n// This is the default implementation of {@link ANTLRErrorStrategy} used for\n// error reporting and recovery in ANTLR parsers.\n//\nfunction DefaultErrorStrategy() {\n\tErrorStrategy.call(this);\n    // Indicates whether the error strategy is currently \"recovering from an\n    // error\". This is used to suppress reporting multiple error messages while\n    // attempting to recover from a detected syntax error.\n    //\n    // @see //inErrorRecoveryMode\n    //\n    this.errorRecoveryMode = false;\n\n    // The index into the input stream where the last error occurred.\n    // This is used to prevent infinite loops where an error is found\n    // but no token is consumed during recovery...another error is found,\n    // ad nauseum. This is a failsafe mechanism to guarantee that at least\n    // one token/tree node is consumed for two errors.\n    //\n    this.lastErrorIndex = -1;\n    this.lastErrorStates = null;\n    return this;\n}\n\nDefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);\nDefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;\n\n// <p>The default implementation simply calls {@link //endErrorCondition} to\n// ensure that the handler is not in error recovery mode.</p>\nDefaultErrorStrategy.prototype.reset = function(recognizer) {\n    this.endErrorCondition(recognizer);\n};\n\n//\n// This method is called to enter error recovery mode when a recognition\n// exception is reported.\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {\n    this.errorRecoveryMode = true;\n};\n\nDefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {\n    return this.errorRecoveryMode;\n};\n\n//\n// This method is called to leave error recovery mode after recovering from\n// a recognition exception.\n//\n// @param recognizer\n//\nDefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {\n    this.errorRecoveryMode = false;\n    this.lastErrorStates = null;\n    this.lastErrorIndex = -1;\n};\n\n//\n// {@inheritDoc}\n//\n// <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n//\nDefaultErrorStrategy.prototype.reportMatch = function(recognizer) {\n    this.endErrorCondition(recognizer);\n};\n\n//\n// {@inheritDoc}\n//\n// <p>The default implementation returns immediately if the handler is already\n// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n// and dispatches the reporting task based on the runtime type of {@code e}\n// according to the following table.</p>\n//\n// <ul>\n// <li>{@link NoViableAltException}: Dispatches the call to\n// {@link //reportNoViableAlternative}</li>\n// <li>{@link InputMismatchException}: Dispatches the call to\n// {@link //reportInputMismatch}</li>\n// <li>{@link FailedPredicateException}: Dispatches the call to\n// {@link //reportFailedPredicate}</li>\n// <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n// the exception</li>\n// </ul>\n//\nDefaultErrorStrategy.prototype.reportError = function(recognizer, e) {\n   // if we've already reported an error and have not matched a token\n   // yet successfully, don't report any errors.\n    if(this.inErrorRecoveryMode(recognizer)) {\n        return; // don't report spurious errors\n    }\n    this.beginErrorCondition(recognizer);\n    if ( e instanceof NoViableAltException ) {\n        this.reportNoViableAlternative(recognizer, e);\n    } else if ( e instanceof InputMismatchException ) {\n        this.reportInputMismatch(recognizer, e);\n    } else if ( e instanceof FailedPredicateException ) {\n        this.reportFailedPredicate(recognizer, e);\n    } else {\n        console.log(\"unknown recognition error type: \" + e.constructor.name);\n        console.log(e.stack);\n        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n    }\n};\n//\n// {@inheritDoc}\n//\n// <p>The default implementation resynchronizes the parser by consuming tokens\n// until we find one in the resynchronization set--loosely the set of tokens\n// that can follow the current rule.</p>\n//\nDefaultErrorStrategy.prototype.recover = function(recognizer, e) {\n    if (this.lastErrorIndex===recognizer.getInputStream().index &&\n        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {\n\t\t// uh oh, another error at same token index and previously-visited\n\t\t// state in ATN; must be a case where LT(1) is in the recovery\n\t\t// token set so nothing got consumed. Consume a single token\n\t\t// at least to prevent an infinite loop; this is a failsafe.\n\t\trecognizer.consume();\n    }\n    this.lastErrorIndex = recognizer._input.index;\n    if (this.lastErrorStates === null) {\n        this.lastErrorStates = [];\n    }\n    this.lastErrorStates.push(recognizer.state);\n    var followSet = this.getErrorRecoverySet(recognizer);\n    this.consumeUntil(recognizer, followSet);\n};\n\n// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n// that the current lookahead symbol is consistent with what were expecting\n// at this point in the ATN. You can call this anytime but ANTLR only\n// generates code to check before subrules/loops and each iteration.\n//\n// <p>Implements Jim Idle's magic sync mechanism in closures and optional\n// subrules. E.g.,</p>\n//\n// <pre>\n// a : sync ( stuff sync )* ;\n// sync : {consume to what can follow sync} ;\n// </pre>\n//\n// At the start of a sub rule upon error, {@link //sync} performs single\n// token deletion, if possible. If it can't do that, it bails on the current\n// rule and uses the default error recovery, which consumes until the\n// resynchronization set of the current rule.\n//\n// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n// with an empty alternative), then the expected set includes what follows\n// the subrule.</p>\n//\n// <p>During loop iteration, it consumes until it sees a token that can start a\n// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n// stay in the loop as long as possible.</p>\n//\n// <p><strong>ORIGINS</strong></p>\n//\n// <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n// A single mismatch token or missing token would force the parser to bail\n// out of the entire rules surrounding the loop. So, for rule</p>\n//\n// <pre>\n// classDef : 'class' ID '{' member* '}'\n// </pre>\n//\n// input with an extra token between members would force the parser to\n// consume until it found the next class definition rather than the next\n// member definition of the current class.\n//\n// <p>This functionality cost a little bit of effort because the parser has to\n// compare token set at the start of the loop and at each iteration. If for\n// some reason speed is suffering for you, you can turn off this\n// functionality by simply overriding this method as a blank { }.</p>\n//\nDefaultErrorStrategy.prototype.sync = function(recognizer) {\n    // If already recovering, don't try to sync\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    var s = recognizer._interp.atn.states[recognizer.state];\n    var la = recognizer.getTokenStream().LA(1);\n    // try cheaper subset first; might get lucky. seems to shave a wee bit off\n    var nextTokens = recognizer.atn.nextTokens(s);\n    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {\n        return;\n    }\n    switch (s.stateType) {\n    case ATNState.BLOCK_START:\n    case ATNState.STAR_BLOCK_START:\n    case ATNState.PLUS_BLOCK_START:\n    case ATNState.STAR_LOOP_ENTRY:\n       // report error and recover if possible\n        if( this.singleTokenDeletion(recognizer) !== null) {\n            return;\n        } else {\n            throw new InputMismatchException(recognizer);\n        }\n        break;\n    case ATNState.PLUS_LOOP_BACK:\n    case ATNState.STAR_LOOP_BACK:\n        this.reportUnwantedToken(recognizer);\n        var expecting = new IntervalSet();\n        expecting.addSet(recognizer.getExpectedTokens());\n        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n        break;\n    default:\n        // do nothing if we can't identify the exact kind of ATN state\n    }\n};\n\n// This is called by {@link //reportError} when the exception is a\n// {@link NoViableAltException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {\n    var tokens = recognizer.getTokenStream();\n    var input;\n    if(tokens !== null) {\n        if (e.startToken.type===Token.EOF) {\n            input = \"<EOF>\";\n        } else {\n            input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n        }\n    } else {\n        input = \"<unknown input>\";\n    }\n    var msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n//\n// This is called by {@link //reportError} when the exception is an\n// {@link InputMismatchException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {\n    var msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) +\n          \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n//\n// This is called by {@link //reportError} when the exception is a\n// {@link FailedPredicateException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {\n    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];\n    var msg = \"rule \" + ruleName + \" \" + e.message;\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n// This method is called to report a syntax error which requires the removal\n// of a token from the input stream. At the time this method is called, the\n// erroneous symbol is current {@code LT(1)} symbol and has not yet been\n// removed from the input stream. When this method returns,\n// {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenDeletion} identifies\n// single-token deletion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    this.beginErrorCondition(recognizer);\n    var t = recognizer.getCurrentToken();\n    var tokenName = this.getTokenErrorDisplay(t);\n    var expecting = this.getExpectedTokens(recognizer);\n    var msg = \"extraneous input \" + tokenName + \" expecting \" +\n        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);\n    recognizer.notifyErrorListeners(msg, t, null);\n};\n// This method is called to report a syntax error which requires the\n// insertion of a missing token into the input stream. At the time this\n// method is called, the missing token has not yet been inserted. When this\n// method returns, {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenInsertion} identifies\n// single-token insertion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {\n    if ( this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    this.beginErrorCondition(recognizer);\n    var t = recognizer.getCurrentToken();\n    var expecting = this.getExpectedTokens(recognizer);\n    var msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +\n          \" at \" + this.getTokenErrorDisplay(t);\n    recognizer.notifyErrorListeners(msg, t, null);\n};\n\n// <p>The default implementation attempts to recover from the mismatched input\n// by using single token insertion and deletion as described below. If the\n// recovery attempt fails, this method throws an\n// {@link InputMismatchException}.</p>\n//\n// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n//\n// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n// right token, however, then assume {@code LA(1)} is some extra spurious\n// token and delete it. Then consume and return the next token (which was\n// the {@code LA(2)} token) as the successful result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenDeletion}.</p>\n//\n// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n//\n// <p>If current token (at {@code LA(1)}) is consistent with what could come\n// after the expected {@code LA(1)} token, then assume the token is missing\n// and use the parser's {@link TokenFactory} to create it on the fly. The\n// \"insertion\" is performed by returning the created token as the successful\n// result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenInsertion}.</p>\n//\n// <p><strong>EXAMPLE</strong></p>\n//\n// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n// the parser returns from the nested call to {@code expr}, it will have\n// call chain:</p>\n//\n// <pre>\n// stat &rarr; expr &rarr; atom\n// </pre>\n//\n// and it will be trying to match the {@code ')'} at this point in the\n// derivation:\n//\n// <pre>\n// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n// ^\n// </pre>\n//\n// The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n// is in the set of tokens that can follow the {@code ')'} token reference\n// in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n//\nDefaultErrorStrategy.prototype.recoverInline = function(recognizer) {\n    // SINGLE TOKEN DELETION\n    var matchedSymbol = this.singleTokenDeletion(recognizer);\n    if (matchedSymbol !== null) {\n        // we have deleted the extra token.\n        // now, move past ttype token as if all were ok\n        recognizer.consume();\n        return matchedSymbol;\n    }\n    // SINGLE TOKEN INSERTION\n    if (this.singleTokenInsertion(recognizer)) {\n        return this.getMissingSymbol(recognizer);\n    }\n    // even that didn't work; must throw the exception\n    throw new InputMismatchException(recognizer);\n};\n\n//\n// This method implements the single-token insertion inline error recovery\n// strategy. It is called by {@link //recoverInline} if the single-token\n// deletion strategy fails to recover from the mismatched input. If this\n// method returns {@code true}, {@code recognizer} will be in error recovery\n// mode.\n//\n// <p>This method determines whether or not single-token insertion is viable by\n// checking if the {@code LA(1)} input symbol could be successfully matched\n// if it were instead the {@code LA(2)} symbol. If this method returns\n// {@code true}, the caller is responsible for creating and inserting a\n// token with the correct type to produce this behavior.</p>\n//\n// @param recognizer the parser instance\n// @return {@code true} if single-token insertion is a viable recovery\n// strategy for the current mismatched input, otherwise {@code false}\n//\nDefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {\n    var currentSymbolType = recognizer.getTokenStream().LA(1);\n    // if current token is consistent with what could come after current\n    // ATN state, then we know we're missing a token; error recovery\n    // is free to conjure up and insert the missing token\n    var atn = recognizer._interp.atn;\n    var currentState = atn.states[recognizer.state];\n    var next = currentState.transitions[0].target;\n    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);\n    if (expectingAtLL2.contains(currentSymbolType) ){\n        this.reportMissingToken(recognizer);\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// This method implements the single-token deletion inline error recovery\n// strategy. It is called by {@link //recoverInline} to attempt to recover\n// from mismatched input. If this method returns null, the parser and error\n// handler state will not have changed. If this method returns non-null,\n// {@code recognizer} will <em>not</em> be in error recovery mode since the\n// returned token was a successful match.\n//\n// <p>If the single-token deletion is successful, this method calls\n// {@link //reportUnwantedToken} to report the error, followed by\n// {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n// before returning {@link //reportMatch} is called to signal a successful\n// match.</p>\n//\n// @param recognizer the parser instance\n// @return the successfully matched {@link Token} instance if single-token\n// deletion successfully recovers from the mismatched input, otherwise\n// {@code null}\n//\nDefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {\n    var nextTokenType = recognizer.getTokenStream().LA(2);\n    var expecting = this.getExpectedTokens(recognizer);\n    if (expecting.contains(nextTokenType)) {\n        this.reportUnwantedToken(recognizer);\n        // print(\"recoverFromMismatchedToken deleting \" \\\n        // + str(recognizer.getTokenStream().LT(1)) \\\n        // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n        // + \" is what we want\", file=sys.stderr)\n        recognizer.consume(); // simply delete extra token\n        // we want to return the token we're actually matching\n        var matchedSymbol = recognizer.getCurrentToken();\n        this.reportMatch(recognizer); // we know current token is correct\n        return matchedSymbol;\n    } else {\n        return null;\n    }\n};\n\n// Conjure up a missing token during error recovery.\n//\n// The recognizer attempts to recover from single missing\n// symbols. But, actions might refer to that missing symbol.\n// For example, x=ID {f($x);}. The action clearly assumes\n// that there has been an identifier matched previously and that\n// $x points at that token. If that token is missing, but\n// the next token in the stream is what we want we assume that\n// this token is missing and we keep going. Because we\n// have to return some token to replace the missing token,\n// we have to conjure one up. This method gives the user control\n// over the tokens returned for missing tokens. Mostly,\n// you will want to create something special for identifier\n// tokens. For literals such as '{' and ',', the default\n// action in the parser or tree parser works. It simply creates\n// a CommonToken of the appropriate type. The text will be the token.\n// If you change what tokens must be created by the lexer,\n// override this method to create the appropriate tokens.\n//\nDefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {\n    var currentSymbol = recognizer.getCurrentToken();\n    var expecting = this.getExpectedTokens(recognizer);\n    var expectedTokenType = expecting.first(); // get any element\n    var tokenText;\n    if (expectedTokenType===Token.EOF) {\n        tokenText = \"<missing EOF>\";\n    } else {\n        tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n    }\n    var current = currentSymbol;\n    var lookback = recognizer.getTokenStream().LT(-1);\n    if (current.type===Token.EOF && lookback !== null) {\n        current = lookback;\n    }\n    return recognizer.getTokenFactory().create(current.source,\n        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,\n        -1, -1, current.line, current.column);\n};\n\nDefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {\n    return recognizer.getExpectedTokens();\n};\n\n// How should a token be displayed in an error message? The default\n// is to display just the text, but during development you might\n// want to have a lot of information spit out. Override in that case\n// to use t.toString() (which, for CommonToken, dumps everything about\n// the token). This is better than forcing you to override a method in\n// your token objects because you don't have to go modify your lexer\n// so that it creates a new Java type.\n//\nDefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {\n    if (t === null) {\n        return \"<no token>\";\n    }\n    var s = t.text;\n    if (s === null) {\n        if (t.type===Token.EOF) {\n            s = \"<EOF>\";\n        } else {\n            s = \"<\" + t.type + \">\";\n        }\n    }\n    return this.escapeWSAndQuote(s);\n};\n\nDefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {\n    s = s.replace(/\\n/g,\"\\\\n\");\n    s = s.replace(/\\r/g,\"\\\\r\");\n    s = s.replace(/\\t/g,\"\\\\t\");\n    return \"'\" + s + \"'\";\n};\n\n// Compute the error recovery set for the current rule. During\n// rule invocation, the parser pushes the set of tokens that can\n// follow that rule reference on the stack; this amounts to\n// computing FIRST of what follows the rule reference in the\n// enclosing rule. See LinearApproximator.FIRST().\n// This local follow set only includes tokens\n// from within the rule; i.e., the FIRST computation done by\n// ANTLR stops at the end of a rule.\n//\n// EXAMPLE\n//\n// When you find a \"no viable alt exception\", the input is not\n// consistent with any of the alternatives for rule r. The best\n// thing to do is to consume tokens until you see something that\n// can legally follow a call to r//or* any rule that called r.\n// You don't want the exact set of viable next tokens because the\n// input might just be missing a token--you might consume the\n// rest of the input looking for one of the missing tokens.\n//\n// Consider grammar:\n//\n// a : '[' b ']'\n// | '(' b ')'\n// ;\n// b : c '^' INT ;\n// c : ID\n// | INT\n// ;\n//\n// At each rule invocation, the set of tokens that could follow\n// that rule is pushed on a stack. Here are the various\n// context-sensitive follow sets:\n//\n// FOLLOW(b1_in_a) = FIRST(']') = ']'\n// FOLLOW(b2_in_a) = FIRST(')') = ')'\n// FOLLOW(c_in_b) = FIRST('^') = '^'\n//\n// Upon erroneous input \"[]\", the call chain is\n//\n// a -> b -> c\n//\n// and, hence, the follow context stack is:\n//\n// depth follow set start of rule execution\n// 0 <EOF> a (from main())\n// 1 ']' b\n// 2 '^' c\n//\n// Notice that ')' is not included, because b would have to have\n// been called from a different context in rule a for ')' to be\n// included.\n//\n// For error recovery, we cannot consider FOLLOW(c)\n// (context-sensitive or otherwise). We need the combined set of\n// all context-sensitive FOLLOW sets--the set of all tokens that\n// could follow any reference in the call chain. We need to\n// resync to one of those tokens. Note that FOLLOW(c)='^' and if\n// we resync'd to that token, we'd consume until EOF. We need to\n// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n// In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n// not consume anything. After printing an error, rule c would\n// return normally. Rule b would not find the required '^' though.\n// At this point, it gets a mismatched token error and throws an\n// exception (since LA(1) is not in the viable following token\n// set). The rule exception handler tries to recover, but finds\n// the same recovery set and doesn't consume anything. Rule b\n// exits normally returning to rule a. Now it finds the ']' (and\n// with the successful match exits errorRecovery mode).\n//\n// So, you can see that the parser walks up the call chain looking\n// for the token that was a member of the recovery set.\n//\n// Errors are not generated in errorRecovery mode.\n//\n// ANTLR's error recovery mechanism is based upon original ideas:\n//\n// \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n//\n// and\n//\n// \"A note on error recovery in recursive descent parsers\":\n// http://portal.acm.org/citation.cfm?id=947902.947905\n//\n// Later, Josef Grosch had some good ideas:\n//\n// \"Efficient and Comfortable Error Recovery in Recursive Descent\n// Parsers\":\n// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n//\n// Like Grosch I implement context-sensitive FOLLOW sets that are combined\n// at run-time upon error to avoid overhead during parsing.\n//\nDefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {\n    var atn = recognizer._interp.atn;\n    var ctx = recognizer._ctx;\n    var recoverSet = new IntervalSet();\n    while (ctx !== null && ctx.invokingState>=0) {\n        // compute what follows who invoked us\n        var invokingState = atn.states[ctx.invokingState];\n        var rt = invokingState.transitions[0];\n        var follow = atn.nextTokens(rt.followState);\n        recoverSet.addSet(follow);\n        ctx = ctx.parentCtx;\n    }\n    recoverSet.removeOne(Token.EPSILON);\n    return recoverSet;\n};\n\n// Consume tokens until one matches the given token set.//\nDefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {\n    var ttype = recognizer.getTokenStream().LA(1);\n    while( ttype !== Token.EOF && !set.contains(ttype)) {\n        recognizer.consume();\n        ttype = recognizer.getTokenStream().LA(1);\n    }\n};\n\n//\n// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n// by immediately canceling the parse operation with a\n// {@link ParseCancellationException}. The implementation ensures that the\n// {@link ParserRuleContext//exception} field is set for all parse tree nodes\n// that were not completed prior to encountering the error.\n//\n// <p>\n// This error strategy is useful in the following scenarios.</p>\n//\n// <ul>\n// <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n// stage of two-stage parsing to immediately terminate if an error is\n// encountered, and immediately fall back to the second stage. In addition to\n// avoiding wasted work by attempting to recover from errors here, the empty\n// implementation of {@link BailErrorStrategy//sync} improves the performance of\n// the first stage.</li>\n// <li><strong>Silent validation:</strong> When syntax errors are not being\n// reported or logged, and the parse result is simply ignored if errors occur,\n// the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n// when the result will be ignored either way.</li>\n// </ul>\n//\n// <p>\n// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n//\n// @see Parser//setErrorHandler(ANTLRErrorStrategy)\n//\nfunction BailErrorStrategy() {\n\tDefaultErrorStrategy.call(this);\n\treturn this;\n}\n\nBailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);\nBailErrorStrategy.prototype.constructor = BailErrorStrategy;\n\n// Instead of recovering from exception {@code e}, re-throw it wrapped\n// in a {@link ParseCancellationException} so it is not caught by the\n// rule function catches. Use {@link Exception//getCause()} to get the\n// original {@link RecognitionException}.\n//\nBailErrorStrategy.prototype.recover = function(recognizer, e) {\n    var context = recognizer._ctx;\n    while (context !== null) {\n        context.exception = e;\n        context = context.parentCtx;\n    }\n    throw new ParseCancellationException(e);\n};\n\n// Make sure we don't attempt to recover inline; if the parser\n// successfully recovers, it won't throw an exception.\n//\nBailErrorStrategy.prototype.recoverInline = function(recognizer) {\n    this.recover(recognizer, new InputMismatchException(recognizer));\n};\n\n// Make sure we don't attempt to recover from problems in subrules.//\nBailErrorStrategy.prototype.sync = function(recognizer) {\n    // pass\n};\n\nexports.BailErrorStrategy = BailErrorStrategy;\nexports.DefaultErrorStrategy = DefaultErrorStrategy;\n","// Generated from e:\\projects\\evalExp\\src\\grammar\\expGrammar.g4 by ANTLR 4.8\r\n// jshint ignore: start\r\nvar antlr4 = require('antlr4/index');\r\nvar expGrammarVisitor = require('./expGrammarVisitor').expGrammarVisitor;\r\n\r\nvar grammarFileName = \"expGrammar.g4\";\r\n\r\n\r\nvar serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\",\r\n    \"\\u0003\\\"[\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0004\\u0004\\t\\u0004\",\r\n    \"\\u0004\\u0005\\t\\u0005\\u0003\\u0002\\u0003\\u0002\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0003\\u0003\\u0003\\u0003\\u0005\\u0003\\u001d\\n\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0007\\u0003%\",\r\n    \"\\n\\u0003\\f\\u0003\\u000e\\u0003(\\u000b\\u0003\\u0003\\u0004\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0005\\u0004@\\n\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0007\\u0004K\\n\\u0004\\f\\u0004\\u000e\\u0004N\\u000b\\u0004\\u0003\\u0005\",\r\n    \"\\u0003\\u0005\\u0003\\u0005\\u0007\\u0005S\\n\\u0005\\f\\u0005\\u000e\\u0005V\\u000b\",\r\n    \"\\u0005\\u0003\\u0005\\u0005\\u0005Y\\n\\u0005\\u0003\\u0005\\u0002\\u0004\\u0004\",\r\n    \"\\u0006\\u0006\\u0002\\u0004\\u0006\\b\\u0002\\b\\u0003\\u0002\\b\\t\\u0003\\u0002\",\r\n    \"\\u0014\\u0017\\u0003\\u0002\\u0018\\u0019\\u0003\\u0002\\u0003\\u0004\\u0003\\u0002\",\r\n    \"\\u000b\\f\\u0003\\u0002\\r\\u000e\\u0002f\\u0002\\n\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0004\\u001c\\u0003\\u0002\\u0002\\u0002\\u0006?\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\bX\\u0003\\u0002\\u0002\\u0002\\n\\u000b\\t\\u0002\\u0002\\u0002\\u000b\\u0003\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\f\\r\\b\\u0003\\u0001\\u0002\\r\\u000e\\u0007\\u000f\",\r\n    \"\\u0002\\u0002\\u000e\\u000f\\u0005\\u0004\\u0003\\u0002\\u000f\\u0010\\u0007\\u0010\",\r\n    \"\\u0002\\u0002\\u0010\\u001d\\u0003\\u0002\\u0002\\u0002\\u0011\\u0012\\u0007\\u0007\",\r\n    \"\\u0002\\u0002\\u0012\\u001d\\u0005\\u0004\\u0003\\b\\u0013\\u0014\\u0005\\u0006\",\r\n    \"\\u0004\\u0002\\u0014\\u0015\\t\\u0003\\u0002\\u0002\\u0015\\u0016\\u0005\\u0006\",\r\n    \"\\u0004\\u0002\\u0016\\u001d\\u0003\\u0002\\u0002\\u0002\\u0017\\u0018\\u0005\\u0006\",\r\n    \"\\u0004\\u0002\\u0018\\u0019\\t\\u0004\\u0002\\u0002\\u0019\\u001a\\u0005\\u0006\",\r\n    \"\\u0004\\u0002\\u001a\\u001d\\u0003\\u0002\\u0002\\u0002\\u001b\\u001d\\t\\u0005\",\r\n    \"\\u0002\\u0002\\u001c\\f\\u0003\\u0002\\u0002\\u0002\\u001c\\u0011\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u001c\\u0013\\u0003\\u0002\\u0002\\u0002\\u001c\\u0017\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u001c\\u001b\\u0003\\u0002\\u0002\\u0002\\u001d&\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u001e\\u001f\\f\\u0005\\u0002\\u0002\\u001f \\u0007\\u0006\\u0002\",\r\n    \"\\u0002 %\\u0005\\u0004\\u0003\\u0006!\\\"\\f\\u0004\\u0002\\u0002\\\"#\\u0007\\u0005\",\r\n    \"\\u0002\\u0002#%\\u0005\\u0004\\u0003\\u0005$\\u001e\\u0003\\u0002\\u0002\\u0002\",\r\n    \"$!\\u0003\\u0002\\u0002\\u0002%(\\u0003\\u0002\\u0002\\u0002&$\\u0003\\u0002\\u0002\",\r\n    \"\\u0002&\\'\\u0003\\u0002\\u0002\\u0002\\'\\u0005\\u0003\\u0002\\u0002\\u0002(&\",\r\n    \"\\u0003\\u0002\\u0002\\u0002)*\\b\\u0004\\u0001\\u0002*+\\u0007\\u000f\\u0002\\u0002\",\r\n    \"+,\\u0005\\u0006\\u0004\\u0002,-\\u0007\\u0010\\u0002\\u0002-@\\u0003\\u0002\\u0002\",\r\n    \"\\u0002./\\u0007\\n\\u0002\\u0002/0\\u0007\\u000f\\u0002\\u000201\\u0005\\b\\u0005\",\r\n    \"\\u000212\\u0007\\u0010\\u0002\\u00022@\\u0003\\u0002\\u0002\\u000234\\t\\u0006\",\r\n    \"\\u0002\\u00024@\\u0005\\u0006\\u0004\\b5@\\u0007\\n\\u0002\\u00026@\\u0005\\u0002\",\r\n    \"\\u0002\\u000278\\u0007\\u001c\\u0002\\u000289\\u0005\\u0004\\u0003\\u00029:\\u0007\",\r\n    \"\\u001f\\u0002\\u0002:;\\u0005\\u0006\\u0004\\u0002;<\\u0007\\u001b\\u0002\\u0002\",\r\n    \"<=\\u0005\\u0006\\u0004\\u0002=>\\u0007\\u001d\\u0002\\u0002>@\\u0003\\u0002\\u0002\",\r\n    \"\\u0002?)\\u0003\\u0002\\u0002\\u0002?.\\u0003\\u0002\\u0002\\u0002?3\\u0003\\u0002\",\r\n    \"\\u0002\\u0002?5\\u0003\\u0002\\u0002\\u0002?6\\u0003\\u0002\\u0002\\u0002?7\\u0003\",\r\n    \"\\u0002\\u0002\\u0002@L\\u0003\\u0002\\u0002\\u0002AB\\f\\t\\u0002\\u0002BC\\u0007\",\r\n    \"\\u0013\\u0002\\u0002CK\\u0005\\u0006\\u0004\\tDE\\f\\u0007\\u0002\\u0002EF\\t\\u0007\",\r\n    \"\\u0002\\u0002FK\\u0005\\u0006\\u0004\\bGH\\f\\u0006\\u0002\\u0002HI\\t\\u0006\\u0002\",\r\n    \"\\u0002IK\\u0005\\u0006\\u0004\\u0007JA\\u0003\\u0002\\u0002\\u0002JD\\u0003\\u0002\",\r\n    \"\\u0002\\u0002JG\\u0003\\u0002\\u0002\\u0002KN\\u0003\\u0002\\u0002\\u0002LJ\\u0003\",\r\n    \"\\u0002\\u0002\\u0002LM\\u0003\\u0002\\u0002\\u0002M\\u0007\\u0003\\u0002\\u0002\",\r\n    \"\\u0002NL\\u0003\\u0002\\u0002\\u0002OT\\u0005\\u0006\\u0004\\u0002PQ\\u0007\\u0012\",\r\n    \"\\u0002\\u0002QS\\u0005\\u0006\\u0004\\u0002RP\\u0003\\u0002\\u0002\\u0002SV\\u0003\",\r\n    \"\\u0002\\u0002\\u0002TR\\u0003\\u0002\\u0002\\u0002TU\\u0003\\u0002\\u0002\\u0002\",\r\n    \"UY\\u0003\\u0002\\u0002\\u0002VT\\u0003\\u0002\\u0002\\u0002WY\\u0003\\u0002\\u0002\",\r\n    \"\\u0002XO\\u0003\\u0002\\u0002\\u0002XW\\u0003\\u0002\\u0002\\u0002Y\\t\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\n\\u001c$&?JLTX\"].join(\"\");\r\n\r\n\r\nvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\r\n\r\nvar decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });\r\n\r\nvar sharedContextCache = new antlr4.PredictionContextCache();\r\n\r\nvar literalNames = [ null, \"'true'\", \"'false'\", null, null, null, null, \r\n                     null, null, \"'+'\", \"'-'\", \"'*'\", \"'/'\", \"'('\", \"')'\", \r\n                     \"'.'\", \"','\", \"'^'\", \"'<'\", \"'>'\", \"'<='\", \"'>='\", \r\n                     \"'!='\", \"'='\", \"';'\", \"':'\", \"'{'\", \"'}'\", \"'''\", \"'?'\" ];\r\n\r\nvar symbolicNames = [ null, \"TRUE\", \"FALSE\", \"OR\", \"AND\", \"NOT\", \"FLOAT\", \r\n                      \"INT\", \"ID\", \"PLUS\", \"MINUS\", \"ASTERISK\", \"DIVISION\", \r\n                      \"LPAREN\", \"RPAREN\", \"DOT\", \"COMMA\", \"CARET\", \"L\", \r\n                      \"G\", \"LE\", \"GE\", \"NE\", \"E\", \"SEMICOLON\", \"COLON\", \r\n                      \"LCRL\", \"RCRL\", \"APOSTROPHE\", \"QUESTIONMARK\", \"NEWLINE\", \r\n                      \"WHITESPACE\", \"COMMENT\" ];\r\n\r\nvar ruleNames =  [ \"number\", \"boolExpression\", \"expression\", \"functionArguments\" ];\r\n\r\nfunction expGrammarParser (input) {\r\n\tantlr4.Parser.call(this, input);\r\n    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\r\n    this.ruleNames = ruleNames;\r\n    this.literalNames = literalNames;\r\n    this.symbolicNames = symbolicNames;\r\n    return this;\r\n}\r\n\r\nexpGrammarParser.prototype = Object.create(antlr4.Parser.prototype);\r\nexpGrammarParser.prototype.constructor = expGrammarParser;\r\n\r\nObject.defineProperty(expGrammarParser.prototype, \"atn\", {\r\n\tget : function() {\r\n\t\treturn atn;\r\n\t}\r\n});\r\n\r\nexpGrammarParser.EOF = antlr4.Token.EOF;\r\nexpGrammarParser.TRUE = 1;\r\nexpGrammarParser.FALSE = 2;\r\nexpGrammarParser.OR = 3;\r\nexpGrammarParser.AND = 4;\r\nexpGrammarParser.NOT = 5;\r\nexpGrammarParser.FLOAT = 6;\r\nexpGrammarParser.INT = 7;\r\nexpGrammarParser.ID = 8;\r\nexpGrammarParser.PLUS = 9;\r\nexpGrammarParser.MINUS = 10;\r\nexpGrammarParser.ASTERISK = 11;\r\nexpGrammarParser.DIVISION = 12;\r\nexpGrammarParser.LPAREN = 13;\r\nexpGrammarParser.RPAREN = 14;\r\nexpGrammarParser.DOT = 15;\r\nexpGrammarParser.COMMA = 16;\r\nexpGrammarParser.CARET = 17;\r\nexpGrammarParser.L = 18;\r\nexpGrammarParser.G = 19;\r\nexpGrammarParser.LE = 20;\r\nexpGrammarParser.GE = 21;\r\nexpGrammarParser.NE = 22;\r\nexpGrammarParser.E = 23;\r\nexpGrammarParser.SEMICOLON = 24;\r\nexpGrammarParser.COLON = 25;\r\nexpGrammarParser.LCRL = 26;\r\nexpGrammarParser.RCRL = 27;\r\nexpGrammarParser.APOSTROPHE = 28;\r\nexpGrammarParser.QUESTIONMARK = 29;\r\nexpGrammarParser.NEWLINE = 30;\r\nexpGrammarParser.WHITESPACE = 31;\r\nexpGrammarParser.COMMENT = 32;\r\n\r\nexpGrammarParser.RULE_number = 0;\r\nexpGrammarParser.RULE_boolExpression = 1;\r\nexpGrammarParser.RULE_expression = 2;\r\nexpGrammarParser.RULE_functionArguments = 3;\r\n\r\n\r\nfunction NumberContext(parser, parent, invokingState) {\r\n\tif(parent===undefined) {\r\n\t    parent = null;\r\n\t}\r\n\tif(invokingState===undefined || invokingState===null) {\r\n\t\tinvokingState = -1;\r\n\t}\r\n\tantlr4.ParserRuleContext.call(this, parent, invokingState);\r\n    this.parser = parser;\r\n    this.ruleIndex = expGrammarParser.RULE_number;\r\n    this.value = null; // Token\r\n    return this;\r\n}\r\n\r\nNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\r\nNumberContext.prototype.constructor = NumberContext;\r\n\r\nNumberContext.prototype.FLOAT = function() {\r\n    return this.getToken(expGrammarParser.FLOAT, 0);\r\n};\r\n\r\nNumberContext.prototype.INT = function() {\r\n    return this.getToken(expGrammarParser.INT, 0);\r\n};\r\n\r\nNumberContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitNumber(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexpGrammarParser.NumberContext = NumberContext;\r\n\r\nexpGrammarParser.prototype.number = function() {\r\n\r\n    var localctx = new NumberContext(this, this._ctx, this.state);\r\n    this.enterRule(localctx, 0, expGrammarParser.RULE_number);\r\n    var _la = 0; // Token type\r\n    try {\r\n        this.enterOuterAlt(localctx, 1);\r\n        this.state = 8;\r\n        localctx.value = this._input.LT(1);\r\n        _la = this._input.LA(1);\r\n        if(!(_la===expGrammarParser.FLOAT || _la===expGrammarParser.INT)) {\r\n            localctx.value = this._errHandler.recoverInline(this);\r\n        }\r\n        else {\r\n        \tthis._errHandler.reportMatch(this);\r\n            this.consume();\r\n        }\r\n    } catch (re) {\r\n    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t        localctx.exception = re;\r\n\t        this._errHandler.reportError(this, re);\r\n\t        this._errHandler.recover(this, re);\r\n\t    } else {\r\n\t    \tthrow re;\r\n\t    }\r\n    } finally {\r\n        this.exitRule();\r\n    }\r\n    return localctx;\r\n};\r\n\r\n\r\nfunction BoolExpressionContext(parser, parent, invokingState) {\r\n\tif(parent===undefined) {\r\n\t    parent = null;\r\n\t}\r\n\tif(invokingState===undefined || invokingState===null) {\r\n\t\tinvokingState = -1;\r\n\t}\r\n\tantlr4.ParserRuleContext.call(this, parent, invokingState);\r\n    this.parser = parser;\r\n    this.ruleIndex = expGrammarParser.RULE_boolExpression;\r\n    return this;\r\n}\r\n\r\nBoolExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\r\nBoolExpressionContext.prototype.constructor = BoolExpressionContext;\r\n\r\n\r\n \r\nBoolExpressionContext.prototype.copyFrom = function(ctx) {\r\n    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\r\n};\r\n\r\nfunction BoolConstantContext(parser, ctx) {\r\n\tBoolExpressionContext.call(this, parser);\r\n    this.value = null; // Token;\r\n    BoolExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nBoolConstantContext.prototype = Object.create(BoolExpressionContext.prototype);\r\nBoolConstantContext.prototype.constructor = BoolConstantContext;\r\n\r\nexpGrammarParser.BoolConstantContext = BoolConstantContext;\r\n\r\nBoolConstantContext.prototype.TRUE = function() {\r\n    return this.getToken(expGrammarParser.TRUE, 0);\r\n};\r\n\r\nBoolConstantContext.prototype.FALSE = function() {\r\n    return this.getToken(expGrammarParser.FALSE, 0);\r\n};\r\nBoolConstantContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitBoolConstant(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction BoolUnaryOperatorContext(parser, ctx) {\r\n\tBoolExpressionContext.call(this, parser);\r\n    this.op = null; // Token;\r\n    BoolExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nBoolUnaryOperatorContext.prototype = Object.create(BoolExpressionContext.prototype);\r\nBoolUnaryOperatorContext.prototype.constructor = BoolUnaryOperatorContext;\r\n\r\nexpGrammarParser.BoolUnaryOperatorContext = BoolUnaryOperatorContext;\r\n\r\nBoolUnaryOperatorContext.prototype.boolExpression = function() {\r\n    return this.getTypedRuleContext(BoolExpressionContext,0);\r\n};\r\n\r\nBoolUnaryOperatorContext.prototype.NOT = function() {\r\n    return this.getToken(expGrammarParser.NOT, 0);\r\n};\r\nBoolUnaryOperatorContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitBoolUnaryOperator(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction BracketBoolExpressionContext(parser, ctx) {\r\n\tBoolExpressionContext.call(this, parser);\r\n    BoolExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nBracketBoolExpressionContext.prototype = Object.create(BoolExpressionContext.prototype);\r\nBracketBoolExpressionContext.prototype.constructor = BracketBoolExpressionContext;\r\n\r\nexpGrammarParser.BracketBoolExpressionContext = BracketBoolExpressionContext;\r\n\r\nBracketBoolExpressionContext.prototype.LPAREN = function() {\r\n    return this.getToken(expGrammarParser.LPAREN, 0);\r\n};\r\n\r\nBracketBoolExpressionContext.prototype.boolExpression = function() {\r\n    return this.getTypedRuleContext(BoolExpressionContext,0);\r\n};\r\n\r\nBracketBoolExpressionContext.prototype.RPAREN = function() {\r\n    return this.getToken(expGrammarParser.RPAREN, 0);\r\n};\r\nBracketBoolExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitBracketBoolExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction BBoolBinaryOperatorContext(parser, ctx) {\r\n\tBoolExpressionContext.call(this, parser);\r\n    this.left = null; // BoolExpressionContext;\r\n    this.op = null; // Token;\r\n    this.right = null; // BoolExpressionContext;\r\n    BoolExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nBBoolBinaryOperatorContext.prototype = Object.create(BoolExpressionContext.prototype);\r\nBBoolBinaryOperatorContext.prototype.constructor = BBoolBinaryOperatorContext;\r\n\r\nexpGrammarParser.BBoolBinaryOperatorContext = BBoolBinaryOperatorContext;\r\n\r\nBBoolBinaryOperatorContext.prototype.boolExpression = function(i) {\r\n    if(i===undefined) {\r\n        i = null;\r\n    }\r\n    if(i===null) {\r\n        return this.getTypedRuleContexts(BoolExpressionContext);\r\n    } else {\r\n        return this.getTypedRuleContext(BoolExpressionContext,i);\r\n    }\r\n};\r\n\r\nBBoolBinaryOperatorContext.prototype.AND = function() {\r\n    return this.getToken(expGrammarParser.AND, 0);\r\n};\r\n\r\nBBoolBinaryOperatorContext.prototype.OR = function() {\r\n    return this.getToken(expGrammarParser.OR, 0);\r\n};\r\nBBoolBinaryOperatorContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitBBoolBinaryOperator(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction EBoolBinaryOperatorContext(parser, ctx) {\r\n\tBoolExpressionContext.call(this, parser);\r\n    this.leftexp = null; // ExpressionContext;\r\n    this.op = null; // Token;\r\n    this.rightexp = null; // ExpressionContext;\r\n    BoolExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nEBoolBinaryOperatorContext.prototype = Object.create(BoolExpressionContext.prototype);\r\nEBoolBinaryOperatorContext.prototype.constructor = EBoolBinaryOperatorContext;\r\n\r\nexpGrammarParser.EBoolBinaryOperatorContext = EBoolBinaryOperatorContext;\r\n\r\nEBoolBinaryOperatorContext.prototype.expression = function(i) {\r\n    if(i===undefined) {\r\n        i = null;\r\n    }\r\n    if(i===null) {\r\n        return this.getTypedRuleContexts(ExpressionContext);\r\n    } else {\r\n        return this.getTypedRuleContext(ExpressionContext,i);\r\n    }\r\n};\r\n\r\nEBoolBinaryOperatorContext.prototype.L = function() {\r\n    return this.getToken(expGrammarParser.L, 0);\r\n};\r\n\r\nEBoolBinaryOperatorContext.prototype.LE = function() {\r\n    return this.getToken(expGrammarParser.LE, 0);\r\n};\r\n\r\nEBoolBinaryOperatorContext.prototype.G = function() {\r\n    return this.getToken(expGrammarParser.G, 0);\r\n};\r\n\r\nEBoolBinaryOperatorContext.prototype.GE = function() {\r\n    return this.getToken(expGrammarParser.GE, 0);\r\n};\r\n\r\nEBoolBinaryOperatorContext.prototype.E = function() {\r\n    return this.getToken(expGrammarParser.E, 0);\r\n};\r\n\r\nEBoolBinaryOperatorContext.prototype.NE = function() {\r\n    return this.getToken(expGrammarParser.NE, 0);\r\n};\r\nEBoolBinaryOperatorContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitEBoolBinaryOperator(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\n\r\nexpGrammarParser.prototype.boolExpression = function(_p) {\r\n\tif(_p===undefined) {\r\n\t    _p = 0;\r\n\t}\r\n    var _parentctx = this._ctx;\r\n    var _parentState = this.state;\r\n    var localctx = new BoolExpressionContext(this, this._ctx, _parentState);\r\n    var _prevctx = localctx;\r\n    var _startState = 2;\r\n    this.enterRecursionRule(localctx, 2, expGrammarParser.RULE_boolExpression, _p);\r\n    var _la = 0; // Token type\r\n    try {\r\n        this.enterOuterAlt(localctx, 1);\r\n        this.state = 26;\r\n        this._errHandler.sync(this);\r\n        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);\r\n        switch(la_) {\r\n        case 1:\r\n            localctx = new BracketBoolExpressionContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n\r\n            this.state = 11;\r\n            this.match(expGrammarParser.LPAREN);\r\n            this.state = 12;\r\n            this.boolExpression(0);\r\n            this.state = 13;\r\n            this.match(expGrammarParser.RPAREN);\r\n            break;\r\n\r\n        case 2:\r\n            localctx = new BoolUnaryOperatorContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 15;\r\n            localctx.op = this.match(expGrammarParser.NOT);\r\n            this.state = 16;\r\n            this.boolExpression(6);\r\n            break;\r\n\r\n        case 3:\r\n            localctx = new EBoolBinaryOperatorContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 17;\r\n            localctx.leftexp = this.expression(0);\r\n            this.state = 18;\r\n            localctx.op = this._input.LT(1);\r\n            _la = this._input.LA(1);\r\n            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << expGrammarParser.L) | (1 << expGrammarParser.G) | (1 << expGrammarParser.LE) | (1 << expGrammarParser.GE))) !== 0))) {\r\n                localctx.op = this._errHandler.recoverInline(this);\r\n            }\r\n            else {\r\n            \tthis._errHandler.reportMatch(this);\r\n                this.consume();\r\n            }\r\n            this.state = 19;\r\n            localctx.rightexp = this.expression(0);\r\n            break;\r\n\r\n        case 4:\r\n            localctx = new EBoolBinaryOperatorContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 21;\r\n            localctx.leftexp = this.expression(0);\r\n            this.state = 22;\r\n            localctx.op = this._input.LT(1);\r\n            _la = this._input.LA(1);\r\n            if(!(_la===expGrammarParser.NE || _la===expGrammarParser.E)) {\r\n                localctx.op = this._errHandler.recoverInline(this);\r\n            }\r\n            else {\r\n            \tthis._errHandler.reportMatch(this);\r\n                this.consume();\r\n            }\r\n            this.state = 23;\r\n            localctx.rightexp = this.expression(0);\r\n            break;\r\n\r\n        case 5:\r\n            localctx = new BoolConstantContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 25;\r\n            localctx.value = this._input.LT(1);\r\n            _la = this._input.LA(1);\r\n            if(!(_la===expGrammarParser.TRUE || _la===expGrammarParser.FALSE)) {\r\n                localctx.value = this._errHandler.recoverInline(this);\r\n            }\r\n            else {\r\n            \tthis._errHandler.reportMatch(this);\r\n                this.consume();\r\n            }\r\n            break;\r\n\r\n        }\r\n        this._ctx.stop = this._input.LT(-1);\r\n        this.state = 36;\r\n        this._errHandler.sync(this);\r\n        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)\r\n        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n            if(_alt===1) {\r\n                if(this._parseListeners!==null) {\r\n                    this.triggerExitRuleEvent();\r\n                }\r\n                _prevctx = localctx;\r\n                this.state = 34;\r\n                this._errHandler.sync(this);\r\n                var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);\r\n                switch(la_) {\r\n                case 1:\r\n                    localctx = new BBoolBinaryOperatorContext(this, new BoolExpressionContext(this, _parentctx, _parentState));\r\n                    localctx.left = _prevctx;\r\n                    this.pushNewRecursionContext(localctx, _startState, expGrammarParser.RULE_boolExpression);\r\n                    this.state = 28;\r\n                    if (!( this.precpred(this._ctx, 3))) {\r\n                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 3)\");\r\n                    }\r\n                    this.state = 29;\r\n                    localctx.op = this.match(expGrammarParser.AND);\r\n                    this.state = 30;\r\n                    localctx.right = this.boolExpression(4);\r\n                    break;\r\n\r\n                case 2:\r\n                    localctx = new BBoolBinaryOperatorContext(this, new BoolExpressionContext(this, _parentctx, _parentState));\r\n                    localctx.left = _prevctx;\r\n                    this.pushNewRecursionContext(localctx, _startState, expGrammarParser.RULE_boolExpression);\r\n                    this.state = 31;\r\n                    if (!( this.precpred(this._ctx, 2))) {\r\n                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 2)\");\r\n                    }\r\n                    this.state = 32;\r\n                    localctx.op = this.match(expGrammarParser.OR);\r\n                    this.state = 33;\r\n                    localctx.right = this.boolExpression(3);\r\n                    break;\r\n\r\n                } \r\n            }\r\n            this.state = 38;\r\n            this._errHandler.sync(this);\r\n            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);\r\n        }\r\n\r\n    } catch( error) {\r\n        if(error instanceof antlr4.error.RecognitionException) {\r\n\t        localctx.exception = error;\r\n\t        this._errHandler.reportError(this, error);\r\n\t        this._errHandler.recover(this, error);\r\n\t    } else {\r\n\t    \tthrow error;\r\n\t    }\r\n    } finally {\r\n        this.unrollRecursionContexts(_parentctx)\r\n    }\r\n    return localctx;\r\n};\r\n\r\n\r\nfunction ExpressionContext(parser, parent, invokingState) {\r\n\tif(parent===undefined) {\r\n\t    parent = null;\r\n\t}\r\n\tif(invokingState===undefined || invokingState===null) {\r\n\t\tinvokingState = -1;\r\n\t}\r\n\tantlr4.ParserRuleContext.call(this, parent, invokingState);\r\n    this.parser = parser;\r\n    this.ruleIndex = expGrammarParser.RULE_expression;\r\n    return this;\r\n}\r\n\r\nExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\r\nExpressionContext.prototype.constructor = ExpressionContext;\r\n\r\n\r\n \r\nExpressionContext.prototype.copyFrom = function(ctx) {\r\n    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\r\n};\r\n\r\nfunction BracketExpressionContext(parser, ctx) {\r\n\tExpressionContext.call(this, parser);\r\n    ExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nBracketExpressionContext.prototype = Object.create(ExpressionContext.prototype);\r\nBracketExpressionContext.prototype.constructor = BracketExpressionContext;\r\n\r\nexpGrammarParser.BracketExpressionContext = BracketExpressionContext;\r\n\r\nBracketExpressionContext.prototype.LPAREN = function() {\r\n    return this.getToken(expGrammarParser.LPAREN, 0);\r\n};\r\n\r\nBracketExpressionContext.prototype.expression = function() {\r\n    return this.getTypedRuleContext(ExpressionContext,0);\r\n};\r\n\r\nBracketExpressionContext.prototype.RPAREN = function() {\r\n    return this.getToken(expGrammarParser.RPAREN, 0);\r\n};\r\nBracketExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitBracketExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction BinaryOperatorExpressionContext(parser, ctx) {\r\n\tExpressionContext.call(this, parser);\r\n    this.left = null; // ExpressionContext;\r\n    this.op = null; // Token;\r\n    this.right = null; // ExpressionContext;\r\n    ExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nBinaryOperatorExpressionContext.prototype = Object.create(ExpressionContext.prototype);\r\nBinaryOperatorExpressionContext.prototype.constructor = BinaryOperatorExpressionContext;\r\n\r\nexpGrammarParser.BinaryOperatorExpressionContext = BinaryOperatorExpressionContext;\r\n\r\nBinaryOperatorExpressionContext.prototype.expression = function(i) {\r\n    if(i===undefined) {\r\n        i = null;\r\n    }\r\n    if(i===null) {\r\n        return this.getTypedRuleContexts(ExpressionContext);\r\n    } else {\r\n        return this.getTypedRuleContext(ExpressionContext,i);\r\n    }\r\n};\r\n\r\nBinaryOperatorExpressionContext.prototype.CARET = function() {\r\n    return this.getToken(expGrammarParser.CARET, 0);\r\n};\r\n\r\nBinaryOperatorExpressionContext.prototype.DIVISION = function() {\r\n    return this.getToken(expGrammarParser.DIVISION, 0);\r\n};\r\n\r\nBinaryOperatorExpressionContext.prototype.ASTERISK = function() {\r\n    return this.getToken(expGrammarParser.ASTERISK, 0);\r\n};\r\n\r\nBinaryOperatorExpressionContext.prototype.PLUS = function() {\r\n    return this.getToken(expGrammarParser.PLUS, 0);\r\n};\r\n\r\nBinaryOperatorExpressionContext.prototype.MINUS = function() {\r\n    return this.getToken(expGrammarParser.MINUS, 0);\r\n};\r\nBinaryOperatorExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitBinaryOperatorExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction FunctionExpressionContext(parser, ctx) {\r\n\tExpressionContext.call(this, parser);\r\n    this.func = null; // Token;\r\n    ExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nFunctionExpressionContext.prototype = Object.create(ExpressionContext.prototype);\r\nFunctionExpressionContext.prototype.constructor = FunctionExpressionContext;\r\n\r\nexpGrammarParser.FunctionExpressionContext = FunctionExpressionContext;\r\n\r\nFunctionExpressionContext.prototype.LPAREN = function() {\r\n    return this.getToken(expGrammarParser.LPAREN, 0);\r\n};\r\n\r\nFunctionExpressionContext.prototype.functionArguments = function() {\r\n    return this.getTypedRuleContext(FunctionArgumentsContext,0);\r\n};\r\n\r\nFunctionExpressionContext.prototype.RPAREN = function() {\r\n    return this.getToken(expGrammarParser.RPAREN, 0);\r\n};\r\n\r\nFunctionExpressionContext.prototype.ID = function() {\r\n    return this.getToken(expGrammarParser.ID, 0);\r\n};\r\nFunctionExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitFunctionExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction UnaryOperatorExpressionContext(parser, ctx) {\r\n\tExpressionContext.call(this, parser);\r\n    this.op = null; // Token;\r\n    ExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nUnaryOperatorExpressionContext.prototype = Object.create(ExpressionContext.prototype);\r\nUnaryOperatorExpressionContext.prototype.constructor = UnaryOperatorExpressionContext;\r\n\r\nexpGrammarParser.UnaryOperatorExpressionContext = UnaryOperatorExpressionContext;\r\n\r\nUnaryOperatorExpressionContext.prototype.expression = function() {\r\n    return this.getTypedRuleContext(ExpressionContext,0);\r\n};\r\n\r\nUnaryOperatorExpressionContext.prototype.PLUS = function() {\r\n    return this.getToken(expGrammarParser.PLUS, 0);\r\n};\r\n\r\nUnaryOperatorExpressionContext.prototype.MINUS = function() {\r\n    return this.getToken(expGrammarParser.MINUS, 0);\r\n};\r\nUnaryOperatorExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitUnaryOperatorExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction ConstantExpressionContext(parser, ctx) {\r\n\tExpressionContext.call(this, parser);\r\n    this.value = null; // NumberContext;\r\n    ExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nConstantExpressionContext.prototype = Object.create(ExpressionContext.prototype);\r\nConstantExpressionContext.prototype.constructor = ConstantExpressionContext;\r\n\r\nexpGrammarParser.ConstantExpressionContext = ConstantExpressionContext;\r\n\r\nConstantExpressionContext.prototype.number = function() {\r\n    return this.getTypedRuleContext(NumberContext,0);\r\n};\r\nConstantExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitConstantExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction VariableExpressionContext(parser, ctx) {\r\n\tExpressionContext.call(this, parser);\r\n    this.id = null; // Token;\r\n    ExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nVariableExpressionContext.prototype = Object.create(ExpressionContext.prototype);\r\nVariableExpressionContext.prototype.constructor = VariableExpressionContext;\r\n\r\nexpGrammarParser.VariableExpressionContext = VariableExpressionContext;\r\n\r\nVariableExpressionContext.prototype.ID = function() {\r\n    return this.getToken(expGrammarParser.ID, 0);\r\n};\r\nVariableExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitVariableExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction TernaryOperatorExpressionContext(parser, ctx) {\r\n\tExpressionContext.call(this, parser);\r\n    this.condition = null; // BoolExpressionContext;\r\n    this.first = null; // ExpressionContext;\r\n    this.second = null; // ExpressionContext;\r\n    ExpressionContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nTernaryOperatorExpressionContext.prototype = Object.create(ExpressionContext.prototype);\r\nTernaryOperatorExpressionContext.prototype.constructor = TernaryOperatorExpressionContext;\r\n\r\nexpGrammarParser.TernaryOperatorExpressionContext = TernaryOperatorExpressionContext;\r\n\r\nTernaryOperatorExpressionContext.prototype.LCRL = function() {\r\n    return this.getToken(expGrammarParser.LCRL, 0);\r\n};\r\n\r\nTernaryOperatorExpressionContext.prototype.QUESTIONMARK = function() {\r\n    return this.getToken(expGrammarParser.QUESTIONMARK, 0);\r\n};\r\n\r\nTernaryOperatorExpressionContext.prototype.COLON = function() {\r\n    return this.getToken(expGrammarParser.COLON, 0);\r\n};\r\n\r\nTernaryOperatorExpressionContext.prototype.RCRL = function() {\r\n    return this.getToken(expGrammarParser.RCRL, 0);\r\n};\r\n\r\nTernaryOperatorExpressionContext.prototype.boolExpression = function() {\r\n    return this.getTypedRuleContext(BoolExpressionContext,0);\r\n};\r\n\r\nTernaryOperatorExpressionContext.prototype.expression = function(i) {\r\n    if(i===undefined) {\r\n        i = null;\r\n    }\r\n    if(i===null) {\r\n        return this.getTypedRuleContexts(ExpressionContext);\r\n    } else {\r\n        return this.getTypedRuleContext(ExpressionContext,i);\r\n    }\r\n};\r\nTernaryOperatorExpressionContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitTernaryOperatorExpression(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\n\r\nexpGrammarParser.prototype.expression = function(_p) {\r\n\tif(_p===undefined) {\r\n\t    _p = 0;\r\n\t}\r\n    var _parentctx = this._ctx;\r\n    var _parentState = this.state;\r\n    var localctx = new ExpressionContext(this, this._ctx, _parentState);\r\n    var _prevctx = localctx;\r\n    var _startState = 4;\r\n    this.enterRecursionRule(localctx, 4, expGrammarParser.RULE_expression, _p);\r\n    var _la = 0; // Token type\r\n    try {\r\n        this.enterOuterAlt(localctx, 1);\r\n        this.state = 61;\r\n        this._errHandler.sync(this);\r\n        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);\r\n        switch(la_) {\r\n        case 1:\r\n            localctx = new BracketExpressionContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n\r\n            this.state = 40;\r\n            this.match(expGrammarParser.LPAREN);\r\n            this.state = 41;\r\n            this.expression(0);\r\n            this.state = 42;\r\n            this.match(expGrammarParser.RPAREN);\r\n            break;\r\n\r\n        case 2:\r\n            localctx = new FunctionExpressionContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 44;\r\n            localctx.func = this.match(expGrammarParser.ID);\r\n            this.state = 45;\r\n            this.match(expGrammarParser.LPAREN);\r\n            this.state = 46;\r\n            this.functionArguments();\r\n            this.state = 47;\r\n            this.match(expGrammarParser.RPAREN);\r\n            break;\r\n\r\n        case 3:\r\n            localctx = new UnaryOperatorExpressionContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 49;\r\n            localctx.op = this._input.LT(1);\r\n            _la = this._input.LA(1);\r\n            if(!(_la===expGrammarParser.PLUS || _la===expGrammarParser.MINUS)) {\r\n                localctx.op = this._errHandler.recoverInline(this);\r\n            }\r\n            else {\r\n            \tthis._errHandler.reportMatch(this);\r\n                this.consume();\r\n            }\r\n            this.state = 50;\r\n            this.expression(6);\r\n            break;\r\n\r\n        case 4:\r\n            localctx = new VariableExpressionContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 51;\r\n            localctx.id = this.match(expGrammarParser.ID);\r\n            break;\r\n\r\n        case 5:\r\n            localctx = new ConstantExpressionContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 52;\r\n            localctx.value = this.number();\r\n            break;\r\n\r\n        case 6:\r\n            localctx = new TernaryOperatorExpressionContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 53;\r\n            this.match(expGrammarParser.LCRL);\r\n            this.state = 54;\r\n            localctx.condition = this.boolExpression(0);\r\n            this.state = 55;\r\n            this.match(expGrammarParser.QUESTIONMARK);\r\n            this.state = 56;\r\n            localctx.first = this.expression(0);\r\n            this.state = 57;\r\n            this.match(expGrammarParser.COLON);\r\n            this.state = 58;\r\n            localctx.second = this.expression(0);\r\n            this.state = 59;\r\n            this.match(expGrammarParser.RCRL);\r\n            break;\r\n\r\n        }\r\n        this._ctx.stop = this._input.LT(-1);\r\n        this.state = 74;\r\n        this._errHandler.sync(this);\r\n        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)\r\n        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n            if(_alt===1) {\r\n                if(this._parseListeners!==null) {\r\n                    this.triggerExitRuleEvent();\r\n                }\r\n                _prevctx = localctx;\r\n                this.state = 72;\r\n                this._errHandler.sync(this);\r\n                var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);\r\n                switch(la_) {\r\n                case 1:\r\n                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n                    localctx.left = _prevctx;\r\n                    this.pushNewRecursionContext(localctx, _startState, expGrammarParser.RULE_expression);\r\n                    this.state = 63;\r\n                    if (!( this.precpred(this._ctx, 7))) {\r\n                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\r\n                    }\r\n                    this.state = 64;\r\n                    localctx.op = this.match(expGrammarParser.CARET);\r\n                    this.state = 65;\r\n                    localctx.right = this.expression(7);\r\n                    break;\r\n\r\n                case 2:\r\n                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n                    localctx.left = _prevctx;\r\n                    this.pushNewRecursionContext(localctx, _startState, expGrammarParser.RULE_expression);\r\n                    this.state = 66;\r\n                    if (!( this.precpred(this._ctx, 5))) {\r\n                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 5)\");\r\n                    }\r\n                    this.state = 67;\r\n                    localctx.op = this._input.LT(1);\r\n                    _la = this._input.LA(1);\r\n                    if(!(_la===expGrammarParser.ASTERISK || _la===expGrammarParser.DIVISION)) {\r\n                        localctx.op = this._errHandler.recoverInline(this);\r\n                    }\r\n                    else {\r\n                    \tthis._errHandler.reportMatch(this);\r\n                        this.consume();\r\n                    }\r\n                    this.state = 68;\r\n                    localctx.right = this.expression(6);\r\n                    break;\r\n\r\n                case 3:\r\n                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n                    localctx.left = _prevctx;\r\n                    this.pushNewRecursionContext(localctx, _startState, expGrammarParser.RULE_expression);\r\n                    this.state = 69;\r\n                    if (!( this.precpred(this._ctx, 4))) {\r\n                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 4)\");\r\n                    }\r\n                    this.state = 70;\r\n                    localctx.op = this._input.LT(1);\r\n                    _la = this._input.LA(1);\r\n                    if(!(_la===expGrammarParser.PLUS || _la===expGrammarParser.MINUS)) {\r\n                        localctx.op = this._errHandler.recoverInline(this);\r\n                    }\r\n                    else {\r\n                    \tthis._errHandler.reportMatch(this);\r\n                        this.consume();\r\n                    }\r\n                    this.state = 71;\r\n                    localctx.right = this.expression(5);\r\n                    break;\r\n\r\n                } \r\n            }\r\n            this.state = 76;\r\n            this._errHandler.sync(this);\r\n            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);\r\n        }\r\n\r\n    } catch( error) {\r\n        if(error instanceof antlr4.error.RecognitionException) {\r\n\t        localctx.exception = error;\r\n\t        this._errHandler.reportError(this, error);\r\n\t        this._errHandler.recover(this, error);\r\n\t    } else {\r\n\t    \tthrow error;\r\n\t    }\r\n    } finally {\r\n        this.unrollRecursionContexts(_parentctx)\r\n    }\r\n    return localctx;\r\n};\r\n\r\n\r\nfunction FunctionArgumentsContext(parser, parent, invokingState) {\r\n\tif(parent===undefined) {\r\n\t    parent = null;\r\n\t}\r\n\tif(invokingState===undefined || invokingState===null) {\r\n\t\tinvokingState = -1;\r\n\t}\r\n\tantlr4.ParserRuleContext.call(this, parent, invokingState);\r\n    this.parser = parser;\r\n    this.ruleIndex = expGrammarParser.RULE_functionArguments;\r\n    return this;\r\n}\r\n\r\nFunctionArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\r\nFunctionArgumentsContext.prototype.constructor = FunctionArgumentsContext;\r\n\r\nFunctionArgumentsContext.prototype.expression = function(i) {\r\n    if(i===undefined) {\r\n        i = null;\r\n    }\r\n    if(i===null) {\r\n        return this.getTypedRuleContexts(ExpressionContext);\r\n    } else {\r\n        return this.getTypedRuleContext(ExpressionContext,i);\r\n    }\r\n};\r\n\r\nFunctionArgumentsContext.prototype.COMMA = function(i) {\r\n\tif(i===undefined) {\r\n\t\ti = null;\r\n\t}\r\n    if(i===null) {\r\n        return this.getTokens(expGrammarParser.COMMA);\r\n    } else {\r\n        return this.getToken(expGrammarParser.COMMA, i);\r\n    }\r\n};\r\n\r\n\r\nFunctionArgumentsContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof expGrammarVisitor ) {\r\n        return visitor.visitFunctionArguments(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexpGrammarParser.FunctionArgumentsContext = FunctionArgumentsContext;\r\n\r\nexpGrammarParser.prototype.functionArguments = function() {\r\n\r\n    var localctx = new FunctionArgumentsContext(this, this._ctx, this.state);\r\n    this.enterRule(localctx, 6, expGrammarParser.RULE_functionArguments);\r\n    var _la = 0; // Token type\r\n    try {\r\n        this.state = 86;\r\n        this._errHandler.sync(this);\r\n        switch(this._input.LA(1)) {\r\n        case expGrammarParser.FLOAT:\r\n        case expGrammarParser.INT:\r\n        case expGrammarParser.ID:\r\n        case expGrammarParser.PLUS:\r\n        case expGrammarParser.MINUS:\r\n        case expGrammarParser.LPAREN:\r\n        case expGrammarParser.LCRL:\r\n            this.enterOuterAlt(localctx, 1);\r\n            this.state = 77;\r\n            this.expression(0);\r\n            this.state = 82;\r\n            this._errHandler.sync(this);\r\n            _la = this._input.LA(1);\r\n            while(_la===expGrammarParser.COMMA) {\r\n                this.state = 78;\r\n                this.match(expGrammarParser.COMMA);\r\n                this.state = 79;\r\n                this.expression(0);\r\n                this.state = 84;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n            }\r\n            break;\r\n        case expGrammarParser.RPAREN:\r\n            this.enterOuterAlt(localctx, 2);\r\n\r\n            break;\r\n        default:\r\n            throw new antlr4.error.NoViableAltException(this);\r\n        }\r\n    } catch (re) {\r\n    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t        localctx.exception = re;\r\n\t        this._errHandler.reportError(this, re);\r\n\t        this._errHandler.recover(this, re);\r\n\t    } else {\r\n\t    \tthrow re;\r\n\t    }\r\n    } finally {\r\n        this.exitRule();\r\n    }\r\n    return localctx;\r\n};\r\n\r\n\r\nexpGrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {\r\n\tswitch(ruleIndex) {\r\n\tcase 1:\r\n\t\t\treturn this.boolExpression_sempred(localctx, predIndex);\r\n\tcase 2:\r\n\t\t\treturn this.expression_sempred(localctx, predIndex);\r\n    default:\r\n        throw \"No predicate with index:\" + ruleIndex;\r\n   }\r\n};\r\n\r\nexpGrammarParser.prototype.boolExpression_sempred = function(localctx, predIndex) {\r\n\tswitch(predIndex) {\r\n\t\tcase 0:\r\n\t\t\treturn this.precpred(this._ctx, 3);\r\n\t\tcase 1:\r\n\t\t\treturn this.precpred(this._ctx, 2);\r\n\t\tdefault:\r\n\t\t\tthrow \"No predicate with index:\" + predIndex;\r\n\t}\r\n};\r\n\r\nexpGrammarParser.prototype.expression_sempred = function(localctx, predIndex) {\r\n\tswitch(predIndex) {\r\n\t\tcase 2:\r\n\t\t\treturn this.precpred(this._ctx, 7);\r\n\t\tcase 3:\r\n\t\t\treturn this.precpred(this._ctx, 5);\r\n\t\tcase 4:\r\n\t\t\treturn this.precpred(this._ctx, 4);\r\n\t\tdefault:\r\n\t\t\tthrow \"No predicate with index:\" + predIndex;\r\n\t}\r\n};\r\n\r\n\r\nexports.expGrammarParser = expGrammarParser;\r\n","import { TextPosition } from \"./astNode\";\r\n\r\nexport default class ErrorMessage{\r\n    textPos:TextPosition;\r\n    message:string;\r\n    constructor(textPos:TextPosition,message:string){\r\n      this.textPos = textPos;\r\n      this.message = message;\r\n    }\r\n    print(){\r\n      if(this.textPos.line!=-1)\r\n        return `${this.message} at line:${this.textPos.line}, position:${this.textPos.column}`;\r\n      return this.message;\r\n    }\r\n  }","import {Expression, BoolExpression} from \"./expression\";\r\nexport { Constant,Addition, Division, Variable,TernaryOperator, Function, Multiplication, Subtraction, Negation, And, Or, NotEqual, Equal, Greater, GEqual, Less, LEqual, BoolConstant, BoolNot } from \"./expression\";\r\nimport {functionDictionary} from \"./functions\";\r\nimport ErrorMessage from \"./error\";\r\nimport Visitor from \"./visitor\";\r\nimport { compileBoolExpression, compileExpression, ExpCompilerContext } from \"./expressionCompiler\";\r\nimport ErrorListener from \"./errorListener\";\r\nimport { CompilerError } from \"./compilerError\";\r\nimport expGrammarLexer from \"./grammar/antlrOutput/expGrammarLexer.js\";\r\nimport expGrammarParser from \"./grammar/antlrOutput/expGrammarParser.js\";\r\nimport antlr4, { Lexer, Parser } from \"antlr4\";\r\n\r\nexport function compile(expressionString:string,requiredVariables?:string[]):Expression{\r\n    let errors:ErrorMessage[] = [];\r\n\r\n    var chars = new antlr4.InputStream(expressionString);\r\n    var lexer = new expGrammarLexer.expGrammarLexer(chars);\r\n    (lexer as unknown as Lexer).removeErrorListeners();\r\n    var listener = new ErrorListener(errors);\r\n    (lexer as unknown as Lexer).addErrorListener(listener);\r\n    //@ts-ignore\r\n    lexer.strictMode = false;\r\n    var tokens = new antlr4.CommonTokenStream(lexer as unknown as Lexer);\r\n    var parser = new expGrammarParser.expGrammarParser(tokens);\r\n    \r\n    (parser as unknown as Parser).removeErrorListeners();\r\n    (parser as unknown as Parser).addErrorListener(listener);\r\n    var visitor = new Visitor();\r\n    (parser as unknown as Parser).buildParseTrees = true;\r\n    var tree = parser.expression(0);\r\n    if(errors.length>0){\r\n        throw new CompilerError(errors);\r\n    }\r\n    let {expDef, varIndicies} = visitor.startExpression(tree, listener);\r\n    if(errors.length>0){\r\n        throw new CompilerError(errors);\r\n    }\r\n    let context = new ExpCompilerContext();\r\n    if(requiredVariables){\r\n        context.indicies = {};\r\n        requiredVariables.forEach((val:string,id:number)=>context.indicies[val] = id);\r\n    }\r\n    else\r\n        context.indicies = varIndicies;\r\n    context.errors = errors;\r\n    let expression = compileExpression(expDef,context).simplify();\r\n    if(errors.length>0){\r\n        throw new CompilerError(errors);\r\n    }\r\n    return expression;\r\n}\r\n\r\nexport function compileBool(expressionString:string,requiredVariables?:string[]):BoolExpression{\r\n    let errors:ErrorMessage[] = [];\r\n\r\n    var chars = new antlr4.InputStream(expressionString);\r\n    var lexer = new expGrammarLexer.expGrammarLexer(chars);\r\n    (lexer as unknown as Lexer).removeErrorListeners();\r\n    var listener = new ErrorListener(errors);\r\n    (lexer as unknown as Lexer).addErrorListener(listener);\r\n    //@ts-ignore\r\n    lexer.strictMode = false;\r\n    var tokens = new antlr4.CommonTokenStream(lexer as unknown as Lexer);\r\n    var parser = new expGrammarParser.expGrammarParser(tokens);\r\n    \r\n    (parser as unknown as Parser).removeErrorListeners();\r\n    (parser as unknown as Parser).addErrorListener(listener);\r\n    var visitor = new Visitor();\r\n    (parser as unknown as Parser).buildParseTrees = true;\r\n    var tree = parser.boolExpression(0);\r\n    if(errors.length>0){\r\n        throw new CompilerError(errors);\r\n    }\r\n    let {expDef, varIndicies} = visitor.startBoolExpression(tree, listener);\r\n    if(errors.length>0){\r\n        throw new CompilerError(errors);\r\n    }\r\n    let context = new ExpCompilerContext();\r\n    if(requiredVariables){\r\n        context.indicies = {};\r\n        requiredVariables.forEach((val:string,id:number)=>context.indicies[val] = id);\r\n    }\r\n    else\r\n        context.indicies = varIndicies;\r\n    context.errors = errors;\r\n    let expression = compileBoolExpression(expDef,context).simplify();\r\n    if(errors.length>0){\r\n        throw new CompilerError(errors);\r\n    }\r\n    return expression;\r\n}\r\n\r\nexport function $eval(expression:string,variables:Record<string,number>):number{\r\n    if(!variables)\r\n        variables = {};\r\n    let exp = compile(expression,Object.keys(variables));\r\n    return exp.$eval(variables);\r\n}\r\n\r\nexport function defineFunction(name:string,func:(...x:number[])=>number){\r\n    functionDictionary[name] = {\r\n        name,\r\n        argCount:func.length,\r\n        derivatives:null,\r\n        exec:(args:number[])=>{return func(...args);},\r\n        getDerivative:null\r\n    };\r\n}\r\nexport function functionNames(){\r\n    return Object.keys(functionDictionary);\r\n}\r\n/*export const Nodes = {\r\n    Addition:Addition,\r\n    Subtraction:Subtraction,\r\n    Multiplication:Multiplication,\r\n    Division:Division,\r\n    Negation:Negation,\r\n    Function:Function,\r\n    Variable:Variable,\r\n    TernaryOperator:TernaryOperator,\r\n    And:And,\r\n    Or:Or,\r\n    BoolNot:BoolNot,\r\n    BoolConstant:BoolConstant,\r\n    NotEqual:NotEqual,\r\n    Equal:Equal,\r\n    Greater:Greater,\r\n    Less:Less,\r\n    GEqual:GEqual,\r\n    LEqual:LEqual,\r\n};*/\r\n\r\n\r\n\r\n\r\n","import expGrammarLexer from \"./grammar/antlrOutput/expGrammarLexer.js\";\r\nimport expGrammarVisitor from \"./grammar/antlrOutput/expGrammarVisitor.js\";\r\nimport expGrammarParser from \"./grammar/antlrOutput/expGrammarParser.js\";\r\nimport {\r\n    ExpressionNode,\r\n    BoolExpressionNode,\r\n    BoolNegationNode,\r\n    ConstantNode,\r\n    FunctionNode,\r\n    DivisionNode,\r\n    MultiplicationNode,\r\n    AdditionNode,\r\n    SubtractionNode,\r\n    NegationNode,\r\n    BoolLNode,\r\n    BoolLENode,\r\n    BoolGNode,\r\n    BoolGENode,\r\n    BoolENode,\r\n    BoolNENode,\r\n    BoolAndNode,\r\n    TernaryOperatorNode,\r\n    TextPosition,\r\n    BoolOrNode,\r\n    BoolConstantNode, IdentifierNode\r\n} from \"./astNode\";\r\nimport ErrorListener from \"./errorListener\";\r\nimport { ParseTreeVisitor } from \"antlr4/tree/Tree\";\r\nimport { BoolExpression } from \"./expression.js\";\r\n\r\n\r\nclass Visitor extends expGrammarVisitor.expGrammarVisitor{\r\n    errorListener:ErrorListener;\r\n    indicies:Record<string,number>;\r\n    idCount:number = 0;\r\n    constructor(){\r\n        super();\r\n        this.indicies = {};\r\n    }\r\n    startExpression(ctx:any, errorListener:ErrorListener):{expDef:ExpressionNode,varIndicies:Record<string,number>}{\r\n        this.errorListener = errorListener;\r\n        return {expDef:this.visitExpression(ctx),varIndicies:this.indicies};\r\n    }\r\n    startBoolExpression(ctx:any, errorListener:ErrorListener):{expDef:BoolExpressionNode,varIndicies:Record<string,number>}{\r\n        this.errorListener = errorListener;\r\n        return {expDef:this.visitBoolExpression(ctx),varIndicies:this.indicies};\r\n    }\r\n    visitBoolExpression(ctx:any):BoolExpressionNode{\r\n        return (this as unknown as ParseTreeVisitor).visit(ctx) as BoolExpressionNode;\r\n    }\r\n    visitExpression(ctx:any):ExpressionNode{\r\n        return (this as unknown as ParseTreeVisitor).visit(ctx) as ExpressionNode;\r\n    }\r\n    visitEBoolBinaryOperator(ctx:any):BoolExpressionNode{\r\n        let op:BoolExpressionNode = null;\r\n        switch(ctx.op.type){\r\n            case expGrammarParser.expGrammarParser.L:\r\n                op = new BoolLNode(\r\n                    this.visitExpression(ctx.leftexp),\r\n                    this.visitExpression(ctx.rightexp));\r\n                    break;\r\n            case expGrammarParser.expGrammarParser.LE:\r\n                op =  new BoolLENode(\r\n                    this.visitExpression(ctx.leftexp),\r\n                    this.visitExpression(ctx.rightexp));\r\n                    break;\r\n            case expGrammarParser.expGrammarParser.G:\r\n                op =  new BoolGNode(\r\n                     this.visitExpression(ctx.leftexp),\r\n                     this.visitExpression(ctx.rightexp));\r\n                     break;\r\n            case expGrammarParser.expGrammarParser.GE:\r\n                op = new BoolGENode(\r\n                     this.visitExpression(ctx.leftexp),\r\n                     this.visitExpression(ctx.rightexp));\r\n                     break;\r\n            case expGrammarParser.expGrammarParser.E:\r\n                op = new BoolENode(\r\n                     this.visitExpression(ctx.leftexp),\r\n                     this.visitExpression(ctx.rightexp));\r\n                     break;\r\n            case expGrammarParser.expGrammarParser.NE:  \r\n                op = new BoolNENode(\r\n                     this.visitExpression(ctx.leftexp),\r\n                     this.visitExpression(ctx.rightexp));\r\n                     break;\r\n            default:\r\n                this.errorListener.add(new TextPosition(ctx.op.line,ctx.op.column,ctx.start.start,ctx.stop.stop),\"Unknown binary operator\");\r\n                return null;\r\n        }\r\n        return op.setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitBBoolBinaryOperator(ctx:any):BoolExpressionNode{\r\n        let op:BoolExpressionNode = null;\r\n        switch(ctx.op.type){\r\n            case expGrammarParser.expGrammarParser.AND:\r\n                op = new BoolAndNode(\r\n                     this.visitBoolExpression(ctx.left),\r\n                     this.visitBoolExpression(ctx.right));\r\n                     break;\r\n            case expGrammarParser.expGrammarParser.OR:\r\n                op = new BoolOrNode(\r\n                     this.visitBoolExpression(ctx.left),\r\n                     this.visitBoolExpression(ctx.right));\r\n                     break;\r\n            default:\r\n                this.errorListener.add(new TextPosition(ctx.op.line,ctx.op.column,ctx.start.start,ctx.stop.stop),\"Unknown binary operator\");\r\n                return null;\r\n        } \r\n        return op.setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitBracketBoolExpression(ctx:any):BoolExpressionNode{\r\n        return this.visitBoolExpression(ctx.boolExpression()) as BoolExpressionNode;\r\n    }\r\n    visitBoolUnaryOperator(ctx:any):BoolExpressionNode{\r\n        return new BoolNegationNode(this.visitBoolExpression(ctx.boolExpression()) as BoolExpressionNode)\r\n        .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitBracketExpression(ctx:any):ExpressionNode{\r\n        return this.visitExpression(ctx.expression());\r\n    }\r\n    visitNumber(ctx:any):ConstantNode{\r\n        return new ConstantNode(parseFloat(ctx.getText()))\r\n        .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitConstantExpression(ctx:any):ConstantNode{\r\n        return this.visitNumber(ctx.value);\r\n    }\r\n    visitTernaryOperatorExpression(ctx:any){\r\n        return new TernaryOperatorNode(this.visitBoolExpression(ctx.condition),this.visitExpression(ctx.first),this.visitExpression(ctx.second))\r\n        .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitBoolConstant(ctx:any){\r\n        return new BoolConstantNode(ctx.value.text==\"true\")\r\n        .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitVariableExpression(ctx:any){\r\n        let id = ctx.id.text;\r\n        if(!this.indicies.hasOwnProperty(id)){\r\n            this.indicies[id] = this.idCount;\r\n            this.idCount++;\r\n        }\r\n        return new IdentifierNode(id)\r\n            .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitUnaryOperatorExpression(ctx:any){\r\n        switch(ctx.op.type){\r\n            case expGrammarParser.expGrammarParser.PLUS:\r\n                return this.visitExpression(ctx.expression());\r\n            case expGrammarParser.expGrammarParser.MINUS:\r\n                return new NegationNode(this.visitExpression(ctx.expression()))\r\n                .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n            default:\r\n                this.errorListener.add(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop),\"Unknown unary operator\");\r\n                return null;\r\n        }\r\n    }\r\n    visitBinaryOperatorExpression(ctx:any):ExpressionNode{\r\n        let op:ExpressionNode;\r\n        switch(ctx.op.type){\r\n            case expGrammarParser.expGrammarParser.DIVISION:\r\n                op = new DivisionNode(\r\n                    this.visitExpression(ctx.left),\r\n                    this.visitExpression(ctx.right));\r\n                    break;\r\n            case expGrammarParser.expGrammarParser.ASTERISK:\r\n                op = new MultiplicationNode(\r\n                    this.visitExpression(ctx.left),\r\n                    this.visitExpression(ctx.right));\r\n                    break;\r\n            case expGrammarParser.expGrammarParser.PLUS:\r\n                op = new AdditionNode(\r\n                    this.visitExpression(ctx.left),\r\n                    this.visitExpression(ctx.right));\r\n                    break;\r\n            case expGrammarParser.expGrammarParser.MINUS:\r\n                op = new SubtractionNode(\r\n                    this.visitExpression(ctx.left),\r\n                    this.visitExpression(ctx.right));\r\n                    break;\r\n            case expGrammarParser.expGrammarParser.CARET:\r\n                op = new FunctionNode(\r\n                    \"pow\",\r\n                    [this.visitExpression(ctx.left),this.visitExpression(ctx.right)]);\r\n                    break;\r\n            default:\r\n                    this.errorListener.add(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop),\"Unknown binary operator\");\r\n                    return null;\r\n        }\r\n        return op\r\n        .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitFunctionExpression(ctx:any){\r\n        var args = this.visitFunctionArguments(ctx.functionArguments());\r\n        return new FunctionNode(ctx.func.text,args)\r\n        .setTextPos(new TextPosition(ctx.start.line,ctx.start.column,ctx.start.start,ctx.stop.stop));\r\n    }\r\n    visitFunctionArguments(ctx:any):ExpressionNode[]{\r\n        var args:ExpressionNode[] = [];\r\n        if(ctx.expression!=undefined)\r\n            ctx.expression().forEach(function(item:any){\r\n                args.push(this.visit(item));\r\n            },this);\r\n        return args;\r\n    }\r\n}\r\n\r\nexport default Visitor;","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.ATN = require('./ATN').ATN;\nexports.ATNDeserializer = require('./ATNDeserializer').ATNDeserializer;\nexports.LexerATNSimulator = require('./LexerATNSimulator').LexerATNSimulator;\nexports.ParserATNSimulator = require('./ParserATNSimulator').ParserATNSimulator;\nexports.PredictionMode = require('./PredictionMode').PredictionMode;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar Set = require('./Utils').Set;\nvar BitSet = require('./Utils').BitSet;\nvar Token = require('./Token').Token;\nvar ATNConfig = require('./atn/ATNConfig').ATNConfig;\nvar Interval = require('./IntervalSet').Interval;\nvar IntervalSet = require('./IntervalSet').IntervalSet;\nvar RuleStopState = require('./atn/ATNState').RuleStopState;\nvar RuleTransition = require('./atn/Transition').RuleTransition;\nvar NotSetTransition = require('./atn/Transition').NotSetTransition;\nvar WildcardTransition = require('./atn/Transition').WildcardTransition;\nvar AbstractPredicateTransition = require('./atn/Transition').AbstractPredicateTransition;\n\nvar pc = require('./PredictionContext');\nvar predictionContextFromRuleContext = pc.predictionContextFromRuleContext;\nvar PredictionContext = pc.PredictionContext;\nvar SingletonPredictionContext = pc.SingletonPredictionContext;\n\nfunction LL1Analyzer (atn) {\n    this.atn = atn;\n}\n\n//* Special value added to the lookahead sets to indicate that we hit\n//  a predicate during analysis if {@code seeThruPreds==false}.\n///\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n\n\n//*\n// Calculates the SLL(1) expected lookahead set for each outgoing transition\n// of an {@link ATNState}. The returned array has one element for each\n// outgoing transition in {@code s}. If the closure from transition\n// <em>i</em> leads to a semantic predicate before matching a symbol, the\n// element at index <em>i</em> of the result will be {@code null}.\n//\n// @param s the ATN state\n// @return the expected symbols for each outgoing transition of {@code s}.\n///\nLL1Analyzer.prototype.getDecisionLookahead = function(s) {\n    if (s === null) {\n        return null;\n    }\n    var count = s.transitions.length;\n    var look = [];\n    for(var alt=0; alt< count; alt++) {\n        look[alt] = new IntervalSet();\n        var lookBusy = new Set();\n        var seeThruPreds = false; // fail to get lookahead upon pred\n        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,\n              look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n        // Wipe out lookahead for this alternative if we found nothing\n        // or we had a predicate when we !seeThruPreds\n        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n            look[alt] = null;\n        }\n    }\n    return look;\n};\n\n//*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and the end of the rule containing\n// {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n// If {@code ctx} is not {@code null} and the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx the complete parser context, or {@code null} if the context\n// should be ignored\n//\n// @return The set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n///\nLL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {\n    var r = new IntervalSet();\n    var seeThruPreds = true; // ignore preds; get all lookahead\n\tctx = ctx || null;\n    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n    return r;\n};\n\n//*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n// rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n// {@code true} and {@code stopState} or the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state.\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx The outer context, or {@code null} if the outer context should\n// not be used.\n// @param look The result lookahead set.\n// @param lookBusy A set used for preventing epsilon closures in the ATN\n// from causing a stack overflow. Outside code should pass\n// {@code new Set<ATNConfig>} for this argument.\n// @param calledRuleStack A set used for preventing left recursion in the\n// ATN from causing a stack overflow. Outside code should pass\n// {@code new BitSet()} for this argument.\n// @param seeThruPreds {@code true} to true semantic predicates as\n// implicitly {@code true} and \"see through them\", otherwise {@code false}\n// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n// result if one is encountered.\n// @param addEOF Add {@link Token//EOF} to the result if the end of the\n// outermost context is reached. This parameter has no effect if {@code ctx}\n// is {@code null}.\n///\nLL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);\n    if (lookBusy.contains(c)) {\n        return;\n    }\n    lookBusy.add(c);\n    if (s === stopState) {\n        if (ctx ===null) {\n            look.addOne(Token.EPSILON);\n            return;\n        } else if (ctx.isEmpty() && addEOF) {\n            look.addOne(Token.EOF);\n            return;\n        }\n    }\n    if (s instanceof RuleStopState ) {\n        if (ctx ===null) {\n            look.addOne(Token.EPSILON);\n            return;\n        } else if (ctx.isEmpty() && addEOF) {\n            look.addOne(Token.EOF);\n            return;\n        }\n        if (ctx !== PredictionContext.EMPTY) {\n            // run thru all possible stack tops in ctx\n            for(var i=0; i<ctx.length; i++) {\n                var returnState = this.atn.states[ctx.getReturnState(i)];\n                var removed = calledRuleStack.contains(returnState.ruleIndex);\n                try {\n                    calledRuleStack.remove(returnState.ruleIndex);\n                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    if (removed) {\n                        calledRuleStack.add(returnState.ruleIndex);\n                    }\n                }\n            }\n            return;\n        }\n    }\n    for(var j=0; j<s.transitions.length; j++) {\n        var t = s.transitions[j];\n        if (t.constructor === RuleTransition) {\n            if (calledRuleStack.contains(t.target.ruleIndex)) {\n                continue;\n            }\n            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n            try {\n                calledRuleStack.add(t.target.ruleIndex);\n                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } finally {\n                calledRuleStack.remove(t.target.ruleIndex);\n            }\n        } else if (t instanceof AbstractPredicateTransition ) {\n            if (seeThruPreds) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else {\n                look.addOne(LL1Analyzer.HIT_PRED);\n            }\n        } else if( t.isEpsilon) {\n            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n        } else if (t.constructor === WildcardTransition) {\n            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );\n        } else {\n            var set = t.label;\n            if (set !== null) {\n                if (t instanceof NotSetTransition) {\n                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                }\n                look.addSet(set);\n            }\n        }\n    }\n};\n\nexports.LL1Analyzer = LL1Analyzer;\n\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// Represents the type of recognizer an ATN applies to.\n\nfunction ATNType() {\n\n}\n\nATNType.LEXER = 0;\nATNType.PARSER = 1;\n\nexports.ATNType = ATNType;\n\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// When we hit an accept state in either the DFA or the ATN, we\n//  have to notify the character stream to start buffering characters\n//  via {@link IntStream//mark} and record the current state. The current sim state\n//  includes the current index into the input, the current line,\n//  and current character position in that line. Note that the Lexer is\n//  tracking the starting line and characterization of the token. These\n//  variables track the \"state\" of the simulator when it hits an accept state.\n//\n//  <p>We track these variables separately for the DFA and ATN simulation\n//  because the DFA simulation often has to fail over to the ATN\n//  simulation. If the ATN simulation fails, we need the DFA to fall\n//  back to its previously accepted state, if any. If the ATN succeeds,\n//  then the ATN does the accept and the DFA simulator that invoked it\n//  can simply return the predicted token type.</p>\n///\n\nvar Token = require('./../Token').Token;\nvar Lexer = require('./../Lexer').Lexer;\nvar ATN = require('./ATN').ATN;\nvar ATNSimulator = require('./ATNSimulator').ATNSimulator;\nvar DFAState = require('./../dfa/DFAState').DFAState;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar OrderedATNConfigSet = require('./ATNConfigSet').OrderedATNConfigSet;\nvar PredictionContext = require('./../PredictionContext').PredictionContext;\nvar SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;\nvar RuleStopState = require('./ATNState').RuleStopState;\nvar LexerATNConfig = require('./ATNConfig').LexerATNConfig;\nvar Transition = require('./Transition').Transition;\nvar LexerActionExecutor = require('./LexerActionExecutor').LexerActionExecutor;\nvar LexerNoViableAltException = require('./../error/Errors').LexerNoViableAltException;\n\nfunction resetSimState(sim) {\n\tsim.index = -1;\n\tsim.line = 0;\n\tsim.column = -1;\n\tsim.dfaState = null;\n}\n\nfunction SimState() {\n\tresetSimState(this);\n\treturn this;\n}\n\nSimState.prototype.reset = function() {\n\tresetSimState(this);\n};\n\nfunction LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {\n\tATNSimulator.call(this, atn, sharedContextCache);\n\tthis.decisionToDFA = decisionToDFA;\n\tthis.recog = recog;\n\t// The current token's starting index into the character stream.\n\t// Shared across DFA to ATN simulation in case the ATN fails and the\n\t// DFA did not have a previous accept state. In this case, we use the\n\t// ATN-generated exception object.\n\tthis.startIndex = -1;\n\t// line number 1..n within the input///\n\tthis.line = 1;\n\t// The index of the character relative to the beginning of the line\n\t// 0..n-1///\n\tthis.column = 0;\n\tthis.mode = Lexer.DEFAULT_MODE;\n\t// Used during DFA/ATN exec to record the most recent accept configuration\n\t// info\n\tthis.prevAccept = new SimState();\n\t// done\n\treturn this;\n}\n\nLexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nLexerATNSimulator.prototype.constructor = LexerATNSimulator;\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\nLexerATNSimulator.match_calls = 0;\n\nLexerATNSimulator.prototype.copyState = function(simulator) {\n\tthis.column = simulator.column;\n\tthis.line = simulator.line;\n\tthis.mode = simulator.mode;\n\tthis.startIndex = simulator.startIndex;\n};\n\nLexerATNSimulator.prototype.match = function(input, mode) {\n\tthis.match_calls += 1;\n\tthis.mode = mode;\n\tvar mark = input.mark();\n\ttry {\n\t\tthis.startIndex = input.index;\n\t\tthis.prevAccept.reset();\n\t\tvar dfa = this.decisionToDFA[mode];\n\t\tif (dfa.s0 === null) {\n\t\t\treturn this.matchATN(input);\n\t\t} else {\n\t\t\treturn this.execATN(input, dfa.s0);\n\t\t}\n\t} finally {\n\t\tinput.release(mark);\n\t}\n};\n\nLexerATNSimulator.prototype.reset = function() {\n\tthis.prevAccept.reset();\n\tthis.startIndex = -1;\n\tthis.line = 1;\n\tthis.column = 0;\n\tthis.mode = Lexer.DEFAULT_MODE;\n};\n\nLexerATNSimulator.prototype.matchATN = function(input) {\n\tvar startState = this.atn.modeToStartState[this.mode];\n\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n\t}\n\tvar old_mode = this.mode;\n\tvar s0_closure = this.computeStartState(input, startState);\n\tvar suppressEdge = s0_closure.hasSemanticContext;\n\ts0_closure.hasSemanticContext = false;\n\n\tvar next = this.addDFAState(s0_closure);\n\tif (!suppressEdge) {\n\t\tthis.decisionToDFA[this.mode].s0 = next;\n\t}\n\n\tvar predict = this.execATN(input, next);\n\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n\t}\n\treturn predict;\n};\n\nLexerATNSimulator.prototype.execATN = function(input, ds0) {\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"start state closure=\" + ds0.configs);\n\t}\n\tif (ds0.isAcceptState) {\n\t\t// allow zero-length tokens\n\t\tthis.captureSimState(this.prevAccept, input, ds0);\n\t}\n\tvar t = input.LA(1);\n\tvar s = ds0; // s is current/from DFA state\n\n\twhile (true) { // while more work\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"execATN loop starting closure: \" + s.configs);\n\t\t}\n\n\t\t// As we move src->trg, src->trg, we keep track of the previous trg to\n\t\t// avoid looking up the DFA state again, which is expensive.\n\t\t// If the previous target was already part of the DFA, we might\n\t\t// be able to avoid doing a reach operation upon t. If s!=null,\n\t\t// it means that semantic predicates didn't prevent us from\n\t\t// creating a DFA state. Once we know s!=null, we check to see if\n\t\t// the DFA state has an edge already for t. If so, we can just reuse\n\t\t// it's configuration set; there's no point in re-computing it.\n\t\t// This is kind of like doing DFA simulation within the ATN\n\t\t// simulation because DFA simulation is really just a way to avoid\n\t\t// computing reach/closure sets. Technically, once we know that\n\t\t// we have a previously added DFA state, we could jump over to\n\t\t// the DFA simulator. But, that would mean popping back and forth\n\t\t// a lot and making things more complicated algorithmically.\n\t\t// This optimization makes a lot of sense for loops within DFA.\n\t\t// A character will take us back to an existing DFA state\n\t\t// that already has lots of edges out of it. e.g., .* in comments.\n\t\t// print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\t\tvar target = this.getExistingTargetState(s, t);\n\t\t// print(\"Existing:\" + str(target))\n\t\tif (target === null) {\n\t\t\ttarget = this.computeTargetState(input, s, t);\n\t\t\t// print(\"Computed:\" + str(target))\n\t\t}\n\t\tif (target === ATNSimulator.ERROR) {\n\t\t\tbreak;\n\t\t}\n\t\t// If this is a consumable input element, make sure to consume before\n\t\t// capturing the accept state so the input index, line, and char\n\t\t// position accurately reflect the state of the interpreter at the\n\t\t// end of the token.\n\t\tif (t !== Token.EOF) {\n\t\t\tthis.consume(input);\n\t\t}\n\t\tif (target.isAcceptState) {\n\t\t\tthis.captureSimState(this.prevAccept, input, target);\n\t\t\tif (t === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tt = input.LA(1);\n\t\ts = target; // flip; current DFA target becomes new src/from state\n\t}\n\treturn this.failOrAccept(this.prevAccept, input, s.configs, t);\n};\n\n// Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param s The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\nLexerATNSimulator.prototype.getExistingTargetState = function(s, t) {\n\tif (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\treturn null;\n\t}\n\n\tvar target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\tif(target===undefined) {\n\t\ttarget = null;\n\t}\n\tif (LexerATNSimulator.debug && target !== null) {\n\t\tconsole.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n\t}\n\treturn target;\n};\n\n// Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param input The input stream\n// @param s The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\nLexerATNSimulator.prototype.computeTargetState = function(input, s, t) {\n\tvar reach = new OrderedATNConfigSet();\n\t// if we don't find an existing DFA state\n\t// Fill reach starting from closure, following t transitions\n\tthis.getReachableConfigSet(input, s.configs, reach, t);\n\n\tif (reach.items.length === 0) { // we got nowhere on t from s\n\t\tif (!reach.hasSemanticContext) {\n\t\t\t// we got nowhere on t, don't throw out this knowledge; it'd\n\t\t\t// cause a failover from DFA later.\n\t\t\tthis.addDFAEdge(s, t, ATNSimulator.ERROR);\n\t\t}\n\t\t// stop when we can't match any more char\n\t\treturn ATNSimulator.ERROR;\n\t}\n\t// Add an edge from s to target DFA found/created for reach\n\treturn this.addDFAEdge(s, t, null, reach);\n};\n\nLexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {\n\tif (this.prevAccept.dfaState !== null) {\n\t\tvar lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n\t\tthis.accept(input, lexerActionExecutor, this.startIndex,\n\t\t\t\tprevAccept.index, prevAccept.line, prevAccept.column);\n\t\treturn prevAccept.dfaState.prediction;\n\t} else {\n\t\t// if no accept and EOF is first char, return EOF\n\t\tif (t === Token.EOF && input.index === this.startIndex) {\n\t\t\treturn Token.EOF;\n\t\t}\n\t\tthrow new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n\t}\n};\n\n// Given a starting configuration set, figure out all ATN configurations\n// we can reach upon input {@code t}. Parameter {@code reach} is a return\n// parameter.\nLexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,\n\t\treach, t) {\n\t// this is used to skip processing for configs which have a lower priority\n\t// than a config that already reached an accept state for the same rule\n\tvar skipAlt = ATN.INVALID_ALT_NUMBER;\n\tfor (var i = 0; i < closure.items.length; i++) {\n\t\tvar cfg = closure.items[i];\n\t\tvar currentAltReachedAcceptState = (cfg.alt === skipAlt);\n\t\tif (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg\n\t\t\t\t\t.toString(this.recog, true));\n\t\t}\n\t\tfor (var j = 0; j < cfg.state.transitions.length; j++) {\n\t\t\tvar trans = cfg.state.transitions[j]; // for each transition\n\t\t\tvar target = this.getReachableTarget(trans, t);\n\t\t\tif (target !== null) {\n\t\t\t\tvar lexerActionExecutor = cfg.lexerActionExecutor;\n\t\t\t\tif (lexerActionExecutor !== null) {\n\t\t\t\t\tlexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n\t\t\t\t}\n\t\t\t\tvar treatEofAsEpsilon = (t === Token.EOF);\n\t\t\t\tvar config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);\n\t\t\t\tif (this.closure(input, config, reach,\n\t\t\t\t\t\tcurrentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n\t\t\t\t\t// any remaining configs for this alt have a lower priority\n\t\t\t\t\t// than the one that just reached an accept state.\n\t\t\t\t\tskipAlt = cfg.alt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nLexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,\n\t\tstartIndex, index, line, charPos) {\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"ACTION %s\\n\", lexerActionExecutor);\n\t}\n\t// seek to after last char in token\n\tinput.seek(index);\n\tthis.line = line;\n\tthis.column = charPos;\n\tif (lexerActionExecutor !== null && this.recog !== null) {\n\t\tlexerActionExecutor.execute(this.recog, input, startIndex);\n\t}\n};\n\nLexerATNSimulator.prototype.getReachableTarget = function(trans, t) {\n\tif (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\treturn trans.target;\n\t} else {\n\t\treturn null;\n\t}\n};\n\nLexerATNSimulator.prototype.computeStartState = function(input, p) {\n\tvar initialContext = PredictionContext.EMPTY;\n\tvar configs = new OrderedATNConfigSet();\n\tfor (var i = 0; i < p.transitions.length; i++) {\n\t\tvar target = p.transitions[i].target;\n        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);\n\t\tthis.closure(input, cfg, configs, false, false, false);\n\t}\n\treturn configs;\n};\n\n// Since the alternatives within any lexer decision are ordered by\n// preference, this method stops pursuing the closure as soon as an accept\n// state is reached. After the first accept state is reached by depth-first\n// search from {@code config}, all other (potentially reachable) states for\n// this rule would have a lower priority.\n//\n// @return {@code true} if an accept state is reached, otherwise\n// {@code false}.\nLexerATNSimulator.prototype.closure = function(input, config, configs,\n\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n\tvar cfg = null;\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n\t}\n\tif (config.state instanceof RuleStopState) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tif (this.recog !== null) {\n\t\t\t\tconsole.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"closure at rule stop %s\\n\", config);\n\t\t\t}\n\t\t}\n\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\tif (config.context === null || config.context.isEmpty()) {\n\t\t\t\tconfigs.add(config);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconfigs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));\n\t\t\t\tcurrentAltReachedAcceptState = true;\n\t\t\t}\n\t\t}\n\t\tif (config.context !== null && !config.context.isEmpty()) {\n\t\t\tfor (var i = 0; i < config.context.length; i++) {\n\t\t\t\tif (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\tvar newContext = config.context.getParent(i); // \"pop\" return state\n\t\t\t\t\tvar returnState = this.atn.states[config.context.getReturnState(i)];\n\t\t\t\t\tcfg = new LexerATNConfig({ state:returnState, context:newContext }, config);\n\t\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg,\n\t\t\t\t\t\t\tconfigs, currentAltReachedAcceptState, speculative,\n\t\t\t\t\t\t\ttreatEofAsEpsilon);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn currentAltReachedAcceptState;\n\t}\n\t// optimization\n\tif (!config.state.epsilonOnlyTransitions) {\n\t\tif (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n\t\t\tconfigs.add(config);\n\t\t}\n\t}\n\tfor (var j = 0; j < config.state.transitions.length; j++) {\n\t\tvar trans = config.state.transitions[j];\n\t\tcfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\t\tif (cfg !== null) {\n\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs,\n\t\t\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t}\n\t}\n\treturn currentAltReachedAcceptState;\n};\n\n// side-effect: can alter configs.hasSemanticContext\nLexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,\n\t\tconfigs, speculative, treatEofAsEpsilon) {\n\tvar cfg = null;\n\tif (trans.serializationType === Transition.RULE) {\n\t\tvar newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n\t\tcfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);\n\t} else if (trans.serializationType === Transition.PRECEDENCE) {\n\t\tthrow \"Precedence predicates are not supported in lexers.\";\n\t} else if (trans.serializationType === Transition.PREDICATE) {\n\t\t// Track traversing semantic predicates. If we traverse,\n\t\t// we cannot add a DFA state for this \"reach\" computation\n\t\t// because the DFA would not test the predicate again in the\n\t\t// future. Rather than creating collections of semantic predicates\n\t\t// like v3 and testing them on prediction, v4 will test them on the\n\t\t// fly all the time using the ATN not the DFA. This is slower but\n\t\t// semantically it's not used that often. One of the key elements to\n\t\t// this predicate mechanism is not adding DFA states that see\n\t\t// predicates immediately afterwards in the ATN. For example,\n\n\t\t// a : ID {p1}? | ID {p2}? ;\n\n\t\t// should create the start state for rule 'a' (to save start state\n\t\t// competition), but should not create target of ID state. The\n\t\t// collection of ATN states the following ID references includes\n\t\t// states reached by traversing predicates. Since this is when we\n\t\t// test them, we cannot cash the DFA state target of ID.\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n\t\t}\n\t\tconfigs.hasSemanticContext = true;\n\t\tif (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t}\n\t} else if (trans.serializationType === Transition.ACTION) {\n\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t// execute actions anywhere in the start rule for a token.\n\t\t\t//\n\t\t\t// TODO: if the entry rule is invoked recursively, some\n\t\t\t// actions may be executed during the recursive call. The\n\t\t\t// problem can appear when hasEmptyPath() is true but\n\t\t\t// isEmpty() is false. In this case, the config needs to be\n\t\t\t// split into two contexts - one with just the empty path\n\t\t\t// and another with everything but the empty path.\n\t\t\t// Unfortunately, the current algorithm does not allow\n\t\t\t// getEpsilonTarget to return two configurations, so\n\t\t\t// additional modifications are needed before we can support\n\t\t\t// the split operation.\n\t\t\tvar lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,\n\t\t\t\t\tthis.atn.lexerActions[trans.actionIndex]);\n\t\t\tcfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);\n\t\t} else {\n\t\t\t// ignore actions in referenced rules\n\t\t\tcfg = new LexerATNConfig( { state:trans.target}, config);\n\t\t}\n\t} else if (trans.serializationType === Transition.EPSILON) {\n\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t} else if (trans.serializationType === Transition.ATOM ||\n\t\t\t\ttrans.serializationType === Transition.RANGE ||\n\t\t\t\ttrans.serializationType === Transition.SET) {\n\t\tif (treatEofAsEpsilon) {\n\t\t\tif (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\t\tcfg = new LexerATNConfig( { state:trans.target }, config);\n\t\t\t}\n\t\t}\n\t}\n\treturn cfg;\n};\n\n// Evaluate a predicate specified in the lexer.\n//\n// <p>If {@code speculative} is {@code true}, this method was called before\n// {@link //consume} for the matched character. This method should call\n// {@link //consume} before evaluating the predicate to ensure position\n// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n// and {@link Lexer//getcolumn}, properly reflect the current\n// lexer state. This method should restore {@code input} and the simulator\n// to the original state before returning (i.e. undo the actions made by the\n// call to {@link //consume}.</p>\n//\n// @param input The input stream.\n// @param ruleIndex The rule containing the predicate.\n// @param predIndex The index of the predicate within the rule.\n// @param speculative {@code true} if the current index in {@code input} is\n// one character before the predicate's location.\n//\n// @return {@code true} if the specified predicate evaluates to\n// {@code true}.\n// /\nLexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,\n\t\tpredIndex, speculative) {\n\t// assume true if no recognizer was provided\n\tif (this.recog === null) {\n\t\treturn true;\n\t}\n\tif (!speculative) {\n\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t}\n\tvar savedcolumn = this.column;\n\tvar savedLine = this.line;\n\tvar index = input.index;\n\tvar marker = input.mark();\n\ttry {\n\t\tthis.consume(input);\n\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t} finally {\n\t\tthis.column = savedcolumn;\n\t\tthis.line = savedLine;\n\t\tinput.seek(index);\n\t\tinput.release(marker);\n\t}\n};\n\nLexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {\n\tsettings.index = input.index;\n\tsettings.line = this.line;\n\tsettings.column = this.column;\n\tsettings.dfaState = dfaState;\n};\n\nLexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {\n\tif (to === undefined) {\n\t\tto = null;\n\t}\n\tif (cfgs === undefined) {\n\t\tcfgs = null;\n\t}\n\tif (to === null && cfgs !== null) {\n\t\t// leading to this call, ATNConfigSet.hasSemanticContext is used as a\n\t\t// marker indicating dynamic predicate evaluation makes this edge\n\t\t// dependent on the specific input sequence, so the static edge in the\n\t\t// DFA should be omitted. The target DFAState is still created since\n\t\t// execATN has the ability to resynchronize with the DFA state cache\n\t\t// following the predicate evaluation step.\n\t\t//\n\t\t// TJP notes: next time through the DFA, we see a pred again and eval.\n\t\t// If that gets us to a previously created (but dangling) DFA\n\t\t// state, we can continue in pure DFA mode from there.\n\t\t// /\n\t\tvar suppressEdge = cfgs.hasSemanticContext;\n\t\tcfgs.hasSemanticContext = false;\n\n\t\tto = this.addDFAState(cfgs);\n\n\t\tif (suppressEdge) {\n\t\t\treturn to;\n\t\t}\n\t}\n\t// add the edge\n\tif (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t// Only track edges within the DFA bounds\n\t\treturn to;\n\t}\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n\t}\n\tif (from_.edges === null) {\n\t\t// make room for tokens 1..n and -1 masquerading as index 0\n\t\tfrom_.edges = [];\n\t}\n\tfrom_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n\treturn to;\n};\n\n// Add a new DFA state if there isn't one with this set of\n// configurations already. This method also detects the first\n// configuration containing an ATN rule stop state. Later, when\n// traversing the DFA, we will know which rule to accept.\nLexerATNSimulator.prototype.addDFAState = function(configs) {\n\tvar proposed = new DFAState(null, configs);\n\tvar firstConfigWithRuleStopState = null;\n\tfor (var i = 0; i < configs.items.length; i++) {\n\t\tvar cfg = configs.items[i];\n\t\tif (cfg.state instanceof RuleStopState) {\n\t\t\tfirstConfigWithRuleStopState = cfg;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (firstConfigWithRuleStopState !== null) {\n\t\tproposed.isAcceptState = true;\n\t\tproposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n\t\tproposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n\t}\n\tvar dfa = this.decisionToDFA[this.mode];\n\tvar existing = dfa.states.get(proposed);\n\tif (existing!==null) {\n\t\treturn existing;\n\t}\n\tvar newState = proposed;\n\tnewState.stateNumber = dfa.states.length;\n\tconfigs.setReadonly(true);\n\tnewState.configs = configs;\n\tdfa.states.add(newState);\n\treturn newState;\n};\n\nLexerATNSimulator.prototype.getDFA = function(mode) {\n\treturn this.decisionToDFA[mode];\n};\n\n// Get the text matched so far for the current token.\nLexerATNSimulator.prototype.getText = function(input) {\n\t// index is first lookahead char, don't include.\n\treturn input.getText(this.startIndex, input.index - 1);\n};\n\nLexerATNSimulator.prototype.consume = function(input) {\n\tvar curChar = input.LA(1);\n\tif (curChar === \"\\n\".charCodeAt(0)) {\n\t\tthis.line += 1;\n\t\tthis.column = 0;\n\t} else {\n\t\tthis.column += 1;\n\t}\n\tinput.consume();\n};\n\nLexerATNSimulator.prototype.getTokenName = function(tt) {\n\tif (tt === -1) {\n\t\treturn \"EOF\";\n\t} else {\n\t\treturn \"'\" + String.fromCharCode(tt) + \"'\";\n\t}\n};\n\nexports.LexerATNSimulator = LexerATNSimulator;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// This default implementation of {@link TokenFactory} creates\n// {@link CommonToken} objects.\n//\n\nvar CommonToken = require('./Token').CommonToken;\n\nfunction TokenFactory() {\n\treturn this;\n}\n\nfunction CommonTokenFactory(copyText) {\n\tTokenFactory.call(this);\n    // Indicates whether {@link CommonToken//setText} should be called after\n    // constructing tokens to explicitly set the text. This is useful for cases\n    // where the input stream might not be able to provide arbitrary substrings\n    // of text from the input after the lexer creates a token (e.g. the\n    // implementation of {@link CharStream//getText} in\n    // {@link UnbufferedCharStream} throws an\n    // {@link UnsupportedOperationException}). Explicitly setting the token text\n    // allows {@link Token//getText} to be called at any time regardless of the\n    // input stream implementation.\n    //\n    // <p>\n    // The default value is {@code false} to avoid the performance and memory\n    // overhead of copying text for every token unless explicitly requested.</p>\n    //\n    this.copyText = copyText===undefined ? false : copyText;\n\treturn this;\n}\n\nCommonTokenFactory.prototype = Object.create(TokenFactory.prototype);\nCommonTokenFactory.prototype.constructor = CommonTokenFactory;\n\n//\n// The default {@link CommonTokenFactory} instance.\n//\n// <p>\n// This token factory does not explicitly copy token text when constructing\n// tokens.</p>\n//\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nCommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {\n    var t = new CommonToken(source, type, channel, start, stop);\n    t.line = line;\n    t.column = column;\n    if (text !==null) {\n        t.text = text;\n    } else if (this.copyText && source[1] !==null) {\n        t.text = source[1].getText(start,stop);\n    }\n    return t;\n};\n\nCommonTokenFactory.prototype.createThin = function(type, text) {\n    var t = new CommonToken(null, type);\n    t.text = text;\n    return t;\n};\n\nexports.CommonTokenFactory = CommonTokenFactory;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// Represents an executor for a sequence of lexer actions which traversed during\n// the matching operation of a lexer rule (token).\n//\n// <p>The executor tracks position information for position-dependent lexer actions\n// efficiently, ensuring that actions appearing only at the end of the rule do\n// not cause bloating of the {@link DFA} created for the lexer.</p>\n\nvar hashStuff = require(\"../Utils\").hashStuff;\nvar LexerIndexedCustomAction = require('./LexerAction').LexerIndexedCustomAction;\n\nfunction LexerActionExecutor(lexerActions) {\n\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t// Caches the result of {@link //hashCode} since the hash code is an element\n\t// of the performance-critical {@link LexerATNConfig//hashCode} operation.\n\tthis.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t// lexerActions]))\n\treturn this;\n}\n\n// Creates a {@link LexerActionExecutor} which executes the actions for\n// the input {@code lexerActionExecutor} followed by a specified\n// {@code lexerAction}.\n//\n// @param lexerActionExecutor The executor for actions already traversed by\n// the lexer while matching a token within a particular\n// {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n// though it were an empty executor.\n// @param lexerAction The lexer action to execute after the actions\n// specified in {@code lexerActionExecutor}.\n//\n// @return A {@link LexerActionExecutor} for executing the combine actions\n// of {@code lexerActionExecutor} and {@code lexerAction}.\nLexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {\n\tif (lexerActionExecutor === null) {\n\t\treturn new LexerActionExecutor([ lexerAction ]);\n\t}\n\tvar lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);\n\treturn new LexerActionExecutor(lexerActions);\n};\n\n// Creates a {@link LexerActionExecutor} which encodes the current offset\n// for position-dependent lexer actions.\n//\n// <p>Normally, when the executor encounters lexer actions where\n// {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n// {@link IntStream//seek} on the input {@link CharStream} to set the input\n// position to the <em>end</em> of the current token. This behavior provides\n// for efficient DFA representation of lexer actions which appear at the end\n// of a lexer rule, even when the lexer rule matches a variable number of\n// characters.</p>\n//\n// <p>Prior to traversing a match transition in the ATN, the current offset\n// from the token start index is assigned to all position-dependent lexer\n// actions which have not already been assigned a fixed offset. By storing\n// the offsets relative to the token start index, the DFA representation of\n// lexer actions which appear in the middle of tokens remains efficient due\n// to sharing among tokens of the same length, regardless of their absolute\n// position in the input stream.</p>\n//\n// <p>If the current executor already has offsets assigned to all\n// position-dependent lexer actions, the method returns {@code this}.</p>\n//\n// @param offset The current offset to assign to all position-dependent\n// lexer actions which do not already have offsets assigned.\n//\n// @return A {@link LexerActionExecutor} which stores input stream offsets\n// for all position-dependent lexer actions.\n// /\nLexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {\n\tvar updatedLexerActions = null;\n\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\tif (this.lexerActions[i].isPositionDependent &&\n\t\t\t\t!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\tif (updatedLexerActions === null) {\n\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t}\n\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset,\n\t\t\t\t\tthis.lexerActions[i]);\n\t\t}\n\t}\n\tif (updatedLexerActions === null) {\n\t\treturn this;\n\t} else {\n\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t}\n};\n\n// Execute the actions encapsulated by this executor within the context of a\n// particular {@link Lexer}.\n//\n// <p>This method calls {@link IntStream//seek} to set the position of the\n// {@code input} {@link CharStream} prior to calling\n// {@link LexerAction//execute} on a position-dependent action. Before the\n// method returns, the input position will be restored to the same position\n// it was in when the method was invoked.</p>\n//\n// @param lexer The lexer instance.\n// @param input The input stream which is the source for the current token.\n// When this method is called, the current {@link IntStream//index} for\n// {@code input} should be the start of the following token, i.e. 1\n// character past the end of the current token.\n// @param startIndex The token start index. This value may be passed to\n// {@link IntStream//seek} to set the {@code input} position to the beginning\n// of the token.\n// /\nLexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {\n\tvar requiresSeek = false;\n\tvar stopIndex = input.index;\n\ttry {\n\t\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\t\tvar lexerAction = this.lexerActions[i];\n\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\tvar offset = lexerAction.offset;\n\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\trequiresSeek = (startIndex + offset) !== stopIndex;\n\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t\trequiresSeek = false;\n\t\t\t}\n\t\t\tlexerAction.execute(lexer);\n\t\t}\n\t} finally {\n\t\tif (requiresSeek) {\n\t\t\tinput.seek(stopIndex);\n\t\t}\n\t}\n};\n\nLexerActionExecutor.prototype.hashCode = function() {\n\treturn this.cachedHashCode;\n};\n\nLexerActionExecutor.prototype.updateHashCode = function(hash) {\n    hash.update(this.cachedHashCode);\n};\n\n\nLexerActionExecutor.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\treturn false;\n\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\treturn false;\n\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\treturn false;\n\t} else {\n\t\tvar numActions = this.lexerActions.length\n\t\tfor (var idx = 0; idx < numActions; ++idx) {\n\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n};\n\nexports.LexerActionExecutor = LexerActionExecutor;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n//\n// <p>\n// The basic complexity of the adaptive strategy makes it harder to understand.\n// We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n// requests go through the DFA first. If they reach a state without an edge for\n// the current symbol, the algorithm fails over to the ATN simulation to\n// complete the DFA path for the current input (until it finds a conflict state\n// or uniquely predicting state).</p>\n//\n// <p>\n// All of that is done without using the outer context because we want to create\n// a DFA that is not dependent upon the rule invocation stack when we do a\n// prediction. One DFA works in all contexts. We avoid using context not\n// necessarily because it's slower, although it can be, but because of the DFA\n// caching problem. The closure routine only considers the rule invocation stack\n// created during prediction beginning in the decision rule. For example, if\n// prediction occurs without invoking another rule's ATN, there are no context\n// stacks in the configurations. When lack of context leads to a conflict, we\n// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n// strategy (versus full LL(*)).</p>\n//\n// <p>\n// When SLL yields a configuration set with conflict, we rewind the input and\n// retry the ATN simulation, this time using full outer context without adding\n// to the DFA. Configuration context stacks will be the full invocation stacks\n// from the start rule. If we get a conflict using full context, then we can\n// definitively say we have a true ambiguity for that input sequence. If we\n// don't get a conflict, it implies that the decision is sensitive to the outer\n// context. (It is not context-sensitive in the sense of context-sensitive\n// grammars.)</p>\n//\n// <p>\n// The next time we reach this DFA state with an SLL conflict, through DFA\n// simulation, we will again retry the ATN simulation using full context mode.\n// This is slow because we can't save the results and have to \"interpret\" the\n// ATN each time we get that input.</p>\n//\n// <p>\n// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n//\n// <p>\n// We could cache results from full context to predicted alternative easily and\n// that saves a lot of time but doesn't work in presence of predicates. The set\n// of visible predicates from the ATN start state changes depending on the\n// context, because closure can fall off the end of a rule. I tried to cache\n// tuples (stack context, semantic context, predicted alt) but it was slower\n// than interpreting and much more complicated. Also required a huge amount of\n// memory. The goal is not to create the world's fastest parser anyway. I'd like\n// to keep this algorithm simple. By launching multiple threads, we can improve\n// the speed of parsing across a large number of files.</p>\n//\n// <p>\n// There is no strict ordering between the amount of input used by SLL vs LL,\n// which makes it really hard to build a cache for full context. Let's say that\n// we have input A B C that leads to an SLL conflict with full context X. That\n// implies that using X we might only use A B but we could also use A B C D to\n// resolve conflict. Input A B C D could predict alternative 1 in one position\n// in the input and A B C E could predict alternative 2 in another position in\n// input. The conflicting SLL configurations could still be non-unique in the\n// full context prediction, which would lead us to requiring more input than the\n// original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n// input\tused during the previous prediction. That amounts to a cache that maps\n// X to a specific DFA for that context.</p>\n//\n// <p>\n// Something should be done for left-recursive expression predictions. They are\n// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n// with full LL thing Sam does.</p>\n//\n// <p>\n// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n//\n// <p>\n// We avoid doing full context retry when the outer context is empty, we did not\n// dip into the outer context by falling off the end of the decision state rule,\n// or when we force SLL mode.</p>\n//\n// <p>\n// As an example of the not dip into outer context case, consider as super\n// constructor calls versus function calls. One grammar might look like\n// this:</p>\n//\n// <pre>\n// ctorBody\n//   : '{' superCall? stat* '}'\n//   ;\n// </pre>\n//\n// <p>\n// Or, you might see something like</p>\n//\n// <pre>\n// stat\n//   : superCall ';'\n//   | expression ';'\n//   | ...\n//   ;\n// </pre>\n//\n// <p>\n// In both cases I believe that no closure operations will dip into the outer\n// context. In the first case ctorBody in the worst case will stop at the '}'.\n// In the 2nd case it should stop at the ';'. Both cases should stay within the\n// entry rule and not dip into the outer context.</p>\n//\n// <p>\n// <strong>PREDICATES</strong></p>\n//\n// <p>\n// Predicates are always evaluated if present in either SLL or LL both. SLL and\n// LL simulation deals with predicates differently. SLL collects predicates as\n// it performs closure operations like ANTLR v3 did. It delays predicate\n// evaluation until it reaches and accept state. This allows us to cache the SLL\n// ATN simulation whereas, if we had evaluated predicates on-the-fly during\n// closure, the DFA state configuration sets would be different and we couldn't\n// build up a suitable DFA.</p>\n//\n// <p>\n// When building a DFA accept state during ATN simulation, we evaluate any\n// predicates and return the sole semantically valid alternative. If there is\n// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n// we throw an exception. Alternatives without predicates act like they have\n// true predicates. The simple way to think about it is to strip away all\n// alternatives with false predicates and choose the minimum alternative that\n// remains.</p>\n//\n// <p>\n// When we start in the DFA and reach an accept state that's predicated, we test\n// those and return the minimum semantically viable alternative. If no\n// alternatives are viable, we throw an exception.</p>\n//\n// <p>\n// During full LL ATN simulation, closure always evaluates predicates and\n// on-the-fly. This is crucial to reducing the configuration set size during\n// closure. It hits a landmine when parsing with the Java grammar, for example,\n// without this on-the-fly evaluation.</p>\n//\n// <p>\n// <strong>SHARING DFA</strong></p>\n//\n// <p>\n// All instances of the same parser share the same decision DFAs through a\n// static field. Each instance gets its own ATN simulator but they share the\n// same {@link //decisionToDFA} field. They also share a\n// {@link PredictionContextCache} object that makes sure that all\n// {@link PredictionContext} objects are shared among the DFA states. This makes\n// a big size difference.</p>\n//\n// <p>\n// <strong>THREAD SAFETY</strong></p>\n//\n// <p>\n// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n// it adds a new DFA object to that array. {@link //addDFAEdge}\n// locks on the DFA for the current decision when setting the\n// {@link DFAState//edges} field. {@link //addDFAState} locks on\n// the DFA for the current decision when looking up a DFA state to see if it\n// already exists. We must make sure that all requests to add DFA states that\n// are equivalent result in the same shared DFA object. This is because lots of\n// threads will be trying to update the DFA at once. The\n// {@link //addDFAState} method also locks inside the DFA lock\n// but this time on the shared context cache when it rebuilds the\n// configurations' {@link PredictionContext} objects using cached\n// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n// safe as long as we can guarantee that all threads referencing\n// {@code s.edge[t]} get the same physical target {@link DFAState}, or\n// {@code null}. Once into the DFA, the DFA simulation does not reference the\n// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n// targets. The DFA simulator will either find {@link DFAState//edges} to be\n// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n// {@code dfa.edges[t]} to be non-null. The\n// {@link //addDFAEdge} method could be racing to set the field\n// but in either case the DFA simulator works; if {@code null}, and requests ATN\n// simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n// way it will work because it's not doing a test and set operation.</p>\n//\n// <p>\n// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n// Parsing)</strong></p>\n//\n// <p>\n// Sam pointed out that if SLL does not give a syntax error, then there is no\n// point in doing full LL, which is slower. We only have to try LL if we get a\n// syntax error. For maximum speed, Sam starts the parser set to pure SLL\n// mode with the {@link BailErrorStrategy}:</p>\n//\n// <pre>\n// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n// </pre>\n//\n// <p>\n// If it does not get a syntax error, then we're done. If it does get a syntax\n// error, we need to retry with the combined SLL/LL strategy.</p>\n//\n// <p>\n// The reason this works is as follows. If there are no SLL conflicts, then the\n// grammar is SLL (at least for that input set). If there is an SLL conflict,\n// the full LL analysis must yield a set of viable alternatives which is a\n// subset of the alternatives reported by SLL. If the LL set is a singleton,\n// then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n// set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n// is truly ambiguous on the current input. If the LL set is smaller, then the\n// SLL conflict resolution might choose an alternative that the full LL would\n// rule out as a possibility based upon better context information. If that's\n// the case, then the SLL parse will definitely get an error because the full LL\n// analysis says it's not viable. If SLL conflict resolution chooses an\n// alternative within the LL set, them both SLL and LL would choose the same\n// alternative because they both choose the minimum of multiple conflicting\n// alternatives.</p>\n//\n// <p>\n// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n// parsing will get an error because SLL will pursue alternative 1. If\n// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n// choose the same alternative because alternative one is the minimum of either\n// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n//\n// <p>\n// Of course, if the input is invalid, then we will get an error for sure in\n// both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n// the input.</p>\n//\n\nvar Utils = require('./../Utils');\nvar Set = Utils.Set;\nvar BitSet = Utils.BitSet;\nvar DoubleDict = Utils.DoubleDict;\nvar ATN = require('./ATN').ATN;\nvar ATNState = require('./ATNState').ATNState;\nvar ATNConfig = require('./ATNConfig').ATNConfig;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar Token = require('./../Token').Token;\nvar DFAState = require('./../dfa/DFAState').DFAState;\nvar PredPrediction = require('./../dfa/DFAState').PredPrediction;\nvar ATNSimulator = require('./ATNSimulator').ATNSimulator;\nvar PredictionMode = require('./PredictionMode').PredictionMode;\nvar RuleContext = require('./../RuleContext').RuleContext;\nvar ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar StarLoopEntryState = require('./ATNState').StarLoopEntryState;\nvar RuleStopState = require('./ATNState').RuleStopState;\nvar PredictionContext = require('./../PredictionContext').PredictionContext;\nvar Interval = require('./../IntervalSet').Interval;\nvar Transitions = require('./Transition');\nvar Transition = Transitions.Transition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar NoViableAltException = require('./../error/Errors').NoViableAltException;\n\nvar SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;\nvar predictionContextFromRuleContext = require('./../PredictionContext').predictionContextFromRuleContext;\n\nfunction ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {\n\tATNSimulator.call(this, atn, sharedContextCache);\n    this.parser = parser;\n    this.decisionToDFA = decisionToDFA;\n    // SLL, LL, or LL + exact ambig detection?//\n    this.predictionMode = PredictionMode.LL;\n    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n    this._input = null;\n    this._startIndex = 0;\n    this._outerContext = null;\n    this._dfa = null;\n    // Each prediction operation uses a cache for merge of prediction contexts.\n    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n    //  isn't synchronized but we're ok since two threads shouldn't reuse same\n    //  parser/atnsim object because it can only handle one input at a time.\n    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n    //  also be examined during cache lookup.\n    //\n    this.mergeCache = null;\n    return this;\n}\n\nParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nParserATNSimulator.prototype.constructor = ParserATNSimulator;\n\nParserATNSimulator.prototype.debug = false;\nParserATNSimulator.prototype.debug_closure = false;\nParserATNSimulator.prototype.debug_add = false;\nParserATNSimulator.prototype.debug_list_atn_decisions = false;\nParserATNSimulator.prototype.dfa_debug = false;\nParserATNSimulator.prototype.retry_debug = false;\n\n\nParserATNSimulator.prototype.reset = function() {\n};\n\nParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"adaptivePredict decision \" + decision +\n                               \" exec LA(1)==\" + this.getLookaheadName(input) +\n                               \" line \" + input.LT(1).line + \":\" +\n                               input.LT(1).column);\n    }\n    this._input = input;\n    this._startIndex = input.index;\n    this._outerContext = outerContext;\n\n    var dfa = this.decisionToDFA[decision];\n    this._dfa = dfa;\n    var m = input.mark();\n    var index = input.index;\n\n    // Now we are certain to have a specific decision's DFA\n    // But, do we still need an initial state?\n    try {\n        var s0;\n        if (dfa.precedenceDfa) {\n            // the start state for a precedence DFA depends on the current\n            // parser precedence, and is provided by a DFA method.\n            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n        } else {\n            // the start state for a \"regular\" DFA is just s0\n            s0 = dfa.s0;\n        }\n        if (s0===null) {\n            if (outerContext===null) {\n                outerContext = RuleContext.EMPTY;\n            }\n            if (this.debug || this.debug_list_atn_decisions) {\n                console.log(\"predictATN decision \" + dfa.decision +\n                                   \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                   \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n            }\n\n            var fullCtx = false;\n            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n            if( dfa.precedenceDfa) {\n                // If this is a precedence DFA, we use applyPrecedenceFilter\n                // to convert the computed start state to a precedence start\n                // state. We then use DFA.setPrecedenceStartState to set the\n                // appropriate start state for the precedence level rather\n                // than simply setting DFA.s0.\n                //\n                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                s0_closure = this.applyPrecedenceFilter(s0_closure);\n                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n            } else {\n                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                dfa.s0 = s0;\n            }\n        }\n        var alt = this.execATN(dfa, s0, input, index, outerContext);\n        if (this.debug) {\n            console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n        }\n        return alt;\n    } finally {\n        this._dfa = null;\n        this.mergeCache = null; // wack cache after each prediction\n        input.seek(index);\n        input.release(m);\n    }\n};\n// Performs ATN simulation to compute a predicted alternative based\n//  upon the remaining input, but also updates the DFA cache to avoid\n//  having to traverse the ATN again for the same input sequence.\n\n// There are some key conditions we're looking for after computing a new\n// set of ATN configs (proposed DFA state):\n      // if the set is empty, there is no viable alternative for current symbol\n      // does the state uniquely predict an alternative?\n      // does the state have a conflict that would prevent us from\n      //   putting it on the work list?\n\n// We also have some key operations to do:\n      // add an edge from previous DFA state to potentially new DFA state, D,\n      //   upon current symbol but only if adding to work list, which means in all\n      //   cases except no viable alternative (and possibly non-greedy decisions?)\n      // collecting predicates and adding semantic context to DFA accept states\n      // adding rule context to context-sensitive DFA accept states\n      // consuming an input symbol\n      // reporting a conflict\n      // reporting an ambiguity\n      // reporting a context sensitivity\n      // reporting insufficient predicates\n\n// cover these cases:\n//    dead end\n//    single alt\n//    single alt + preds\n//    conflict\n//    conflict + preds\n//\nParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATN decision \" + dfa.decision +\n                \" exec LA(1)==\" + this.getLookaheadName(input) +\n                \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n    }\n    var alt;\n    var previousD = s0;\n\n    if (this.debug) {\n        console.log(\"s0 = \" + s0);\n    }\n    var t = input.LA(1);\n    while(true) { // while more work\n        var D = this.getExistingTargetState(previousD, t);\n        if(D===null) {\n            D = this.computeTargetState(dfa, previousD, t);\n        }\n        if(D===ATNSimulator.ERROR) {\n            // if any configs in previous dipped into outer context, that\n            // means that input up to t actually finished entry rule\n            // at least for SLL decision. Full LL doesn't dip into outer\n            // so don't need special case.\n            // We will get an error no matter what so delay until after\n            // decision; better error message. Also, no reachable target\n            // ATN states in SLL implies LL will also get nowhere.\n            // If conflict in states that dip out, choose min since we\n            // will get error no matter what.\n            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n            input.seek(startIndex);\n            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n            if(alt!==ATN.INVALID_ALT_NUMBER) {\n                return alt;\n            } else {\n                throw e;\n            }\n        }\n        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n            var conflictingAlts = null;\n            if (D.predicates!==null) {\n                if (this.debug) {\n                    console.log(\"DFA state has preds in DFA sim LL failover\");\n                }\n                var conflictIndex = input.index;\n                if(conflictIndex !== startIndex) {\n                    input.seek(startIndex);\n                }\n                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (conflictingAlts.length===1) {\n                    if(this.debug) {\n                        console.log(\"Full LL avoided\");\n                    }\n                    return conflictingAlts.minValue();\n                }\n                if (conflictIndex !== startIndex) {\n                    // restore the index so reporting the fallback to full\n                    // context occurs with the index at the correct spot\n                    input.seek(conflictIndex);\n                }\n            }\n            if (this.dfa_debug) {\n                console.log(\"ctx sensitive state \" + outerContext +\" in \" + D);\n            }\n            var fullCtx = true;\n            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n            return alt;\n        }\n        if (D.isAcceptState) {\n            if (D.predicates===null) {\n                return D.prediction;\n            }\n            var stopIndex = input.index;\n            input.seek(startIndex);\n            var alts = this.evalSemanticContext(D.predicates, outerContext, true);\n            if (alts.length===0) {\n                throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n            } else if (alts.length===1) {\n                return alts.minValue();\n            } else {\n                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                return alts.minValue();\n            }\n        }\n        previousD = D;\n\n        if (t !== Token.EOF) {\n            input.consume();\n            t = input.LA(1);\n        }\n    }\n};\n//\n// Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param previousD The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\n//\nParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {\n    var edges = previousD.edges;\n    if (edges===null) {\n        return null;\n    } else {\n        return edges[t + 1] || null;\n    }\n};\n//\n// Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param dfa The DFA\n// @param previousD The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\n//\nParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {\n   var reach = this.computeReachSet(previousD.configs, t, false);\n    if(reach===null) {\n        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n        return ATNSimulator.ERROR;\n    }\n    // create new target state; we'll add to DFA after it's complete\n    var D = new DFAState(null, reach);\n\n    var predictedAlt = this.getUniqueAlt(reach);\n\n    if (this.debug) {\n        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) +\n                    \", previous=\" + previousD.configs +\n                    \", configs=\" + reach +\n                    \", predict=\" + predictedAlt +\n                    \", allSubsetsConflict=\" +\n                    PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" +\n                    this.getConflictingAlts(reach));\n    }\n    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {\n        // NO CONFLICT, UNIQUELY PREDICTED ALT\n        D.isAcceptState = true;\n        D.configs.uniqueAlt = predictedAlt;\n        D.prediction = predictedAlt;\n    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n        // MORE THAN ONE VIABLE ALTERNATIVE\n        D.configs.conflictingAlts = this.getConflictingAlts(reach);\n        D.requiresFullContext = true;\n        // in SLL-only mode, we will stop at this state and return the minimum alt\n        D.isAcceptState = true;\n        D.prediction = D.configs.conflictingAlts.minValue();\n    }\n    if (D.isAcceptState && D.configs.hasSemanticContext) {\n        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n        if( D.predicates!==null) {\n            D.prediction = ATN.INVALID_ALT_NUMBER;\n        }\n    }\n    // all adds to dfa are done after we've created full D state\n    D = this.addDFAEdge(dfa, previousD, t, D);\n    return D;\n};\n\nParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {\n    // We need to test all predicates, even in DFA states that\n    // uniquely predict alternative.\n    var nalts = decisionState.transitions.length;\n    // Update DFA so reach becomes accept state with (predicate,alt)\n    // pairs if preds found for conflicting alts\n    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n    if (altToPred!==null) {\n        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n    } else {\n        // There are preds in configs but they might go away\n        // when OR'd together like {p}? || NONE == NONE. If neither\n        // alt has preds, resolve to min alt\n        dfaState.prediction = altsToCollectPredsFrom.minValue();\n    }\n};\n\n// comes back with reach.uniqueAlt set to a valid alt\nParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over\n                                     s0,\n                                     input,\n                                     startIndex,\n                                     outerContext) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATNWithFullContext \"+s0);\n    }\n    var fullCtx = true;\n    var foundExactAmbig = false;\n    var reach = null;\n    var previous = s0;\n    input.seek(startIndex);\n    var t = input.LA(1);\n    var predictedAlt = -1;\n    while (true) { // while more work\n        reach = this.computeReachSet(previous, t, fullCtx);\n        if (reach===null) {\n            // if any configs in previous dipped into outer context, that\n            // means that input up to t actually finished entry rule\n            // at least for LL decision. Full LL doesn't dip into outer\n            // so don't need special case.\n            // We will get an error no matter what so delay until after\n            // decision; better error message. Also, no reachable target\n            // ATN states in SLL implies LL will also get nowhere.\n            // If conflict in states that dip out, choose min since we\n            // will get error no matter what.\n            var e = this.noViableAlt(input, outerContext, previous, startIndex);\n            input.seek(startIndex);\n            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n            if(alt!==ATN.INVALID_ALT_NUMBER) {\n                return alt;\n            } else {\n                throw e;\n            }\n        }\n        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        if(this.debug) {\n            console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" +\n                  PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" +\n                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n        }\n        reach.uniqueAlt = this.getUniqueAlt(reach);\n        // unique prediction?\n        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {\n            predictedAlt = reach.uniqueAlt;\n            break;\n        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n                break;\n            }\n        } else {\n            // In exact ambiguity mode, we never try to terminate early.\n            // Just keeps scarfing until we know what the conflict is\n            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n                foundExactAmbig = true;\n                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n                break;\n            }\n            // else there are multiple non-conflicting subsets or\n            // we're not sure what the ambiguity is yet.\n            // So, keep going.\n        }\n        previous = reach;\n        if( t !== Token.EOF) {\n            input.consume();\n            t = input.LA(1);\n        }\n    }\n    // If the configuration set uniquely predicts an alternative,\n    // without conflict, then we know that it's a full LL decision\n    // not SLL.\n    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {\n        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n        return predictedAlt;\n    }\n    // We do not check predicates here because we have checked them\n    // on-the-fly when doing full context prediction.\n\n    //\n    // In non-exact ambiguity detection mode, we might\tactually be able to\n    // detect an exact ambiguity, but I'm not going to spend the cycles\n    // needed to check. We only emit ambiguity warnings in exact ambiguity\n    // mode.\n    //\n    // For example, we might know that we have conflicting configurations.\n    // But, that does not mean that there is no way forward without a\n    // conflict. It's possible to have nonconflicting alt subsets as in:\n\n    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n    // from\n    //\n    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n    //\n    // In this case, (17,1,[5 $]) indicates there is some next sequence that\n    // would resolve this without conflict to alternative 1. Any other viable\n    // next sequence, however, is associated with a conflict.  We stop\n    // looking for input because no amount of further lookahead will alter\n    // the fact that we should predict alternative 1.  We just can't say for\n    // sure that there is an ambiguity without looking further.\n\n    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n    return predictedAlt;\n};\n\nParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {\n    if (this.debug) {\n        console.log(\"in computeReachSet, starting closure: \" + closure);\n    }\n    if( this.mergeCache===null) {\n        this.mergeCache = new DoubleDict();\n    }\n    var intermediate = new ATNConfigSet(fullCtx);\n\n    // Configurations already in a rule stop state indicate reaching the end\n    // of the decision rule (local context) or end of the start rule (full\n    // context). Once reached, these configurations are never updated by a\n    // closure operation, so they are handled separately for the performance\n    // advantage of having a smaller intermediate set when calling closure.\n    //\n    // For full-context reach operations, separate handling is required to\n    // ensure that the alternative matching the longest overall sequence is\n    // chosen when multiple such configurations can match the input.\n\n    var skippedStopStates = null;\n\n    // First figure out where we can reach on input t\n    for (var i=0; i<closure.items.length;i++) {\n        var c = closure.items[i];\n        if(this.debug_add) {\n            console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n        }\n        if (c.state instanceof RuleStopState) {\n            if (fullCtx || t === Token.EOF) {\n                if (skippedStopStates===null) {\n                    skippedStopStates = [];\n                }\n                skippedStopStates.push(c);\n                if(this.debug_add) {\n                    console.log(\"added \" + c + \" to skippedStopStates\");\n                }\n            }\n            continue;\n        }\n        for(var j=0;j<c.state.transitions.length;j++) {\n            var trans = c.state.transitions[j];\n            var target = this.getReachableTarget(trans, t);\n            if (target!==null) {\n                var cfg = new ATNConfig({state:target}, c);\n                intermediate.add(cfg, this.mergeCache);\n                if(this.debug_add) {\n                    console.log(\"added \" + cfg + \" to intermediate\");\n                }\n            }\n        }\n    }\n    // Now figure out where the reach operation can take us...\n    var reach = null;\n\n    // This block optimizes the reach operation for intermediate sets which\n    // trivially indicate a termination state for the overall\n    // adaptivePredict operation.\n    //\n    // The conditions assume that intermediate\n    // contains all configurations relevant to the reach set, but this\n    // condition is not true when one or more configurations have been\n    // withheld in skippedStopStates, or when the current symbol is EOF.\n    //\n    if (skippedStopStates===null && t!==Token.EOF) {\n        if (intermediate.items.length===1) {\n            // Don't pursue the closure if there is just one state.\n            // It can only have one alternative; just add to result\n            // Also don't pursue the closure if there is unique alternative\n            // among the configurations.\n            reach = intermediate;\n        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {\n            // Also don't pursue the closure if there is unique alternative\n            // among the configurations.\n            reach = intermediate;\n        }\n    }\n    // If the reach set could not be trivially determined, perform a closure\n    // operation on the intermediate set to compute its initial value.\n    //\n    if (reach===null) {\n        reach = new ATNConfigSet(fullCtx);\n        var closureBusy = new Set();\n        var treatEofAsEpsilon = t === Token.EOF;\n        for (var k=0; k<intermediate.items.length;k++) {\n            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n        }\n    }\n    if (t === Token.EOF) {\n        // After consuming EOF no additional input is possible, so we are\n        // only interested in configurations which reached the end of the\n        // decision rule (local context) or end of the start rule (full\n        // context). Update reach to contain only these configurations. This\n        // handles both explicit EOF transitions in the grammar and implicit\n        // EOF transitions following the end of the decision or start rule.\n        //\n        // When reach==intermediate, no closure operation was performed. In\n        // this case, removeAllConfigsNotInRuleStopState needs to check for\n        // reachable rule stop states as well as configurations already in\n        // a rule stop state.\n        //\n        // This is handled before the configurations in skippedStopStates,\n        // because any configurations potentially added from that list are\n        // already guaranteed to meet this condition whether or not it's\n        // required.\n        //\n        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n    }\n    // If skippedStopStates!==null, then it contains at least one\n    // configuration. For full-context reach operations, these\n    // configurations reached the end of the start rule, in which case we\n    // only add them back to reach if no configuration during the current\n    // closure operation reached such a state. This ensures adaptivePredict\n    // chooses an alternative matching the longest overall sequence when\n    // multiple alternatives are viable.\n    //\n    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {\n        for (var l=0; l<skippedStopStates.length;l++) {\n            reach.add(skippedStopStates[l], this.mergeCache);\n        }\n    }\n    if (reach.items.length===0) {\n        return null;\n    } else {\n        return reach;\n    }\n};\n//\n// Return a configuration set containing only the configurations from\n// {@code configs} which are in a {@link RuleStopState}. If all\n// configurations in {@code configs} are already in a rule stop state, this\n// method simply returns {@code configs}.\n//\n// <p>When {@code lookToEndOfRule} is true, this method uses\n// {@link ATN//nextTokens} for each configuration in {@code configs} which is\n// not already in a rule stop state to see if a rule stop state is reachable\n// from the configuration via epsilon-only transitions.</p>\n//\n// @param configs the configuration set to update\n// @param lookToEndOfRule when true, this method checks for rule stop states\n// reachable by epsilon-only transitions from each configuration in\n// {@code configs}.\n//\n// @return {@code configs} if all configurations in {@code configs} are in a\n// rule stop state, otherwise return a new configuration set containing only\n// the configurations from {@code configs} which are in a rule stop state\n//\nParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {\n    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return configs;\n    }\n    var result = new ATNConfigSet(configs.fullCtx);\n    for(var i=0; i<configs.items.length;i++) {\n        var config = configs.items[i];\n        if (config.state instanceof RuleStopState) {\n            result.add(config, this.mergeCache);\n            continue;\n        }\n        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n            var nextTokens = this.atn.nextTokens(config.state);\n            if (nextTokens.contains(Token.EPSILON)) {\n                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);\n            }\n        }\n    }\n    return result;\n};\n\nParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {\n    // always at least the implicit call to start rule\n    var initialContext = predictionContextFromRuleContext(this.atn, ctx);\n    var configs = new ATNConfigSet(fullCtx);\n    for(var i=0;i<p.transitions.length;i++) {\n        var target = p.transitions[i].target;\n        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);\n        var closureBusy = new Set();\n        this.closure(c, configs, closureBusy, true, fullCtx, false);\n    }\n    return configs;\n};\n\n//\n// This method transforms the start state computed by\n// {@link //computeStartState} to the special start state used by a\n// precedence DFA for a particular precedence value. The transformation\n// process applies the following changes to the start state's configuration\n// set.\n//\n// <ol>\n// <li>Evaluate the precedence predicates for each configuration using\n// {@link SemanticContext//evalPrecedence}.</li>\n// <li>Remove all configurations which predict an alternative greater than\n// 1, for which another configuration that predicts alternative 1 is in the\n// same ATN state with the same prediction context. This transformation is\n// valid for the following reasons:\n// <ul>\n// <li>The closure block cannot contain any epsilon transitions which bypass\n// the body of the closure, so all states reachable via alternative 1 are\n// part of the precedence alternatives of the transformed left-recursive\n// rule.</li>\n// <li>The \"primary\" portion of a left recursive rule cannot contain an\n// epsilon transition, so the only way an alternative other than 1 can exist\n// in a state that is also reachable via alternative 1 is by nesting calls\n// to the left-recursive rule, with the outer calls not being at the\n// preferred precedence level.</li>\n// </ul>\n// </li>\n// </ol>\n//\n// <p>\n// The prediction context must be considered by this filter to address\n// situations like the following.\n// </p>\n// <code>\n// <pre>\n// grammar TA;\n// prog: statement* EOF;\n// statement: letterA | statement letterA 'b' ;\n// letterA: 'a';\n// </pre>\n// </code>\n// <p>\n// If the above grammar, the ATN state immediately before the token\n// reference {@code 'a'} in {@code letterA} is reachable from the left edge\n// of both the primary and closure blocks of the left-recursive rule\n// {@code statement}. The prediction context associated with each of these\n// configurations distinguishes between them, and prevents the alternative\n// which stepped out to {@code prog} (and then back in to {@code statement}\n// from being eliminated by the filter.\n// </p>\n//\n// @param configs The configuration set computed by\n// {@link //computeStartState} as the start state for the DFA.\n// @return The transformed configuration set representing the start state\n// for a precedence DFA at a particular precedence level (determined by\n// calling {@link Parser//getPrecedence}).\n//\nParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {\n\tvar config;\n\tvar statesFromAlt1 = [];\n    var configSet = new ATNConfigSet(configs.fullCtx);\n    for(var i=0; i<configs.items.length; i++) {\n        config = configs.items[i];\n        // handle alt 1 first\n        if (config.alt !== 1) {\n            continue;\n        }\n        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n        if (updatedContext===null) {\n            // the configuration was eliminated\n            continue;\n        }\n        statesFromAlt1[config.state.stateNumber] = config.context;\n        if (updatedContext !== config.semanticContext) {\n            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);\n        } else {\n            configSet.add(config, this.mergeCache);\n        }\n    }\n    for(i=0; i<configs.items.length; i++) {\n        config = configs.items[i];\n        if (config.alt === 1) {\n            // already handled\n            continue;\n        }\n        // In the future, this elimination step could be updated to also\n        // filter the prediction context for alternatives predicting alt>1\n        // (basically a graph subtraction algorithm).\n\t\tif (!config.precedenceFilterSuppressed) {\n            var context = statesFromAlt1[config.state.stateNumber] || null;\n            if (context!==null && context.equals(config.context)) {\n                // eliminated\n                continue;\n            }\n\t\t}\n        configSet.add(config, this.mergeCache);\n    }\n    return configSet;\n};\n\nParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {\n    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n        return trans.target;\n    } else {\n        return null;\n    }\n};\n\nParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {\n    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n    // altToPred starts as an array of all null contexts. The entry at index i\n    // corresponds to alternative i. altToPred[i] may have one of three values:\n    //   1. null: no ATNConfig c is found such that c.alt==i\n    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n    //      alt i has at least one unpredicated config.\n    //   3. Non-NONE Semantic Context: There exists at least one, and for all\n    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n    //\n    // From this, it is clear that NONE||anything==NONE.\n    //\n    var altToPred = [];\n    for(var i=0;i<configs.items.length;i++) {\n        var c = configs.items[i];\n        if(ambigAlts.contains( c.alt )) {\n            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n        }\n    }\n    var nPredAlts = 0;\n    for (i =1;i< nalts+1;i++) {\n        var pred = altToPred[i] || null;\n        if (pred===null) {\n            altToPred[i] = SemanticContext.NONE;\n        } else if (pred !== SemanticContext.NONE) {\n            nPredAlts += 1;\n        }\n    }\n    // nonambig alts are null in altToPred\n    if (nPredAlts===0) {\n        altToPred = null;\n    }\n    if (this.debug) {\n        console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n    }\n    return altToPred;\n};\n\nParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {\n    var pairs = [];\n    var containsPredicate = false;\n    for (var i=1; i<altToPred.length;i++) {\n        var pred = altToPred[i];\n        // unpredicated is indicated by SemanticContext.NONE\n        if( ambigAlts!==null && ambigAlts.contains( i )) {\n            pairs.push(new PredPrediction(pred, i));\n        }\n        if (pred !== SemanticContext.NONE) {\n            containsPredicate = true;\n        }\n    }\n    if (! containsPredicate) {\n        return null;\n    }\n    return pairs;\n};\n\n//\n// This method is used to improve the localization of error messages by\n// choosing an alternative rather than throwing a\n// {@link NoViableAltException} in particular prediction scenarios where the\n// {@link //ERROR} state was reached during ATN simulation.\n//\n// <p>\n// The default implementation of this method uses the following\n// algorithm to identify an ATN configuration which successfully parsed the\n// decision entry rule. Choosing such an alternative ensures that the\n// {@link ParserRuleContext} returned by the calling rule will be complete\n// and valid, and the syntax error will be reported later at a more\n// localized location.</p>\n//\n// <ul>\n// <li>If a syntactically valid path or paths reach the end of the decision rule and\n// they are semantically valid if predicated, return the min associated alt.</li>\n// <li>Else, if a semantically invalid but syntactically valid path exist\n// or paths exist, return the minimum associated alt.\n// </li>\n// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n// </ul>\n//\n// <p>\n// In some scenarios, the algorithm described above could predict an\n// alternative which will result in a {@link FailedPredicateException} in\n// the parser. Specifically, this could occur if the <em>only</em> configuration\n// capable of successfully parsing to the end of the decision rule is\n// blocked by a semantic predicate. By choosing this alternative within\n// {@link //adaptivePredict} instead of throwing a\n// {@link NoViableAltException}, the resulting\n// {@link FailedPredicateException} in the parser will identify the specific\n// predicate which is preventing the parser from successfully parsing the\n// decision rule, which helps developers identify and correct logic errors\n// in semantic predicates.\n// </p>\n//\n// @param configs The ATN configurations which were valid immediately before\n// the {@link //ERROR} state was reached\n// @param outerContext The is the \\gamma_0 initial parser context from the paper\n// or the parser stack at the instant before prediction commences.\n//\n// @return The value to return from {@link //adaptivePredict}, or\n// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n// identified and {@link //adaptivePredict} should report an error instead.\n//\nParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {\n    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n    var semValidConfigs = cfgs[0];\n    var semInvalidConfigs = cfgs[1];\n    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists\n        return alt;\n    }\n    // Is there a syntactically valid path with a failed pred?\n    if (semInvalidConfigs.items.length>0) {\n        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists\n            return alt;\n        }\n    }\n    return ATN.INVALID_ALT_NUMBER;\n};\n\nParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {\n    var alts = [];\n    for(var i=0;i<configs.items.length; i++) {\n        var c = configs.items[i];\n        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {\n            if(alts.indexOf(c.alt)<0) {\n                alts.push(c.alt);\n            }\n        }\n    }\n    if (alts.length===0) {\n        return ATN.INVALID_ALT_NUMBER;\n    } else {\n        return Math.min.apply(null, alts);\n    }\n};\n// Walk the list of configurations and split them according to\n//  those that have preds evaluating to true/false.  If no pred, assume\n//  true pred and include in succeeded set.  Returns Pair of sets.\n//\n//  Create a new set so as not to alter the incoming parameter.\n//\n//  Assumption: the input stream has been restored to the starting point\n//  prediction, which is where predicates need to evaluate.\n//\nParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {\n    var succeeded = new ATNConfigSet(configs.fullCtx);\n    var failed = new ATNConfigSet(configs.fullCtx);\n    for(var i=0;i<configs.items.length; i++) {\n        var c = configs.items[i];\n        if (c.semanticContext !== SemanticContext.NONE) {\n            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n            if (predicateEvaluationResult) {\n                succeeded.add(c);\n            } else {\n                failed.add(c);\n            }\n        } else {\n            succeeded.add(c);\n        }\n    }\n    return [succeeded, failed];\n};\n\n// Look through a list of predicate/alt pairs, returning alts for the\n//  pairs that win. A {@code NONE} predicate indicates an alt containing an\n//  unpredicated config which behaves as \"always true.\" If !complete\n//  then we stop at the first predicate that evaluates to true. This\n//  includes pairs with null predicates.\n//\nParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {\n    var predictions = new BitSet();\n    for(var i=0;i<predPredictions.length;i++) {\n    \tvar pair = predPredictions[i];\n        if (pair.pred === SemanticContext.NONE) {\n            predictions.add(pair.alt);\n            if (! complete) {\n                break;\n            }\n            continue;\n        }\n        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n        if (this.debug || this.dfa_debug) {\n            console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n        }\n        if (predicateEvaluationResult) {\n            if (this.debug || this.dfa_debug) {\n                console.log(\"PREDICT \" + pair.alt);\n            }\n            predictions.add(pair.alt);\n            if (! complete) {\n                break;\n            }\n        }\n    }\n    return predictions;\n};\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n\nParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n    var initialDepth = 0;\n    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,\n                             fullCtx, initialDepth, treatEofAsEpsilon);\n};\n\n\nParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    if (this.debug || this.debug_closure) {\n        console.log(\"closure(\" + config.toString(this.parser,true) + \")\");\n        // console.log(\"configs(\" + configs.toString() + \")\");\n        if(config.reachesIntoOuterContext>50) {\n            throw \"problem\";\n        }\n    }\n    if (config.state instanceof RuleStopState) {\n        // We hit rule end. If we have context info, use it\n        // run thru all possible stack tops in ctx\n        if (! config.context.isEmpty()) {\n            for ( var i =0; i<config.context.length; i++) {\n                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n                    if (fullCtx) {\n                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);\n                        continue;\n                    } else {\n                        // we have no context info, just chase follow links (if greedy)\n                        if (this.debug) {\n                            console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                        }\n                        this.closure_(config, configs, closureBusy, collectPredicates,\n                                 fullCtx, depth, treatEofAsEpsilon);\n                    }\n                    continue;\n                }\n                var returnState = this.atn.states[config.context.getReturnState(i)];\n                var newContext = config.context.getParent(i); // \"pop\" return state\n                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};\n                var c = new ATNConfig(parms, null);\n                // While we have context to pop back from, we may have\n                // gotten that context AFTER having falling off a rule.\n                // Make sure we track that we are now out of context.\n                c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n            }\n            return;\n        } else if( fullCtx) {\n            // reached end of start rule\n            configs.add(config, this.mergeCache);\n            return;\n        } else {\n            // else if we have no context info, just chase follow links (if greedy)\n            if (this.debug) {\n                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n            }\n        }\n    }\n    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n};\n\n\n// Do the actual work of walking epsilon edges//\nParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    var p = config.state;\n    // optimization\n    if (! p.epsilonOnlyTransitions) {\n        configs.add(config, this.mergeCache);\n        // make sure to not return here, because EOF transitions can act as\n        // both epsilon transitions and non-epsilon transitions.\n    }\n    for(var i = 0;i<p.transitions.length; i++) {\n        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n            continue;\n\n        var t = p.transitions[i];\n        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n        if (c!==null) {\n            var newDepth = depth;\n            if ( config.state instanceof RuleStopState) {\n                // target fell off end of rule; mark resulting c as having dipped into outer context\n                // We can't get here if incoming config was rule stop and we had context\n                // track how far we dip into outer context.  Might\n                // come in handy and we avoid evaluating context dependent\n                // preds if this is > 0.\n\t\t\t\tif (this._dfa !== null && this._dfa.precedenceDfa) {\n\t\t\t\t\tif (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n\t\t\t\t\t\tc.precedenceFilterSuppressed = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n                c.reachesIntoOuterContext += 1;\n                if (closureBusy.add(c)!==c) {\n                    // avoid infinite recursion for right-recursive rules\n                    continue;\n                }\n                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                newDepth -= 1;\n                if (this.debug) {\n                    console.log(\"dips into outer ctx: \" + c);\n                }\n            } else {\n                if (!t.isEpsilon && closureBusy.add(c)!==c){\n                    // avoid infinite recursion for EOF* and EOF+\n                    continue;\n                }\n                if (t instanceof RuleTransition) {\n                    // latch when newDepth goes negative - once we step out of the entry context we can't return\n                    if (newDepth >= 0) {\n                        newDepth += 1;\n                    }\n                }\n            }\n            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n        }\n    }\n};\n\n\nParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {\n    // return False\n    var p = config.state;\n    // First check to see if we are in StarLoopEntryState generated during\n    // left-recursion elimination. For efficiency, also check if\n    // the context has an empty stack case. If so, it would mean\n    // global FOLLOW so we can't perform optimization\n    // Are we the special loop entry/exit state? or SLL wildcard\n    if(p.stateType != ATNState.STAR_LOOP_ENTRY)\n        return false;\n    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||\n           config.context.isEmpty() || config.context.hasEmptyPath())\n        return false;\n\n    // Require all return states to return back to the same rule that p is in.\n    var numCtxs = config.context.length;\n    for(var i=0; i<numCtxs; i++) { // for each stack context\n        var returnState = this.atn.states[config.context.getReturnState(i)];\n        if (returnState.ruleIndex != p.ruleIndex)\n            return false;\n    }\n\n    var decisionStartState = p.transitions[0].target;\n    var blockEndStateNum = decisionStartState.endState.stateNumber;\n    var blockEndState = this.atn.states[blockEndStateNum];\n\n    // Verify that the top of each stack context leads to loop entry/exit\n    // state through epsilon edges and w/o leaving rule.\n    for(var i=0; i<numCtxs; i++) { // for each stack context\n        var returnStateNumber = config.context.getReturnState(i);\n        var returnState = this.atn.states[returnStateNumber];\n        // all states must have single outgoing epsilon edge\n        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)\n            return false;\n\n        // Look for prefix op case like 'not expr', (' type ')' expr\n        var returnStateTarget = returnState.transitions[0].target;\n        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )\n            continue;\n\n        // Look for 'expr op expr' or case where expr's return state is block end\n        // of (...)* internal block; the block end points to loop back\n        // which points to p but we don't need to check that\n        if ( returnState == blockEndState )\n            continue;\n\n        // Look for ternary expr ? expr : expr. The return state points at block end,\n        // which points at loop entry state\n        if ( returnStateTarget == blockEndState )\n            continue;\n\n        // Look for complex prefix 'between expr and expr' case where 2nd expr's\n        // return state points at block end state of (...)* internal block\n        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1\n                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)\n            continue;\n\n        // anything else ain't conforming\n        return false;\n    }\n    return true;\n};\n\n\nParserATNSimulator.prototype.getRuleName = function( index) {\n    if (this.parser!==null && index>=0) {\n        return this.parser.ruleNames[index];\n    } else {\n        return \"<rule \" + index + \">\";\n    }\n};\n\nParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n    switch(t.serializationType) {\n    case Transition.RULE:\n        return this.ruleTransition(config, t);\n    case Transition.PRECEDENCE:\n        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n    case Transition.PREDICATE:\n        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n    case Transition.ACTION:\n        return this.actionTransition(config, t);\n    case Transition.EPSILON:\n        return new ATNConfig({state:t.target}, config);\n    case Transition.ATOM:\n    case Transition.RANGE:\n    case Transition.SET:\n        // EOF transitions act like epsilon transitions after the first EOF\n        // transition is traversed\n        if (treatEofAsEpsilon) {\n            if (t.matches(Token.EOF, 0, 1)) {\n                return new ATNConfig({state: t.target}, config);\n            }\n        }\n        return null;\n    default:\n    \treturn null;\n    }\n};\n\nParserATNSimulator.prototype.actionTransition = function(config, t) {\n    if (this.debug) {\n        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;\n        console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n    }\n    return new ATNConfig({state:t.target}, config);\n};\n\nParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {\n    if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" +\n                pt.precedence + \">=_p, ctx dependent=true\");\n        if (this.parser!==null) {\n        \tconsole.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n    }\n    var c = null;\n    if (collectPredicates && inContext) {\n        if (fullCtx) {\n            // In full context mode, we can evaluate predicates on-the-fly\n            // during closure, which dramatically reduces the size of\n            // the config sets. It also obviates the need to test predicates\n            // later during conflict resolution.\n            var currentPosition = this._input.index;\n            this._input.seek(this._startIndex);\n            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n            this._input.seek(currentPosition);\n            if (predSucceeds) {\n                c = new ATNConfig({state:pt.target}, config); // no pred context\n            }\n        } else {\n            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n        }\n    } else {\n        c = new ATNConfig({state:pt.target}, config);\n    }\n    if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n};\n\nParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {\n    if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex +\n                \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n        if (this.parser!==null) {\n            console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n    }\n    var c = null;\n    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {\n        if (fullCtx) {\n            // In full context mode, we can evaluate predicates on-the-fly\n            // during closure, which dramatically reduces the size of\n            // the config sets. It also obviates the need to test predicates\n            // later during conflict resolution.\n            var currentPosition = this._input.index;\n            this._input.seek(this._startIndex);\n            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n            this._input.seek(currentPosition);\n            if (predSucceeds) {\n                c = new ATNConfig({state:pt.target}, config); // no pred context\n            }\n        } else {\n            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n        }\n    } else {\n        c = new ATNConfig({state:pt.target}, config);\n    }\n    if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n};\n\nParserATNSimulator.prototype.ruleTransition = function(config, t) {\n    if (this.debug) {\n        console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n    }\n    var returnState = t.followState;\n    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n    return new ATNConfig({state:t.target, context:newContext}, config );\n};\n\nParserATNSimulator.prototype.getConflictingAlts = function(configs) {\n    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n    return PredictionMode.getAlts(altsets);\n};\n\n // Sam pointed out a problem with the previous definition, v3, of\n // ambiguous states. If we have another state associated with conflicting\n // alternatives, we should keep going. For example, the following grammar\n //\n // s : (ID | ID ID?) ';' ;\n //\n // When the ATN simulation reaches the state before ';', it has a DFA\n // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n // because alternative to has another way to continue, via [6|2|[]].\n // The key is that we have a single state that has config's only associated\n // with a single alternative, 2, and crucially the state transitions\n // among the configurations are all non-epsilon transitions. That means\n // we don't consider any conflicts that include alternative 2. So, we\n // ignore the conflict between alts 1 and 2. We ignore a set of\n // conflicting alts when there is an intersection with an alternative\n // associated with a single alt state in the state&rarr;config-list map.\n //\n // It's also the case that we might have two conflicting configurations but\n // also a 3rd nonconflicting configuration for a different alternative:\n // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n //\n // a : A | A | A B ;\n //\n // After matching input A, we reach the stop state for rule A, state 1.\n // State 8 is the state right before B. Clearly alternatives 1 and 2\n // conflict and no amount of further lookahead will separate the two.\n // However, alternative 3 will be able to continue and so we do not\n // stop working on this state. In the previous example, we're concerned\n // with states associated with the conflicting alternatives. Here alt\n // 3 is not associated with the conflicting configs, but since we can continue\n // looking for input reasonably, I don't declare the state done. We\n // ignore a set of conflicting alts when we have an alternative\n // that we still need to pursue.\n//\n\nParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {\n    var conflictingAlts = null;\n    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {\n        conflictingAlts = new BitSet();\n        conflictingAlts.add(configs.uniqueAlt);\n    } else {\n        conflictingAlts = configs.conflictingAlts;\n    }\n    return conflictingAlts;\n};\n\nParserATNSimulator.prototype.getTokenName = function( t) {\n    if (t===Token.EOF) {\n        return \"EOF\";\n    }\n    if( this.parser!==null && this.parser.literalNames!==null) {\n        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n            console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n            console.log(\"\" + this.parser.getInputStream().getTokens());\n        } else {\n            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n            return name + \"<\" + t + \">\";\n        }\n    }\n    return \"\" + t;\n};\n\nParserATNSimulator.prototype.getLookaheadName = function(input) {\n    return this.getTokenName(input.LA(1));\n};\n\n// Used for debugging in adaptivePredict around execATN but I cut\n//  it out for clarity now that alg. works well. We can leave this\n//  \"dead\" code for a bit.\n//\nParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {\n    console.log(\"dead end configs: \");\n    var decs = nvae.getDeadEndConfigs();\n    for(var i=0; i<decs.length; i++) {\n    \tvar c = decs[i];\n        var trans = \"no edges\";\n        if (c.state.transitions.length>0) {\n            var t = c.state.transitions[0];\n            if (t instanceof AtomTransition) {\n                trans = \"Atom \"+ this.getTokenName(t.label);\n            } else if (t instanceof SetTransition) {\n                var neg = (t instanceof NotSetTransition);\n                trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n            }\n        }\n        console.error(c.toString(this.parser, true) + \":\" + trans);\n    }\n};\n\nParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {\n    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n};\n\nParserATNSimulator.prototype.getUniqueAlt = function(configs) {\n    var alt = ATN.INVALID_ALT_NUMBER;\n    for(var i=0;i<configs.items.length;i++) {\n    \tvar c = configs.items[i];\n        if (alt === ATN.INVALID_ALT_NUMBER) {\n            alt = c.alt // found first alt\n        } else if( c.alt!==alt) {\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    }\n    return alt;\n};\n\n//\n// Add an edge to the DFA, if possible. This method calls\n// {@link //addDFAState} to ensure the {@code to} state is present in the\n// DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n// range of edges that can be represented in the DFA tables, this method\n// returns without adding the edge to the DFA.\n//\n// <p>If {@code to} is {@code null}, this method returns {@code null}.\n// Otherwise, this method returns the {@link DFAState} returned by calling\n// {@link //addDFAState} for the {@code to} state.</p>\n//\n// @param dfa The DFA\n// @param from The source state for the edge\n// @param t The input symbol\n// @param to The target state for the edge\n//\n// @return If {@code to} is {@code null}, this method returns {@code null};\n// otherwise this method returns the result of calling {@link //addDFAState}\n// on {@code to}\n//\nParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {\n    if( this.debug) {\n        console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n    }\n    if (to===null) {\n        return null;\n    }\n    to = this.addDFAState(dfa, to); // used existing if possible not incoming\n    if (from_===null || t < -1 || t > this.atn.maxTokenType) {\n        return to;\n    }\n    if (from_.edges===null) {\n        from_.edges = [];\n    }\n    from_.edges[t+1] = to; // connect\n\n    if (this.debug) {\n        var literalNames = this.parser===null ? null : this.parser.literalNames;\n        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;\n        console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n    }\n    return to;\n};\n//\n// Add state {@code D} to the DFA if it is not already present, and return\n// the actual instance stored in the DFA. If a state equivalent to {@code D}\n// is already in the DFA, the existing state is returned. Otherwise this\n// method returns {@code D} after adding it to the DFA.\n//\n// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n// does not change the DFA.</p>\n//\n// @param dfa The dfa\n// @param D The DFA state to add\n// @return The state stored in the DFA. This will be either the existing\n// state if {@code D} is already in the DFA, or {@code D} itself if the\n// state was not already present.\n//\nParserATNSimulator.prototype.addDFAState = function(dfa, D) {\n    if (D == ATNSimulator.ERROR) {\n        return D;\n    }\n    var existing = dfa.states.get(D);\n    if(existing!==null) {\n        return existing;\n    }\n    D.stateNumber = dfa.states.length;\n    if (! D.configs.readOnly) {\n        D.configs.optimizeConfigs(this);\n        D.configs.setReadonly(true);\n    }\n    dfa.states.add(D);\n    if (this.debug) {\n        console.log(\"adding new DFA state: \" + D);\n    }\n    return D;\n};\n\nParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs +\n                           \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser!==null) {\n        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n    }\n};\n\nParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs +\n                           \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser!==null) {\n        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n    }\n};\n\n// If context sensitive parsing, we know it's ambiguity not conflict//\nParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,\n                               exact, ambigAlts, configs ) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs +\n                           \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser!==null) {\n        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n    }\n};\n\nexports.ParserATNSimulator = ParserATNSimulator;","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.DFA = require('./DFA').DFA;\nexports.DFASerializer = require('./DFASerializer').DFASerializer;\nexports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;\nexports.PredPrediction = require('./DFAState').PredPrediction;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Set = require(\"../Utils\").Set;\nvar DFAState = require('./DFAState').DFAState;\nvar StarLoopEntryState = require('../atn/ATNState').StarLoopEntryState;\nvar ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;\nvar DFASerializer = require('./DFASerializer').DFASerializer;\nvar LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;\n\n\n\nfunction DFA(atnStartState, decision) {\n\tif (decision === undefined) {\n\t\tdecision = 0;\n\t}\n\t// From which ATN state did we create this DFA?\n\tthis.atnStartState = atnStartState;\n\tthis.decision = decision;\n\t// A set of all DFA states. Use {@link Map} so we can get old state back\n\t// ({@link Set} only allows you to see if it's there).\n\tthis._states = new Set();\n\tthis.s0 = null;\n\t// {@code true} if this DFA is for a precedence decision; otherwise,\n\t// {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t// {@link //setPrecedenceDfa}.\n\tthis.precedenceDfa = false;\n    if (atnStartState instanceof StarLoopEntryState)\n    {\n        if (atnStartState.isPrecedenceDecision) {\n            this.precedenceDfa = true;\n            var precedenceState = new DFAState(null, new ATNConfigSet());\n            precedenceState.edges = [];\n            precedenceState.isAcceptState = false;\n            precedenceState.requiresFullContext = false;\n            this.s0 = precedenceState;\n        }\n    }\n\treturn this;\n}\n\n// Get the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @return The start state corresponding to the specified precedence, or\n// {@code null} if no start state exists for the specified precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n\nDFA.prototype.getPrecedenceStartState = function(precedence) {\n\tif (!(this.precedenceDfa)) {\n\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t}\n\t// s0.edges is never null for a precedence DFA\n\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\treturn null;\n\t}\n\treturn this.s0.edges[precedence] || null;\n};\n\n// Set the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @param startState The start state corresponding to the specified\n// precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n//\nDFA.prototype.setPrecedenceStartState = function(precedence, startState) {\n\tif (!(this.precedenceDfa)) {\n\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t}\n\tif (precedence < 0) {\n\t\treturn;\n\t}\n\n\t// synchronization on s0 here is ok. when the DFA is turned into a\n\t// precedence DFA, s0 will be initialized once and not updated again\n\t// s0.edges is never null for a precedence DFA\n\tthis.s0.edges[precedence] = startState;\n};\n\n//\n// Sets whether this is a precedence DFA. If the specified value differs\n// from the current DFA configuration, the following actions are taken;\n// otherwise no changes are made to the current DFA.\n//\n// <ul>\n// <li>The {@link //states} map is cleared</li>\n// <li>If {@code precedenceDfa} is {@code false}, the initial state\n// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n// store the start states for individual precedence values.</li>\n// <li>The {@link //precedenceDfa} field is updated</li>\n// </ul>\n//\n// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n// {@code false}\n\nDFA.prototype.setPrecedenceDfa = function(precedenceDfa) {\n\tif (this.precedenceDfa!==precedenceDfa) {\n\t\tthis._states = new DFAStatesSet();\n\t\tif (precedenceDfa) {\n\t\t\tvar precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\tprecedenceState.edges = [];\n\t\t\tprecedenceState.isAcceptState = false;\n\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\tthis.s0 = precedenceState;\n\t\t} else {\n\t\t\tthis.s0 = null;\n\t\t}\n\t\tthis.precedenceDfa = precedenceDfa;\n\t}\n};\n\nObject.defineProperty(DFA.prototype, \"states\", {\n\tget : function() {\n\t\treturn this._states;\n\t}\n});\n\n// Return a list of all states in this DFA, ordered by state number.\nDFA.prototype.sortedStates = function() {\n\tvar list = this._states.values();\n\treturn list.sort(function(a, b) {\n\t\treturn a.stateNumber - b.stateNumber;\n\t});\n};\n\nDFA.prototype.toString = function(literalNames, symbolicNames) {\n\tliteralNames = literalNames || null;\n\tsymbolicNames = symbolicNames || null;\n\tif (this.s0 === null) {\n\t\treturn \"\";\n\t}\n\tvar serializer = new DFASerializer(this, literalNames, symbolicNames);\n\treturn serializer.toString();\n};\n\nDFA.prototype.toLexerString = function() {\n\tif (this.s0 === null) {\n\t\treturn \"\";\n\t}\n\tvar serializer = new LexerDFASerializer(this);\n\treturn serializer.toString();\n};\n\nexports.DFA = DFA;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Tree = require('./Tree');\nexports.Trees = require('./Trees').Trees;\nexports.RuleNode = Tree.RuleNode;\nexports.ParseTreeListener = Tree.ParseTreeListener;\nexports.ParseTreeVisitor = Tree.ParseTreeVisitor;\nexports.ParseTreeWalker = Tree.ParseTreeWalker;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// This implementation of {@link ANTLRErrorListener} can be used to identify\n// certain potential correctness and performance problems in grammars. \"Reports\"\n// are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n// message.\n//\n// <ul>\n// <li><b>Ambiguities</b>: These are cases where more than one path through the\n// grammar can match the input.</li>\n// <li><b>Weak context sensitivity</b>: These are cases where full-context\n// prediction resolved an SLL conflict to a unique alternative which equaled the\n// minimum alternative of the SLL conflict.</li>\n// <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n// full-context prediction resolved an SLL conflict to a unique alternative,\n// <em>and</em> the minimum alternative of the SLL conflict was found to not be\n// a truly viable alternative. Two-stage parsing cannot be used for inputs where\n// this situation occurs.</li>\n// </ul>\n\nvar BitSet = require('./../Utils').BitSet;\nvar ErrorListener = require('./ErrorListener').ErrorListener;\nvar Interval = require('./../IntervalSet').Interval;\n\nfunction DiagnosticErrorListener(exactOnly) {\n\tErrorListener.call(this);\n\texactOnly = exactOnly || true;\n\t// whether all ambiguities or only exact ambiguities are reported.\n\tthis.exactOnly = exactOnly;\n\treturn this;\n}\n\nDiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);\nDiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;\n\nDiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,\n\t\tstartIndex, stopIndex, exact, ambigAlts, configs) {\n\tif (this.exactOnly && !exact) {\n\t\treturn;\n\t}\n\tvar msg = \"reportAmbiguity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\": ambigAlts=\" +\n\t\t\tthis.getConflictingAlts(ambigAlts, configs) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportAttemptingFullContext = function(\n\t\trecognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\tvar msg = \"reportAttemptingFullContext d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportContextSensitivity = function(\n\t\trecognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\tvar msg = \"reportContextSensitivity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {\n\tvar decision = dfa.decision;\n\tvar ruleIndex = dfa.atnStartState.ruleIndex;\n\n\tvar ruleNames = recognizer.ruleNames;\n\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\treturn \"\" + decision;\n\t}\n\tvar ruleName = ruleNames[ruleIndex] || null;\n\tif (ruleName === null || ruleName.length === 0) {\n\t\treturn \"\" + decision;\n\t}\n\treturn \"\" + decision + \" (\" + ruleName + \")\";\n};\n\n//\n// Computes the set of conflicting or ambiguous alternatives from a\n// configuration set, if that information was not already provided by the\n// parser.\n//\n// @param reportedAlts The set of conflicting or ambiguous alternatives, as\n// reported by the parser.\n// @param configs The conflicting or ambiguous configuration set.\n// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n// returns the set of alternatives represented in {@code configs}.\n//\nDiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {\n\tif (reportedAlts !== null) {\n\t\treturn reportedAlts;\n\t}\n\tvar result = new BitSet();\n\tfor (var i = 0; i < configs.items.length; i++) {\n\t\tresult.add(configs.items[i].alt);\n\t}\n\treturn \"{\" + result.values().join(\", \") + \"}\";\n};\n\nexports.DiagnosticErrorListener = DiagnosticErrorListener;","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar InputStream = require('./InputStream').InputStream;\n\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? require(\"fs\") : null;\n\n// Utility functions to create InputStreams from various sources.\n//\n// All returned InputStreams support the full range of Unicode\n// up to U+10FFFF (the default behavior of InputStream only supports\n// code points up to U+FFFF).\nvar CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function(str) {\n    return new InputStream(str, true);\n  },\n\n  // Asynchronously creates an InputStream from a blob given the\n  // encoding of the bytes in that blob (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes onLoad(result) on success, onError(error) on\n  // failure.\n  fromBlob: function(blob, encoding, onLoad, onError) {\n    var reader = FileReader();\n    reader.onload = function(e) {\n      var is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  // Creates an InputStream from a Buffer given the\n  // encoding of the bytes in that buffer (defaults to 'utf8' if\n  // encoding is null).\n  fromBuffer: function(buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n\n  // Asynchronously creates an InputStream from a file on disk given\n  // the encoding of the bytes in that file (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes callback(error, result) on completion.\n  fromPath: function(path, encoding, callback) {\n    fs.readFile(path, encoding, function(err, data) {\n      var is = null;\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  // Synchronously creates an InputStream given a path to a file\n  // on disk and the encoding of the bytes in that file (defaults to\n  // 'utf8' if encoding is null).\n  fromPathSync: function(path, encoding) {\n    var data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\n\nexports.CharStreams = CharStreams;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n//  This is an InputStream that is loaded from a file all at once\n//  when you construct the object.\n//\nvar InputStream = require('./InputStream').InputStream;\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? require(\"fs\") : null;\n\nfunction FileStream(fileName, decodeToUnicodeCodePoints) {\n\tvar data = fs.readFileSync(fileName, \"utf8\");\n\tInputStream.call(this, data, decodeToUnicodeCodePoints);\n\tthis.fileName = fileName;\n\treturn this;\n}\n\nFileStream.prototype = Object.create(InputStream.prototype);\nFileStream.prototype.constructor = FileStream;\n\nexports.FileStream = FileStream;\n","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n//\n// This class extends {@link BufferedTokenStream} with functionality to filter\n// token streams to tokens on a particular channel (tokens where\n// {@link Token//getChannel} returns a particular value).\n//\n// <p>\n// This token stream provides access to all tokens by index or when calling\n// methods like {@link //getText}. The channel filtering is only used for code\n// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n// {@link //LB}.</p>\n//\n// <p>\n// By default, tokens are placed on the default channel\n// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n// call {@link Lexer//setChannel}.\n// </p>\n//\n// <p>\n// Note: lexer rules which use the {@code ->skip} lexer command or call\n// {@link Lexer//skip} do not produce tokens at all, so input text matched by\n// such a rule will not be available as part of the token stream, regardless of\n// channel.</p>\n///\n\nvar Token = require('./Token').Token;\nvar BufferedTokenStream = require('./BufferedTokenStream').BufferedTokenStream;\n\nfunction CommonTokenStream(lexer, channel) {\n\tBufferedTokenStream.call(this, lexer);\n    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;\n    return this;\n}\n\nCommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);\nCommonTokenStream.prototype.constructor = CommonTokenStream;\n\nCommonTokenStream.prototype.adjustSeekIndex = function(i) {\n    return this.nextTokenOnChannel(i, this.channel);\n};\n\nCommonTokenStream.prototype.LB = function(k) {\n    if (k===0 || this.index-k<0) {\n        return null;\n    }\n    var i = this.index;\n    var n = 1;\n    // find k good tokens looking backwards\n    while (n <= k) {\n        // skip off-channel tokens\n        i = this.previousTokenOnChannel(i - 1, this.channel);\n        n += 1;\n    }\n    if (i < 0) {\n        return null;\n    }\n    return this.tokens[i];\n};\n\nCommonTokenStream.prototype.LT = function(k) {\n    this.lazyInit();\n    if (k === 0) {\n        return null;\n    }\n    if (k < 0) {\n        return this.LB(-k);\n    }\n    var i = this.index;\n    var n = 1; // we know tokens[pos] is a good one\n    // find k good tokens\n    while (n < k) {\n        // skip off-channel tokens, but make sure to not look past EOF\n        if (this.sync(i + 1)) {\n            i = this.nextTokenOnChannel(i + 1, this.channel);\n        }\n        n += 1;\n    }\n    return this.tokens[i];\n};\n\n// Count EOF just once.///\nCommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {\n    var n = 0;\n    this.fill();\n    for (var i =0; i< this.tokens.length;i++) {\n        var t = this.tokens[i];\n        if( t.channel===this.channel) {\n            n += 1;\n        }\n        if( t.type===Token.EOF) {\n            break;\n        }\n    }\n    return n;\n};\n\nexports.CommonTokenStream = CommonTokenStream;","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// This implementation of {@link TokenStream} loads tokens from a\n// {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n// access to any previous token by index.\n//\n// <p>\n// This token stream ignores the value of {@link Token//getChannel}. If your\n// parser requires the token stream filter tokens to only those on a particular\n// channel, such as {@link Token//DEFAULT_CHANNEL} or\n// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n// {@link CommonTokenStream}.</p>\n\nvar Token = require('./Token').Token;\nvar Lexer = require('./Lexer').Lexer;\nvar Interval = require('./IntervalSet').Interval;\n\n// this is just to keep meaningful parameter types to Parser\nfunction TokenStream() {\n\treturn this;\n}\n\nfunction BufferedTokenStream(tokenSource) {\n\n\tTokenStream.call(this);\n\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\tthis.tokenSource = tokenSource;\n\n\t// A collection of all tokens fetched from the token source. The list is\n\t// considered a complete view of the input once {@link //fetchedEOF} is set\n\t// to {@code true}.\n\tthis.tokens = [];\n\n\t// The index into {@link //tokens} of the current token (next token to\n\t// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t// be\n\t// {@link //LT LT(1)}.\n\t//\n\t// <p>This field is set to -1 when the stream is first constructed or when\n\t// {@link //setTokenSource} is called, indicating that the first token has\n\t// not yet been fetched from the token source. For additional information,\n\t// see the documentation of {@link IntStream} for a description of\n\t// Initializing Methods.</p>\n\tthis.index = -1;\n\n\t// Indicates whether the {@link Token//EOF} token has been fetched from\n\t// {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t// performance for the following cases:\n\t//\n\t// <ul>\n\t// <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t// prevent\n\t// consuming the EOF symbol is optimized by checking the values of\n\t// {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t// //LA}.</li>\n\t// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t// into\n\t// {@link //tokens} is trivial with this field.</li>\n\t// <ul>\n\tthis.fetchedEOF = false;\n\treturn this;\n}\n\nBufferedTokenStream.prototype = Object.create(TokenStream.prototype);\nBufferedTokenStream.prototype.constructor = BufferedTokenStream;\n\nBufferedTokenStream.prototype.mark = function() {\n\treturn 0;\n};\n\nBufferedTokenStream.prototype.release = function(marker) {\n\t// no resources to release\n};\n\nBufferedTokenStream.prototype.reset = function() {\n\tthis.seek(0);\n};\n\nBufferedTokenStream.prototype.seek = function(index) {\n\tthis.lazyInit();\n\tthis.index = this.adjustSeekIndex(index);\n};\n\nBufferedTokenStream.prototype.get = function(index) {\n\tthis.lazyInit();\n\treturn this.tokens[index];\n};\n\nBufferedTokenStream.prototype.consume = function() {\n\tvar skipEofCheck = false;\n\tif (this.index >= 0) {\n\t\tif (this.fetchedEOF) {\n\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t// fetched token except the last.\n\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t} else {\n\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t}\n\t} else {\n\t\t// not yet initialized\n\t\tskipEofCheck = false;\n\t}\n\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\tthrow \"cannot consume EOF\";\n\t}\n\tif (this.sync(this.index + 1)) {\n\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t}\n};\n\n// Make sure index {@code i} in tokens has a token.\n//\n// @return {@code true} if a token is located at index {@code i}, otherwise\n// {@code false}.\n// @see //get(int i)\n// /\nBufferedTokenStream.prototype.sync = function(i) {\n\tvar n = i - this.tokens.length + 1; // how many more elements we need?\n\tif (n > 0) {\n\t\tvar fetched = this.fetch(n);\n\t\treturn fetched >= n;\n\t}\n\treturn true;\n};\n\n// Add {@code n} elements to buffer.\n//\n// @return The actual number of elements added to the buffer.\n// /\nBufferedTokenStream.prototype.fetch = function(n) {\n\tif (this.fetchedEOF) {\n\t\treturn 0;\n\t}\n\tfor (var i = 0; i < n; i++) {\n\t\tvar t = this.tokenSource.nextToken();\n\t\tt.tokenIndex = this.tokens.length;\n\t\tthis.tokens.push(t);\n\t\tif (t.type === Token.EOF) {\n\t\t\tthis.fetchedEOF = true;\n\t\t\treturn i + 1;\n\t\t}\n\t}\n\treturn n;\n};\n\n// Get all tokens from start..stop inclusively///\nBufferedTokenStream.prototype.getTokens = function(start, stop, types) {\n\tif (types === undefined) {\n\t\ttypes = null;\n\t}\n\tif (start < 0 || stop < 0) {\n\t\treturn null;\n\t}\n\tthis.lazyInit();\n\tvar subset = [];\n\tif (stop >= this.tokens.length) {\n\t\tstop = this.tokens.length - 1;\n\t}\n\tfor (var i = start; i < stop; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (t.type === Token.EOF) {\n\t\t\tbreak;\n\t\t}\n\t\tif (types === null || types.contains(t.type)) {\n\t\t\tsubset.push(t);\n\t\t}\n\t}\n\treturn subset;\n};\n\nBufferedTokenStream.prototype.LA = function(i) {\n\treturn this.LT(i).type;\n};\n\nBufferedTokenStream.prototype.LB = function(k) {\n\tif (this.index - k < 0) {\n\t\treturn null;\n\t}\n\treturn this.tokens[this.index - k];\n};\n\nBufferedTokenStream.prototype.LT = function(k) {\n\tthis.lazyInit();\n\tif (k === 0) {\n\t\treturn null;\n\t}\n\tif (k < 0) {\n\t\treturn this.LB(-k);\n\t}\n\tvar i = this.index + k - 1;\n\tthis.sync(i);\n\tif (i >= this.tokens.length) { // return EOF token\n\t\t// EOF must be last token\n\t\treturn this.tokens[this.tokens.length - 1];\n\t}\n\treturn this.tokens[i];\n};\n\n// Allowed derived classes to modify the behavior of operations which change\n// the current stream position by adjusting the target token index of a seek\n// operation. The default implementation simply returns {@code i}. If an\n// exception is thrown in this method, the current stream index should not be\n// changed.\n//\n// <p>For example, {@link CommonTokenStream} overrides this method to ensure\n// that\n// the seek target is always an on-channel token.</p>\n//\n// @param i The target token index.\n// @return The adjusted target token index.\n\nBufferedTokenStream.prototype.adjustSeekIndex = function(i) {\n\treturn i;\n};\n\nBufferedTokenStream.prototype.lazyInit = function() {\n\tif (this.index === -1) {\n\t\tthis.setup();\n\t}\n};\n\nBufferedTokenStream.prototype.setup = function() {\n\tthis.sync(0);\n\tthis.index = this.adjustSeekIndex(0);\n};\n\n// Reset this token stream by setting its token source.///\nBufferedTokenStream.prototype.setTokenSource = function(tokenSource) {\n\tthis.tokenSource = tokenSource;\n\tthis.tokens = [];\n\tthis.index = -1;\n\tthis.fetchedEOF = false;\n};\n\n\n// Given a starting index, return the index of the next token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and EOF.\n// /\nBufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {\n\tthis.sync(i);\n\tif (i >= this.tokens.length) {\n\t\treturn -1;\n\t}\n\tvar token = this.tokens[i];\n\twhile (token.channel !== this.channel) {\n\t\tif (token.type === Token.EOF) {\n\t\t\treturn -1;\n\t\t}\n\t\ti += 1;\n\t\tthis.sync(i);\n\t\ttoken = this.tokens[i];\n\t}\n\treturn i;\n};\n\n// Given a starting index, return the index of the previous token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and 0.\nBufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {\n\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\ti -= 1;\n\t}\n\treturn i;\n};\n\n// Collect all tokens on specified channel to the right of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n// EOF. If channel is -1, find any non default channel token.\nBufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,\n\t\tchannel) {\n\tif (channel === undefined) {\n\t\tchannel = -1;\n\t}\n\tthis.lazyInit();\n\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t}\n\tvar nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\tvar from_ = tokenIndex + 1;\n\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\tvar to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\treturn this.filterForChannel(from_, to, channel);\n};\n\n// Collect all tokens on specified channel to the left of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n// If channel is -1, find any non default channel token.\nBufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,\n\t\tchannel) {\n\tif (channel === undefined) {\n\t\tchannel = -1;\n\t}\n\tthis.lazyInit();\n\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t}\n\tvar prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\tif (prevOnChannel === tokenIndex - 1) {\n\t\treturn null;\n\t}\n\t// if none on channel to left, prevOnChannel=-1 then from=0\n\tvar from_ = prevOnChannel + 1;\n\tvar to = tokenIndex - 1;\n\treturn this.filterForChannel(from_, to, channel);\n};\n\nBufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {\n\tvar hidden = [];\n\tfor (var i = left; i < right + 1; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (channel === -1) {\n\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t} else if (t.channel === channel) {\n\t\t\thidden.push(t);\n\t\t}\n\t}\n\tif (hidden.length === 0) {\n\t\treturn null;\n\t}\n\treturn hidden;\n};\n\nBufferedTokenStream.prototype.getSourceName = function() {\n\treturn this.tokenSource.getSourceName();\n};\n\n// Get the text of all tokens in this buffer.///\nBufferedTokenStream.prototype.getText = function(interval) {\n\tthis.lazyInit();\n\tthis.fill();\n\tif (interval === undefined || interval === null) {\n\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t}\n\tvar start = interval.start;\n\tif (start instanceof Token) {\n\t\tstart = start.tokenIndex;\n\t}\n\tvar stop = interval.stop;\n\tif (stop instanceof Token) {\n\t\tstop = stop.tokenIndex;\n\t}\n\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\treturn \"\";\n\t}\n\tif (stop >= this.tokens.length) {\n\t\tstop = this.tokens.length - 1;\n\t}\n\tvar s = \"\";\n\tfor (var i = start; i < stop + 1; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (t.type === Token.EOF) {\n\t\t\tbreak;\n\t\t}\n\t\ts = s + t.text;\n\t}\n\treturn s;\n};\n\n// Get all tokens from lexer until EOF///\nBufferedTokenStream.prototype.fill = function() {\n\tthis.lazyInit();\n\twhile (this.fetch(1000) === 1000) {\n\t\tcontinue;\n\t}\n};\n\nexports.BufferedTokenStream = BufferedTokenStream;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Token = require('./Token').Token;\nvar ParseTreeListener = require('./tree/Tree').ParseTreeListener;\nvar Recognizer = require('./Recognizer').Recognizer;\nvar DefaultErrorStrategy = require('./error/ErrorStrategy').DefaultErrorStrategy;\nvar ATNDeserializer = require('./atn/ATNDeserializer').ATNDeserializer;\nvar ATNDeserializationOptions = require('./atn/ATNDeserializationOptions').ATNDeserializationOptions;\nvar TerminalNode = require('./tree/Tree').TerminalNode;\nvar ErrorNode = require('./tree/Tree').ErrorNode;\n\nfunction TraceListener(parser) {\n\tParseTreeListener.call(this);\n    this.parser = parser;\n\treturn this;\n}\n\nTraceListener.prototype = Object.create(ParseTreeListener.prototype);\nTraceListener.prototype.constructor = TraceListener;\n\nTraceListener.prototype.enterEveryRule = function(ctx) {\n\tconsole.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n};\n\nTraceListener.prototype.visitTerminal = function( node) {\n\tconsole.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n};\n\nTraceListener.prototype.exitEveryRule = function(ctx) {\n\tconsole.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n};\n\n// this is all the parsing support code essentially; most of it is error\n// recovery stuff.//\nfunction Parser(input) {\n\tRecognizer.call(this);\n\t// The input stream.\n\tthis._input = null;\n\t// The error handling strategy for the parser. The default value is a new\n\t// instance of {@link DefaultErrorStrategy}.\n\tthis._errHandler = new DefaultErrorStrategy();\n\tthis._precedenceStack = [];\n\tthis._precedenceStack.push(0);\n\t// The {@link ParserRuleContext} object for the currently executing rule.\n\t// this is always non-null during the parsing process.\n\tthis._ctx = null;\n\t// Specifies whether or not the parser should construct a parse tree during\n\t// the parsing process. The default value is {@code true}.\n\tthis.buildParseTrees = true;\n\t// When {@link //setTrace}{@code (true)} is called, a reference to the\n\t// {@link TraceListener} is stored here so it can be easily removed in a\n\t// later call to {@link //setTrace}{@code (false)}. The listener itself is\n\t// implemented as a parser listener so this field is not directly used by\n\t// other parser methods.\n\tthis._tracer = null;\n\t// The list of {@link ParseTreeListener} listeners registered to receive\n\t// events during the parse.\n\tthis._parseListeners = null;\n\t// The number of syntax errors reported during parsing. this value is\n\t// incremented each time {@link //notifyErrorListeners} is called.\n\tthis._syntaxErrors = 0;\n\tthis.setInputStream(input);\n\treturn this;\n}\n\nParser.prototype = Object.create(Recognizer.prototype);\nParser.prototype.contructor = Parser;\n\n// this field maps from the serialized ATN string to the deserialized {@link\n// ATN} with\n// bypass alternatives.\n//\n// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n//\nParser.bypassAltsAtnCache = {};\n\n// reset the parser's state//\nParser.prototype.reset = function() {\n\tif (this._input !== null) {\n\t\tthis._input.seek(0);\n\t}\n\tthis._errHandler.reset(this);\n\tthis._ctx = null;\n\tthis._syntaxErrors = 0;\n\tthis.setTrace(false);\n\tthis._precedenceStack = [];\n\tthis._precedenceStack.push(0);\n\tif (this._interp !== null) {\n\t\tthis._interp.reset();\n\t}\n};\n\n// Match current input symbol against {@code ttype}. If the symbol type\n// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n// called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @param ttype the token type to match\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// {@code ttype} and the error strategy could not recover from the\n// mismatched symbol\n\nParser.prototype.match = function(ttype) {\n\tvar t = this.getCurrentToken();\n\tif (t.type === ttype) {\n\t\tthis._errHandler.reportMatch(this);\n\t\tthis.consume();\n\t} else {\n\t\tt = this._errHandler.recoverInline(this);\n\t\tif (this.buildParseTrees && t.tokenIndex === -1) {\n\t\t\t// we must have conjured up a new token during single token\n\t\t\t// insertion\n\t\t\t// if it's not the current symbol\n\t\t\tthis._ctx.addErrorNode(t);\n\t\t}\n\t}\n\treturn t;\n};\n// Match current input symbol as a wildcard. If the symbol type matches\n// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n// and {@link //consume} are called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// a wildcard and the error strategy could not recover from the mismatched\n// symbol\n\nParser.prototype.matchWildcard = function() {\n\tvar t = this.getCurrentToken();\n\tif (t.type > 0) {\n\t\tthis._errHandler.reportMatch(this);\n\t\tthis.consume();\n\t} else {\n\t\tt = this._errHandler.recoverInline(this);\n\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t// we must have conjured up a new token during single token\n\t\t\t// insertion\n\t\t\t// if it's not the current symbol\n\t\t\tthis._ctx.addErrorNode(t);\n\t\t}\n\t}\n\treturn t;\n};\n\nParser.prototype.getParseListeners = function() {\n\treturn this._parseListeners || [];\n};\n\n// Registers {@code listener} to receive events during the parsing process.\n//\n// <p>To support output-preserving grammar transformations (including but not\n// limited to left-recursion removal, automated left-factoring, and\n// optimized code generation), calls to listener methods during the parse\n// may differ substantially from calls made by\n// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n// particular, rule entry and exit events may occur in a different order\n// during the parse than after the parser. In addition, calls to certain\n// rule entry methods may be omitted.</p>\n//\n// <p>With the following specific exceptions, calls to listener events are\n// <em>deterministic</em>, i.e. for identical input the calls to listener\n// methods will be the same.</p>\n//\n// <ul>\n// <li>Alterations to the grammar used to generate code may change the\n// behavior of the listener calls.</li>\n// <li>Alterations to the command line options passed to ANTLR 4 when\n// generating the parser may change the behavior of the listener calls.</li>\n// <li>Changing the version of the ANTLR Tool used to generate the parser\n// may change the behavior of the listener calls.</li>\n// </ul>\n//\n// @param listener the listener to add\n//\n// @throws NullPointerException if {@code} listener is {@code null}\n//\nParser.prototype.addParseListener = function(listener) {\n\tif (listener === null) {\n\t\tthrow \"listener\";\n\t}\n\tif (this._parseListeners === null) {\n\t\tthis._parseListeners = [];\n\t}\n\tthis._parseListeners.push(listener);\n};\n\n//\n// Remove {@code listener} from the list of parse listeners.\n//\n// <p>If {@code listener} is {@code null} or has not been added as a parse\n// listener, this method does nothing.</p>\n// @param listener the listener to remove\n//\nParser.prototype.removeParseListener = function(listener) {\n\tif (this._parseListeners !== null) {\n\t\tvar idx = this._parseListeners.indexOf(listener);\n\t\tif (idx >= 0) {\n\t\t\tthis._parseListeners.splice(idx, 1);\n\t\t}\n\t\tif (this._parseListeners.length === 0) {\n\t\t\tthis._parseListeners = null;\n\t\t}\n\t}\n};\n\n// Remove all parse listeners.\nParser.prototype.removeParseListeners = function() {\n\tthis._parseListeners = null;\n};\n\n// Notify any parse listeners of an enter rule event.\nParser.prototype.triggerEnterRuleEvent = function() {\n\tif (this._parseListeners !== null) {\n        var ctx = this._ctx;\n\t\tthis._parseListeners.map(function(listener) {\n\t\t\tlistener.enterEveryRule(ctx);\n\t\t\tctx.enterRule(listener);\n\t\t});\n\t}\n};\n\n//\n// Notify any parse listeners of an exit rule event.\n//\n// @see //addParseListener\n//\nParser.prototype.triggerExitRuleEvent = function() {\n\tif (this._parseListeners !== null) {\n\t\t// reverse order walk of listeners\n        var ctx = this._ctx;\n\t\tthis._parseListeners.slice(0).reverse().map(function(listener) {\n\t\t\tctx.exitRule(listener);\n\t\t\tlistener.exitEveryRule(ctx);\n\t\t});\n\t}\n};\n\nParser.prototype.getTokenFactory = function() {\n\treturn this._input.tokenSource._factory;\n};\n\n// Tell our token source and error strategy about a new way to create tokens.//\nParser.prototype.setTokenFactory = function(factory) {\n\tthis._input.tokenSource._factory = factory;\n};\n\n// The ATN with bypass alternatives is expensive to create so we create it\n// lazily.\n//\n// @throws UnsupportedOperationException if the current parser does not\n// implement the {@link //getSerializedATN()} method.\n//\nParser.prototype.getATNWithBypassAlts = function() {\n\tvar serializedAtn = this.getSerializedATN();\n\tif (serializedAtn === null) {\n\t\tthrow \"The current parser does not support an ATN with bypass alternatives.\";\n\t}\n\tvar result = this.bypassAltsAtnCache[serializedAtn];\n\tif (result === null) {\n\t\tvar deserializationOptions = new ATNDeserializationOptions();\n\t\tdeserializationOptions.generateRuleBypassTransitions = true;\n\t\tresult = new ATNDeserializer(deserializationOptions)\n\t\t\t\t.deserialize(serializedAtn);\n\t\tthis.bypassAltsAtnCache[serializedAtn] = result;\n\t}\n\treturn result;\n};\n\n// The preferred method of getting a tree pattern. For example, here's a\n// sample use:\n//\n// <pre>\n// ParseTree t = parser.expr();\n// ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n// MyParser.RULE_expr);\n// ParseTreeMatch m = p.match(t);\n// String id = m.get(\"ID\");\n// </pre>\n\nvar Lexer = require('./Lexer').Lexer;\n\nParser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {\n\tlexer = lexer || null;\n\tif (lexer === null) {\n\t\tif (this.getTokenStream() !== null) {\n\t\t\tvar tokenSource = this.getTokenStream().tokenSource;\n\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\tlexer = tokenSource;\n\t\t\t}\n\t\t}\n\t}\n\tif (lexer === null) {\n\t\tthrow \"Parser can't discover a lexer to use\";\n\t}\n\tvar m = new ParseTreePatternMatcher(lexer, this);\n\treturn m.compile(pattern, patternRuleIndex);\n};\n\nParser.prototype.getInputStream = function() {\n\treturn this.getTokenStream();\n};\n\nParser.prototype.setInputStream = function(input) {\n\tthis.setTokenStream(input);\n};\n\nParser.prototype.getTokenStream = function() {\n\treturn this._input;\n};\n\n// Set the token stream and reset the parser.//\nParser.prototype.setTokenStream = function(input) {\n\tthis._input = null;\n\tthis.reset();\n\tthis._input = input;\n};\n\n// Match needs to return the current input symbol, which gets put\n// into the label for the associated token ref; e.g., x=ID.\n//\nParser.prototype.getCurrentToken = function() {\n\treturn this._input.LT(1);\n};\n\nParser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {\n\toffendingToken = offendingToken || null;\n\terr = err || null;\n\tif (offendingToken === null) {\n\t\toffendingToken = this.getCurrentToken();\n\t}\n\tthis._syntaxErrors += 1;\n\tvar line = offendingToken.line;\n\tvar column = offendingToken.column;\n\tvar listener = this.getErrorListenerDispatch();\n\tlistener.syntaxError(this, offendingToken, line, column, msg, err);\n};\n\n//\n// Consume and return the {@linkplain //getCurrentToken current symbol}.\n//\n// <p>E.g., given the following input with {@code A} being the current\n// lookahead symbol, this function moves the cursor to {@code B} and returns\n// {@code A}.</p>\n//\n// <pre>\n// A B\n// ^\n// </pre>\n//\n// If the parser is not in error recovery mode, the consumed symbol is added\n// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n// If the parser <em>is</em> in error recovery mode, the consumed symbol is\n// added to the parse tree using\n// {@link ParserRuleContext//addErrorNode(Token)}, and\n// {@link ParseTreeListener//visitErrorNode} is called on any parse\n// listeners.\n//\nParser.prototype.consume = function() {\n\tvar o = this.getCurrentToken();\n\tif (o.type !== Token.EOF) {\n\t\tthis.getInputStream().consume();\n\t}\n\tvar hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\tif (this.buildParseTrees || hasListener) {\n\t\tvar node;\n\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\tnode = this._ctx.addErrorNode(o);\n\t\t} else {\n\t\t\tnode = this._ctx.addTokenNode(o);\n\t\t}\n        node.invokingState = this.state;\n\t\tif (hasListener) {\n\t\t\tthis._parseListeners.map(function(listener) {\n\t\t\t\tif (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {\n\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t} else if (node instanceof TerminalNode) {\n\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\treturn o;\n};\n\nParser.prototype.addContextToParseTree = function() {\n\t// add current context to parent if we have a parent\n\tif (this._ctx.parentCtx !== null) {\n\t\tthis._ctx.parentCtx.addChild(this._ctx);\n\t}\n};\n\n// Always called by generated parsers upon entry to a rule. Access field\n// {@link //_ctx} get the current context.\n\nParser.prototype.enterRule = function(localctx, state, ruleIndex) {\n\tthis.state = state;\n\tthis._ctx = localctx;\n\tthis._ctx.start = this._input.LT(1);\n\tif (this.buildParseTrees) {\n\t\tthis.addContextToParseTree();\n\t}\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent();\n\t}\n};\n\nParser.prototype.exitRule = function() {\n\tthis._ctx.stop = this._input.LT(-1);\n\t// trigger event on _ctx, before it reverts to parent\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerExitRuleEvent();\n\t}\n\tthis.state = this._ctx.invokingState;\n\tthis._ctx = this._ctx.parentCtx;\n};\n\nParser.prototype.enterOuterAlt = function(localctx, altNum) {\n   \tlocalctx.setAltNumber(altNum);\n\t// if we have new localctx, make sure we replace existing ctx\n\t// that is previous child of parse tree\n\tif (this.buildParseTrees && this._ctx !== localctx) {\n\t\tif (this._ctx.parentCtx !== null) {\n\t\t\tthis._ctx.parentCtx.removeLastChild();\n\t\t\tthis._ctx.parentCtx.addChild(localctx);\n\t\t}\n\t}\n\tthis._ctx = localctx;\n};\n\n// Get the precedence level for the top-most precedence rule.\n//\n// @return The precedence level for the top-most precedence rule, or -1 if\n// the parser context is not nested within a precedence rule.\n\nParser.prototype.getPrecedence = function() {\n\tif (this._precedenceStack.length === 0) {\n\t\treturn -1;\n\t} else {\n\t\treturn this._precedenceStack[this._precedenceStack.length-1];\n\t}\n};\n\nParser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,\n\t\tprecedence) {\n\tthis.state = state;\n\tthis._precedenceStack.push(precedence);\n\tthis._ctx = localctx;\n\tthis._ctx.start = this._input.LT(1);\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t\t\t\t\t\t\t\t// left-recursive rules\n\t}\n};\n\n//\n// Like {@link //enterRule} but for recursive rules.\n\nParser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {\n\tvar previous = this._ctx;\n\tprevious.parentCtx = localctx;\n\tprevious.invokingState = state;\n\tprevious.stop = this._input.LT(-1);\n\n\tthis._ctx = localctx;\n\tthis._ctx.start = previous.start;\n\tif (this.buildParseTrees) {\n\t\tthis._ctx.addChild(previous);\n\t}\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t\t\t\t\t\t\t\t// left-recursive rules\n\t}\n};\n\nParser.prototype.unrollRecursionContexts = function(parentCtx) {\n\tthis._precedenceStack.pop();\n\tthis._ctx.stop = this._input.LT(-1);\n\tvar retCtx = this._ctx; // save current ctx (return value)\n\t// unroll so _ctx is as it was before call to recursive method\n\tif (this._parseListeners !== null) {\n\t\twhile (this._ctx !== parentCtx) {\n\t\t\tthis.triggerExitRuleEvent();\n\t\t\tthis._ctx = this._ctx.parentCtx;\n\t\t}\n\t} else {\n\t\tthis._ctx = parentCtx;\n\t}\n\t// hook into tree\n\tretCtx.parentCtx = parentCtx;\n\tif (this.buildParseTrees && parentCtx !== null) {\n\t\t// add return ctx into invoking rule's tree\n\t\tparentCtx.addChild(retCtx);\n\t}\n};\n\nParser.prototype.getInvokingContext = function(ruleIndex) {\n\tvar ctx = this._ctx;\n\twhile (ctx !== null) {\n\t\tif (ctx.ruleIndex === ruleIndex) {\n\t\t\treturn ctx;\n\t\t}\n\t\tctx = ctx.parentCtx;\n\t}\n\treturn null;\n};\n\nParser.prototype.precpred = function(localctx, precedence) {\n\treturn precedence >= this._precedenceStack[this._precedenceStack.length-1];\n};\n\nParser.prototype.inContext = function(context) {\n\t// TODO: useful in parser?\n\treturn false;\n};\n\n//\n// Checks whether or not {@code symbol} can follow the current state in the\n// ATN. The behavior of this method is equivalent to the following, but is\n// implemented such that the complete context-sensitive follow set does not\n// need to be explicitly constructed.\n//\n// <pre>\n// return getExpectedTokens().contains(symbol);\n// </pre>\n//\n// @param symbol the symbol type to check\n// @return {@code true} if {@code symbol} can follow the current state in\n// the ATN, otherwise {@code false}.\n\nParser.prototype.isExpectedToken = function(symbol) {\n\tvar atn = this._interp.atn;\n\tvar ctx = this._ctx;\n\tvar s = atn.states[this.state];\n\tvar following = atn.nextTokens(s);\n\tif (following.contains(symbol)) {\n\t\treturn true;\n\t}\n\tif (!following.contains(Token.EPSILON)) {\n\t\treturn false;\n\t}\n\twhile (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\tvar invokingState = atn.states[ctx.invokingState];\n\t\tvar rt = invokingState.transitions[0];\n\t\tfollowing = atn.nextTokens(rt.followState);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n\t\tctx = ctx.parentCtx;\n\t}\n\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n// Computes the set of input symbols which could follow the current parser\n// state and context, as given by {@link //getState} and {@link //getContext},\n// respectively.\n//\n// @see ATN//getExpectedTokens(int, RuleContext)\n//\nParser.prototype.getExpectedTokens = function() {\n\treturn this._interp.atn.getExpectedTokens(this.state, this._ctx);\n};\n\nParser.prototype.getExpectedTokensWithinCurrentRule = function() {\n\tvar atn = this._interp.atn;\n\tvar s = atn.states[this.state];\n\treturn atn.nextTokens(s);\n};\n\n// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//\nParser.prototype.getRuleIndex = function(ruleName) {\n\tvar ruleIndex = this.getRuleIndexMap()[ruleName];\n\tif (ruleIndex !== null) {\n\t\treturn ruleIndex;\n\t} else {\n\t\treturn -1;\n\t}\n};\n\n// Return List&lt;String&gt; of the rule names in your parser instance\n// leading up to a call to the current rule. You could override if\n// you want more details such as the file/line info of where\n// in the ATN a rule is invoked.\n//\n// this is very useful for error messages.\n//\nParser.prototype.getRuleInvocationStack = function(p) {\n\tp = p || null;\n\tif (p === null) {\n\t\tp = this._ctx;\n\t}\n\tvar stack = [];\n\twhile (p !== null) {\n\t\t// compute what follows who invoked us\n\t\tvar ruleIndex = p.ruleIndex;\n\t\tif (ruleIndex < 0) {\n\t\t\tstack.push(\"n/a\");\n\t\t} else {\n\t\t\tstack.push(this.ruleNames[ruleIndex]);\n\t\t}\n\t\tp = p.parentCtx;\n\t}\n\treturn stack;\n};\n\n// For debugging and other purposes.//\nParser.prototype.getDFAStrings = function() {\n\treturn this._interp.decisionToDFA.toString();\n};\n// For debugging and other purposes.//\nParser.prototype.dumpDFA = function() {\n\tvar seenOne = false;\n\tfor (var i = 0; i < this._interp.decisionToDFA.length; i++) {\n\t\tvar dfa = this._interp.decisionToDFA[i];\n\t\tif (dfa.states.length > 0) {\n\t\t\tif (seenOne) {\n\t\t\t\tconsole.log();\n\t\t\t}\n\t\t\tthis.printer.println(\"Decision \" + dfa.decision + \":\");\n\t\t\tthis.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n\t\t\tseenOne = true;\n\t\t}\n\t}\n};\n\n/*\n\"\t\t\tprinter = function() {\\r\\n\" +\n\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\"\t\t\t};\\r\\n\" +\n*/\n\nParser.prototype.getSourceName = function() {\n\treturn this._input.sourceName;\n};\n\n// During a parse is sometimes useful to listen in on the rule entry and exit\n// events as well as token matches. this is for quick and dirty debugging.\n//\nParser.prototype.setTrace = function(trace) {\n\tif (!trace) {\n\t\tthis.removeParseListener(this._tracer);\n\t\tthis._tracer = null;\n\t} else {\n\t\tif (this._tracer !== null) {\n\t\t\tthis.removeParseListener(this._tracer);\n\t\t}\n\t\tthis._tracer = new TraceListener(this);\n\t\tthis.addParseListener(this._tracer);\n\t}\n};\n\nexports.Parser = Parser;","import ErrorMessage from \"./error\";\r\nimport { BoolExpressionNode,ExpressionNode, ConstantNode, AdditionNode, MultiplicationNode, FunctionNode, SubtractionNode, DivisionNode, NegationNode, BoolAndNode, BoolOrNode, BoolNegationNode, BoolGNode, BoolGENode, BoolLNode, BoolConstantNode, BoolLENode, BoolNENode, BoolENode, TernaryOperatorNode, NodeType, IdentifierNode } from \"./astNode\";\r\nimport { Expression, Constant, BoolExpression, BoolConstant, Addition, Subtraction, Multiplication, Division, Negation, Variable, And, Or, BoolNot, Greater, GEqual, Less, LEqual, NotEqual, Equal, Function, TernaryOperator } from \"./expression\";\r\n\r\nexport class ExpCompilerContext{\r\n    indicies:Record<string,number>;\r\n    errors:ErrorMessage[];\r\n}\r\nexport function compileBoolExpression(item:BoolExpressionNode,context:ExpCompilerContext):BoolExpression{\r\n    switch(item.type){\r\n        case NodeType._And:{\r\n            let and = item as BoolAndNode;\r\n            return new And(compileBoolExpression(and.left,context)\r\n            ,compileBoolExpression(and.right,context));\r\n        }\r\n        case NodeType._Or:{\r\n            let or = item as BoolOrNode;\r\n            return new Or(compileBoolExpression(or.left,context)\r\n            ,compileBoolExpression(or.right,context));\r\n        }\r\n        case NodeType._Not:{\r\n            let not = item as BoolNegationNode;\r\n            return new BoolNot(compileBoolExpression(not.inner,context));\r\n        }\r\n        case NodeType._Greater:{\r\n            let g = item as BoolGNode;\r\n            return new Greater(compileExpression(g.left,context)\r\n            ,compileExpression(g.right,context)\r\n            );\r\n        }\r\n        case NodeType._GreaterEqual:{\r\n            let ge = item as BoolGENode;\r\n            return new GEqual(compileExpression(ge.left,context)\r\n            ,compileExpression(ge.right,context)\r\n            );\r\n        }\r\n        case NodeType._Less:{\r\n            let l = item as BoolLNode;\r\n            return new Less(compileExpression(l.left,context)\r\n            ,compileExpression(l.right,context)\r\n            );\r\n        }\r\n        case NodeType._LessEqual:{\r\n            let le = item as BoolLENode;\r\n            return new LEqual(compileExpression(le.left,context)\r\n            ,compileExpression(le.right,context)\r\n            );\r\n        }\r\n        case NodeType._Equal:{\r\n            let e = item as BoolENode;\r\n            return new Equal(compileExpression(e.left,context)\r\n            ,compileExpression(e.right,context));\r\n        }\r\n        case NodeType._NotEqual:{\r\n            let ne = item as BoolNENode;\r\n            return new NotEqual(compileExpression(ne.left,context)\r\n            ,compileExpression(ne.right,context));\r\n        }\r\n        case NodeType._BoolConstant:{\r\n            let bc = item as BoolConstantNode;\r\n            return new BoolConstant(bc.value);\r\n        }\r\n        default:\r\n            context.errors.push(new ErrorMessage(item.textPos,\"Unexpected boolean expression type at compileExpression()\"));\r\n            return new BoolConstant(false);\r\n    }\r\n}\r\nexport function compileExpression(item:ExpressionNode,context:ExpCompilerContext):Expression{\r\n    switch(item.type){\r\n        case NodeType._Addition:{\r\n            let add = item as AdditionNode;\r\n            return new Addition(compileExpression(add.left,context),compileExpression(add.right,context));\r\n        } \r\n        case NodeType._Subtraction:{\r\n            let sub = item as SubtractionNode;\r\n            return new Subtraction(compileExpression(sub.left,context),compileExpression(sub.right,context));\r\n        } \r\n        case NodeType._Multiplication:{\r\n            let mul = item as MultiplicationNode;\r\n            return new Multiplication(compileExpression(mul.left,context),compileExpression(mul.right,context));\r\n        } \r\n        case NodeType._Division:{\r\n            let div = item as DivisionNode;\r\n            return new Division(compileExpression(div.left,context),compileExpression(div.right,context));\r\n        }\r\n        case NodeType._Negation:{\r\n            let neg = item as NegationNode;\r\n            return new Negation(compileExpression(neg.inner,context));\r\n        }\r\n        case NodeType._Function:{\r\n            let fun = item as FunctionNode;\r\n            try{\r\n                return new Function(fun.name,fun.args.map(function(arg){\r\n                    return compileExpression(arg,context);\r\n                }));\r\n            }catch(exception){\r\n                context.errors.push(new ErrorMessage(item.textPos,exception));\r\n                return new Constant(0);\r\n            }\r\n        }\r\n        case NodeType._Constant:{\r\n            let con = item as ConstantNode;\r\n            return new Constant(con.value);\r\n        }\r\n        case NodeType._Ternary:{\r\n            let ter = item as TernaryOperatorNode;\r\n            return new TernaryOperator(compileBoolExpression(ter.condition,context)\r\n            ,compileExpression(ter.true,context)\r\n            ,compileExpression(ter.false,context));\r\n        }\r\n        case NodeType._Identifier:{\r\n            let _var = item as IdentifierNode;\r\n            if(context.indicies.hasOwnProperty(_var.id)){\r\n                return new Variable(context.indicies[_var.id],_var.id);\r\n            }\r\n            context.errors.push(new ErrorMessage(item.textPos,`Unexpected variable \"${_var.id}\" at compileExpression()`));\r\n            return new Constant(0);\r\n        }\r\n        default:\r\n            context.errors.push(new ErrorMessage(item.textPos,\"Unexpected expression type at compileExpression()\"));\r\n            return new Constant(0);\r\n    }\r\n}\r\n","import antlr4 from \"antlr4/error/\";\r\nimport ErrorMessage from \"./error\";\r\nimport { Token, Recognizer } from \"antlr4\";\r\nimport { TextPosition } from \"./astNode\";\r\n\r\nexport default class ErrorListener extends antlr4.ErrorListener {\r\n    errors:ErrorMessage[];\r\n    constructor(errors:ErrorMessage[]){\r\n      super();\r\n      this.errors = errors;\r\n    }\r\n    syntaxError(recognizer: Recognizer, offendingSymbol: Token, line: number, column: number, msg: string, e: any): void {\r\n      this.errors.push(new ErrorMessage(new TextPosition(line,column,offendingSymbol.start,offendingSymbol.stop), msg))\r\n    }\r\n    add(textPos:TextPosition,msg:string){\r\n      this.errors.push(new ErrorMessage(textPos,msg));\r\n    }\r\n  }","import ErrorMessage from \"./error\";\r\n\r\n\r\nexport class CompilerError extends Error {\r\n    messages: ErrorMessage[];\r\n    constructor(messages: ErrorMessage[]) {\r\n        super();\r\n        this.messages = messages;\r\n    }\r\n}\r\n","// Generated from e:\\projects\\evalExp\\src\\grammar\\expGrammar.g4 by ANTLR 4.8\r\n// jshint ignore: start\r\nvar antlr4 = require('antlr4/index');\r\n\r\n\r\n\r\nvar serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\",\r\n    \"\\u0002\\\"\\u010f\\b\\u0001\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0004\",\r\n    \"\\u0004\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\\t\",\r\n    \"\\u0007\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0004\\u000b\\t\\u000b\\u0004\",\r\n    \"\\f\\t\\f\\u0004\\r\\t\\r\\u0004\\u000e\\t\\u000e\\u0004\\u000f\\t\\u000f\\u0004\\u0010\",\r\n    \"\\t\\u0010\\u0004\\u0011\\t\\u0011\\u0004\\u0012\\t\\u0012\\u0004\\u0013\\t\\u0013\",\r\n    \"\\u0004\\u0014\\t\\u0014\\u0004\\u0015\\t\\u0015\\u0004\\u0016\\t\\u0016\\u0004\\u0017\",\r\n    \"\\t\\u0017\\u0004\\u0018\\t\\u0018\\u0004\\u0019\\t\\u0019\\u0004\\u001a\\t\\u001a\",\r\n    \"\\u0004\\u001b\\t\\u001b\\u0004\\u001c\\t\\u001c\\u0004\\u001d\\t\\u001d\\u0004\\u001e\",\r\n    \"\\t\\u001e\\u0004\\u001f\\t\\u001f\\u0004 \\t \\u0004!\\t!\\u0004\\\"\\t\\\"\\u0004#\",\r\n    \"\\t#\\u0004$\\t$\\u0003\\u0002\\u0003\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\",\r\n    \"\\u0005\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\\u0006\\u0003\",\r\n    \"\\u0006\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0005\\u0007_\",\r\n    \"\\n\\u0007\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0005\\bf\\n\\b\\u0003\",\r\n    \"\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0005\\tl\\n\\t\\u0003\\n\\u0006\\no\\n\\n\\r\\n\\u000e\",\r\n    \"\\np\\u0003\\n\\u0003\\n\\u0007\\nu\\n\\n\\f\\n\\u000e\\nx\\u000b\\n\\u0003\\n\\u0003\",\r\n    \"\\n\\u0005\\n|\\n\\n\\u0003\\n\\u0006\\n\\u007f\\n\\n\\r\\n\\u000e\\n\\u0080\\u0005\\n\",\r\n    \"\\u0083\\n\\n\\u0003\\n\\u0003\\n\\u0006\\n\\u0087\\n\\n\\r\\n\\u000e\\n\\u0088\\u0003\",\r\n    \"\\n\\u0003\\n\\u0005\\n\\u008d\\n\\n\\u0003\\n\\u0006\\n\\u0090\\n\\n\\r\\n\\u000e\\n\\u0091\",\r\n    \"\\u0005\\n\\u0094\\n\\n\\u0003\\n\\u0006\\n\\u0097\\n\\n\\r\\n\\u000e\\n\\u0098\\u0003\",\r\n    \"\\n\\u0003\\n\\u0005\\n\\u009d\\n\\n\\u0003\\n\\u0006\\n\\u00a0\\n\\n\\r\\n\\u000e\\n\\u00a1\",\r\n    \"\\u0005\\n\\u00a4\\n\\n\\u0003\\u000b\\u0006\\u000b\\u00a7\\n\\u000b\\r\\u000b\\u000e\",\r\n    \"\\u000b\\u00a8\\u0003\\f\\u0003\\f\\u0007\\f\\u00ad\\n\\f\\f\\f\\u000e\\f\\u00b0\\u000b\",\r\n    \"\\f\\u0003\\r\\u0003\\r\\u0003\\u000e\\u0003\\u000e\\u0003\\u000f\\u0003\\u000f\\u0003\",\r\n    \"\\u0010\\u0003\\u0010\\u0003\\u0011\\u0003\\u0011\\u0003\\u0012\\u0003\\u0012\\u0003\",\r\n    \"\\u0013\\u0003\\u0013\\u0003\\u0014\\u0003\\u0014\\u0003\\u0015\\u0003\\u0015\\u0003\",\r\n    \"\\u0016\\u0003\\u0016\\u0003\\u0017\\u0003\\u0017\\u0003\\u0018\\u0003\\u0018\\u0003\",\r\n    \"\\u0018\\u0003\\u0019\\u0003\\u0019\\u0003\\u0019\\u0003\\u001a\\u0003\\u001a\\u0003\",\r\n    \"\\u001a\\u0003\\u001b\\u0003\\u001b\\u0003\\u001c\\u0003\\u001c\\u0003\\u001d\\u0003\",\r\n    \"\\u001d\\u0003\\u001e\\u0003\\u001e\\u0003\\u001f\\u0003\\u001f\\u0003 \\u0003\",\r\n    \" \\u0003!\\u0003!\\u0003\\\"\\u0005\\\"\\u00e0\\n\\\"\\u0003\\\"\\u0003\\\"\\u0006\\\"\\u00e4\",\r\n    \"\\n\\\"\\r\\\"\\u000e\\\"\\u00e5\\u0003\\\"\\u0003\\\"\\u0003#\\u0006#\\u00eb\\n#\\r#\\u000e\",\r\n    \"#\\u00ec\\u0003#\\u0003#\\u0003$\\u0003$\\u0003$\\u0003$\\u0007$\\u00f5\\n$\\f\",\r\n    \"$\\u000e$\\u00f8\\u000b$\\u0003$\\u0005$\\u00fb\\n$\\u0003$\\u0003$\\u0005$\\u00ff\",\r\n    \"\\n$\\u0003$\\u0003$\\u0003$\\u0003$\\u0007$\\u0105\\n$\\f$\\u000e$\\u0108\\u000b\",\r\n    \"$\\u0003$\\u0003$\\u0005$\\u010c\\n$\\u0003$\\u0003$\\u0003\\u0106\\u0002%\\u0003\",\r\n    \"\\u0002\\u0005\\u0002\\u0007\\u0002\\t\\u0003\\u000b\\u0004\\r\\u0005\\u000f\\u0006\",\r\n    \"\\u0011\\u0007\\u0013\\b\\u0015\\t\\u0017\\n\\u0019\\u000b\\u001b\\f\\u001d\\r\\u001f\",\r\n    \"\\u000e!\\u000f#\\u0010%\\u0011\\'\\u0012)\\u0013+\\u0014-\\u0015/\\u00161\\u0017\",\r\n    \"3\\u00185\\u00197\\u001a9\\u001b;\\u001c=\\u001d?\\u001eA\\u001fC E!G\\\"\\u0003\",\r\n    \"\\u0002\\u000b\\u0003\\u0002c|\\u0003\\u0002C\\\\\\u0003\\u00022;\\u0004\\u0002\",\r\n    \"GGgg\\u0004\\u0002--//\\u0005\\u0002C\\\\aac|\\u0006\\u00022;C\\\\aac|\\u0004\\u0002\",\r\n    \"\\u000b\\u000b\\\"\\\"\\u0004\\u0002\\f\\f\\u000f\\u000f\\u0002\\u0127\\u0002\\t\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002\\u000b\\u0003\\u0002\\u0002\\u0002\\u0002\\r\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002\\u000f\\u0003\\u0002\\u0002\\u0002\\u0002\\u0011\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002\\u0013\\u0003\\u0002\\u0002\\u0002\\u0002\\u0015\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002\\u0017\\u0003\\u0002\\u0002\\u0002\\u0002\\u0019\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002\\u001b\\u0003\\u0002\\u0002\\u0002\\u0002\\u001d\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002\\u001f\\u0003\\u0002\\u0002\\u0002\\u0002!\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0002#\\u0003\\u0002\\u0002\\u0002\\u0002%\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002\\'\\u0003\\u0002\\u0002\\u0002\\u0002)\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002+\\u0003\\u0002\\u0002\\u0002\\u0002-\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002/\\u0003\\u0002\\u0002\\u0002\\u00021\\u0003\\u0002\\u0002\\u0002\\u0002\",\r\n    \"3\\u0003\\u0002\\u0002\\u0002\\u00025\\u0003\\u0002\\u0002\\u0002\\u00027\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00029\\u0003\\u0002\\u0002\\u0002\\u0002;\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0002=\\u0003\\u0002\\u0002\\u0002\\u0002?\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0002A\\u0003\\u0002\\u0002\\u0002\\u0002C\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002E\\u0003\\u0002\\u0002\\u0002\\u0002G\\u0003\\u0002\\u0002\\u0002\\u0003\",\r\n    \"I\\u0003\\u0002\\u0002\\u0002\\u0005K\\u0003\\u0002\\u0002\\u0002\\u0007M\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\tO\\u0003\\u0002\\u0002\\u0002\\u000bT\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\r^\\u0003\\u0002\\u0002\\u0002\\u000fe\\u0003\\u0002\\u0002\\u0002\\u0011\",\r\n    \"k\\u0003\\u0002\\u0002\\u0002\\u0013\\u00a3\\u0003\\u0002\\u0002\\u0002\\u0015\",\r\n    \"\\u00a6\\u0003\\u0002\\u0002\\u0002\\u0017\\u00aa\\u0003\\u0002\\u0002\\u0002\\u0019\",\r\n    \"\\u00b1\\u0003\\u0002\\u0002\\u0002\\u001b\\u00b3\\u0003\\u0002\\u0002\\u0002\\u001d\",\r\n    \"\\u00b5\\u0003\\u0002\\u0002\\u0002\\u001f\\u00b7\\u0003\\u0002\\u0002\\u0002!\",\r\n    \"\\u00b9\\u0003\\u0002\\u0002\\u0002#\\u00bb\\u0003\\u0002\\u0002\\u0002%\\u00bd\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\'\\u00bf\\u0003\\u0002\\u0002\\u0002)\\u00c1\\u0003\",\r\n    \"\\u0002\\u0002\\u0002+\\u00c3\\u0003\\u0002\\u0002\\u0002-\\u00c5\\u0003\\u0002\",\r\n    \"\\u0002\\u0002/\\u00c7\\u0003\\u0002\\u0002\\u00021\\u00ca\\u0003\\u0002\\u0002\",\r\n    \"\\u00023\\u00cd\\u0003\\u0002\\u0002\\u00025\\u00d0\\u0003\\u0002\\u0002\\u0002\",\r\n    \"7\\u00d2\\u0003\\u0002\\u0002\\u00029\\u00d4\\u0003\\u0002\\u0002\\u0002;\\u00d6\",\r\n    \"\\u0003\\u0002\\u0002\\u0002=\\u00d8\\u0003\\u0002\\u0002\\u0002?\\u00da\\u0003\",\r\n    \"\\u0002\\u0002\\u0002A\\u00dc\\u0003\\u0002\\u0002\\u0002C\\u00e3\\u0003\\u0002\",\r\n    \"\\u0002\\u0002E\\u00ea\\u0003\\u0002\\u0002\\u0002G\\u010b\\u0003\\u0002\\u0002\",\r\n    \"\\u0002IJ\\t\\u0002\\u0002\\u0002J\\u0004\\u0003\\u0002\\u0002\\u0002KL\\t\\u0003\",\r\n    \"\\u0002\\u0002L\\u0006\\u0003\\u0002\\u0002\\u0002MN\\t\\u0004\\u0002\\u0002N\\b\",\r\n    \"\\u0003\\u0002\\u0002\\u0002OP\\u0007v\\u0002\\u0002PQ\\u0007t\\u0002\\u0002Q\",\r\n    \"R\\u0007w\\u0002\\u0002RS\\u0007g\\u0002\\u0002S\\n\\u0003\\u0002\\u0002\\u0002\",\r\n    \"TU\\u0007h\\u0002\\u0002UV\\u0007c\\u0002\\u0002VW\\u0007n\\u0002\\u0002WX\\u0007\",\r\n    \"u\\u0002\\u0002XY\\u0007g\\u0002\\u0002Y\\f\\u0003\\u0002\\u0002\\u0002Z[\\u0007\",\r\n    \"~\\u0002\\u0002[_\\u0007~\\u0002\\u0002\\\\]\\u0007q\\u0002\\u0002]_\\u0007t\\u0002\",\r\n    \"\\u0002^Z\\u0003\\u0002\\u0002\\u0002^\\\\\\u0003\\u0002\\u0002\\u0002_\\u000e\\u0003\",\r\n    \"\\u0002\\u0002\\u0002`a\\u0007(\\u0002\\u0002af\\u0007(\\u0002\\u0002bc\\u0007\",\r\n    \"c\\u0002\\u0002cd\\u0007p\\u0002\\u0002df\\u0007f\\u0002\\u0002e`\\u0003\\u0002\",\r\n    \"\\u0002\\u0002eb\\u0003\\u0002\\u0002\\u0002f\\u0010\\u0003\\u0002\\u0002\\u0002\",\r\n    \"gl\\u0007#\\u0002\\u0002hi\\u0007p\\u0002\\u0002ij\\u0007q\\u0002\\u0002jl\\u0007\",\r\n    \"v\\u0002\\u0002kg\\u0003\\u0002\\u0002\\u0002kh\\u0003\\u0002\\u0002\\u0002l\\u0012\",\r\n    \"\\u0003\\u0002\\u0002\\u0002mo\\u0005\\u0007\\u0004\\u0002nm\\u0003\\u0002\\u0002\",\r\n    \"\\u0002op\\u0003\\u0002\\u0002\\u0002pn\\u0003\\u0002\\u0002\\u0002pq\\u0003\\u0002\",\r\n    \"\\u0002\\u0002qr\\u0003\\u0002\\u0002\\u0002rv\\u0005%\\u0013\\u0002su\\u0005\",\r\n    \"\\u0007\\u0004\\u0002ts\\u0003\\u0002\\u0002\\u0002ux\\u0003\\u0002\\u0002\\u0002\",\r\n    \"vt\\u0003\\u0002\\u0002\\u0002vw\\u0003\\u0002\\u0002\\u0002w\\u0082\\u0003\\u0002\",\r\n    \"\\u0002\\u0002xv\\u0003\\u0002\\u0002\\u0002y{\\t\\u0005\\u0002\\u0002z|\\t\\u0006\",\r\n    \"\\u0002\\u0002{z\\u0003\\u0002\\u0002\\u0002{|\\u0003\\u0002\\u0002\\u0002|~\\u0003\",\r\n    \"\\u0002\\u0002\\u0002}\\u007f\\u0005\\u0007\\u0004\\u0002~}\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u007f\\u0080\\u0003\\u0002\\u0002\\u0002\\u0080~\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0080\\u0081\\u0003\\u0002\\u0002\\u0002\\u0081\\u0083\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0082y\\u0003\\u0002\\u0002\\u0002\\u0082\\u0083\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0083\\u00a4\\u0003\\u0002\\u0002\\u0002\\u0084\\u0086\\u0005%\\u0013\",\r\n    \"\\u0002\\u0085\\u0087\\u0005\\u0007\\u0004\\u0002\\u0086\\u0085\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0087\\u0088\\u0003\\u0002\\u0002\\u0002\\u0088\\u0086\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0088\\u0089\\u0003\\u0002\\u0002\\u0002\\u0089\\u0093\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u008a\\u008c\\t\\u0005\\u0002\\u0002\\u008b\\u008d\\t\\u0006\\u0002\\u0002\",\r\n    \"\\u008c\\u008b\\u0003\\u0002\\u0002\\u0002\\u008c\\u008d\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u008d\\u008f\\u0003\\u0002\\u0002\\u0002\\u008e\\u0090\\u0005\\u0007\\u0004\\u0002\",\r\n    \"\\u008f\\u008e\\u0003\\u0002\\u0002\\u0002\\u0090\\u0091\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0091\\u008f\\u0003\\u0002\\u0002\\u0002\\u0091\\u0092\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0092\\u0094\\u0003\\u0002\\u0002\\u0002\\u0093\\u008a\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0093\\u0094\\u0003\\u0002\\u0002\\u0002\\u0094\\u00a4\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0095\\u0097\\u0005\\u0007\\u0004\\u0002\\u0096\\u0095\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0097\\u0098\\u0003\\u0002\\u0002\\u0002\\u0098\\u0096\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0098\\u0099\\u0003\\u0002\\u0002\\u0002\\u0099\\u009a\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u009a\\u009c\\t\\u0005\\u0002\\u0002\\u009b\\u009d\\t\\u0006\\u0002\\u0002\\u009c\",\r\n    \"\\u009b\\u0003\\u0002\\u0002\\u0002\\u009c\\u009d\\u0003\\u0002\\u0002\\u0002\\u009d\",\r\n    \"\\u009f\\u0003\\u0002\\u0002\\u0002\\u009e\\u00a0\\u0005\\u0007\\u0004\\u0002\\u009f\",\r\n    \"\\u009e\\u0003\\u0002\\u0002\\u0002\\u00a0\\u00a1\\u0003\\u0002\\u0002\\u0002\\u00a1\",\r\n    \"\\u009f\\u0003\\u0002\\u0002\\u0002\\u00a1\\u00a2\\u0003\\u0002\\u0002\\u0002\\u00a2\",\r\n    \"\\u00a4\\u0003\\u0002\\u0002\\u0002\\u00a3n\\u0003\\u0002\\u0002\\u0002\\u00a3\",\r\n    \"\\u0084\\u0003\\u0002\\u0002\\u0002\\u00a3\\u0096\\u0003\\u0002\\u0002\\u0002\\u00a4\",\r\n    \"\\u0014\\u0003\\u0002\\u0002\\u0002\\u00a5\\u00a7\\u0005\\u0007\\u0004\\u0002\\u00a6\",\r\n    \"\\u00a5\\u0003\\u0002\\u0002\\u0002\\u00a7\\u00a8\\u0003\\u0002\\u0002\\u0002\\u00a8\",\r\n    \"\\u00a6\\u0003\\u0002\\u0002\\u0002\\u00a8\\u00a9\\u0003\\u0002\\u0002\\u0002\\u00a9\",\r\n    \"\\u0016\\u0003\\u0002\\u0002\\u0002\\u00aa\\u00ae\\t\\u0007\\u0002\\u0002\\u00ab\",\r\n    \"\\u00ad\\t\\b\\u0002\\u0002\\u00ac\\u00ab\\u0003\\u0002\\u0002\\u0002\\u00ad\\u00b0\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00ae\\u00ac\\u0003\\u0002\\u0002\\u0002\\u00ae\\u00af\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00af\\u0018\\u0003\\u0002\\u0002\\u0002\\u00b0\\u00ae\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00b1\\u00b2\\u0007-\\u0002\\u0002\\u00b2\\u001a\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00b3\\u00b4\\u0007/\\u0002\\u0002\\u00b4\\u001c\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00b5\\u00b6\\u0007,\\u0002\\u0002\\u00b6\\u001e\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u00b7\\u00b8\\u00071\\u0002\\u0002\\u00b8 \\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00b9\\u00ba\\u0007*\\u0002\\u0002\\u00ba\\\"\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00bb\\u00bc\\u0007+\\u0002\\u0002\\u00bc$\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00bd\\u00be\\u00070\\u0002\\u0002\\u00be&\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00bf\\u00c0\\u0007.\\u0002\\u0002\\u00c0(\\u0003\\u0002\\u0002\\u0002\\u00c1\",\r\n    \"\\u00c2\\u0007`\\u0002\\u0002\\u00c2*\\u0003\\u0002\\u0002\\u0002\\u00c3\\u00c4\",\r\n    \"\\u0007>\\u0002\\u0002\\u00c4,\\u0003\\u0002\\u0002\\u0002\\u00c5\\u00c6\\u0007\",\r\n    \"@\\u0002\\u0002\\u00c6.\\u0003\\u0002\\u0002\\u0002\\u00c7\\u00c8\\u0007>\\u0002\",\r\n    \"\\u0002\\u00c8\\u00c9\\u0007?\\u0002\\u0002\\u00c90\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00ca\\u00cb\\u0007@\\u0002\\u0002\\u00cb\\u00cc\\u0007?\\u0002\\u0002\\u00cc\",\r\n    \"2\\u0003\\u0002\\u0002\\u0002\\u00cd\\u00ce\\u0007#\\u0002\\u0002\\u00ce\\u00cf\",\r\n    \"\\u0007?\\u0002\\u0002\\u00cf4\\u0003\\u0002\\u0002\\u0002\\u00d0\\u00d1\\u0007\",\r\n    \"?\\u0002\\u0002\\u00d16\\u0003\\u0002\\u0002\\u0002\\u00d2\\u00d3\\u0007=\\u0002\",\r\n    \"\\u0002\\u00d38\\u0003\\u0002\\u0002\\u0002\\u00d4\\u00d5\\u0007<\\u0002\\u0002\",\r\n    \"\\u00d5:\\u0003\\u0002\\u0002\\u0002\\u00d6\\u00d7\\u0007}\\u0002\\u0002\\u00d7\",\r\n    \"<\\u0003\\u0002\\u0002\\u0002\\u00d8\\u00d9\\u0007\\u007f\\u0002\\u0002\\u00d9\",\r\n    \">\\u0003\\u0002\\u0002\\u0002\\u00da\\u00db\\u0007)\\u0002\\u0002\\u00db@\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u00dc\\u00dd\\u0007A\\u0002\\u0002\\u00ddB\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00de\\u00e0\\u0007\\u000f\\u0002\\u0002\\u00df\\u00de\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00df\\u00e0\\u0003\\u0002\\u0002\\u0002\\u00e0\\u00e1\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00e1\\u00e4\\u0007\\f\\u0002\\u0002\\u00e2\\u00e4\\u0007\\u000f\",\r\n    \"\\u0002\\u0002\\u00e3\\u00df\\u0003\\u0002\\u0002\\u0002\\u00e3\\u00e2\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00e4\\u00e5\\u0003\\u0002\\u0002\\u0002\\u00e5\\u00e3\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00e5\\u00e6\\u0003\\u0002\\u0002\\u0002\\u00e6\\u00e7\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00e7\\u00e8\\b\\\"\\u0002\\u0002\\u00e8D\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u00e9\\u00eb\\t\\t\\u0002\\u0002\\u00ea\\u00e9\\u0003\\u0002\\u0002\\u0002\\u00eb\",\r\n    \"\\u00ec\\u0003\\u0002\\u0002\\u0002\\u00ec\\u00ea\\u0003\\u0002\\u0002\\u0002\\u00ec\",\r\n    \"\\u00ed\\u0003\\u0002\\u0002\\u0002\\u00ed\\u00ee\\u0003\\u0002\\u0002\\u0002\\u00ee\",\r\n    \"\\u00ef\\b#\\u0002\\u0002\\u00efF\\u0003\\u0002\\u0002\\u0002\\u00f0\\u00f1\\u0007\",\r\n    \"1\\u0002\\u0002\\u00f1\\u00f2\\u00071\\u0002\\u0002\\u00f2\\u00f6\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u00f3\\u00f5\\n\\n\\u0002\\u0002\\u00f4\\u00f3\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00f5\\u00f8\\u0003\\u0002\\u0002\\u0002\\u00f6\\u00f4\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00f6\\u00f7\\u0003\\u0002\\u0002\\u0002\\u00f7\\u00fe\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00f8\\u00f6\\u0003\\u0002\\u0002\\u0002\\u00f9\\u00fb\\u0007\\u000f\\u0002\",\r\n    \"\\u0002\\u00fa\\u00f9\\u0003\\u0002\\u0002\\u0002\\u00fa\\u00fb\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00fb\\u00fc\\u0003\\u0002\\u0002\\u0002\\u00fc\\u00ff\\u0007\\f\\u0002\",\r\n    \"\\u0002\\u00fd\\u00ff\\u0007t\\u0002\\u0002\\u00fe\\u00fa\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u00fe\\u00fd\\u0003\\u0002\\u0002\\u0002\\u00ff\\u010c\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0100\\u0101\\u00071\\u0002\\u0002\\u0101\\u0102\\u0007,\\u0002\\u0002\",\r\n    \"\\u0102\\u0106\\u0003\\u0002\\u0002\\u0002\\u0103\\u0105\\u000b\\u0002\\u0002\\u0002\",\r\n    \"\\u0104\\u0103\\u0003\\u0002\\u0002\\u0002\\u0105\\u0108\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0106\\u0107\\u0003\\u0002\\u0002\\u0002\\u0106\\u0104\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0107\\u0109\\u0003\\u0002\\u0002\\u0002\\u0108\\u0106\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0109\\u010a\\u0007,\\u0002\\u0002\\u010a\\u010c\\u00071\\u0002\\u0002\\u010b\",\r\n    \"\\u00f0\\u0003\\u0002\\u0002\\u0002\\u010b\\u0100\\u0003\\u0002\\u0002\\u0002\\u010c\",\r\n    \"\\u010d\\u0003\\u0002\\u0002\\u0002\\u010d\\u010e\\b$\\u0002\\u0002\\u010eH\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u001e\\u0002^ekpv{\\u0080\\u0082\\u0088\\u008c\\u0091\\u0093\",\r\n    \"\\u0098\\u009c\\u00a1\\u00a3\\u00a8\\u00ae\\u00df\\u00e3\\u00e5\\u00ec\\u00f6\\u00fa\",\r\n    \"\\u00fe\\u0106\\u010b\\u0003\\b\\u0002\\u0002\"].join(\"\");\r\n\r\n\r\nvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\r\n\r\nvar decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });\r\n\r\nfunction expGrammarLexer(input) {\r\n\tantlr4.Lexer.call(this, input);\r\n    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\r\n    return this;\r\n}\r\n\r\nexpGrammarLexer.prototype = Object.create(antlr4.Lexer.prototype);\r\nexpGrammarLexer.prototype.constructor = expGrammarLexer;\r\n\r\nObject.defineProperty(expGrammarLexer.prototype, \"atn\", {\r\n        get : function() {\r\n                return atn;\r\n        }\r\n});\r\n\r\nexpGrammarLexer.EOF = antlr4.Token.EOF;\r\nexpGrammarLexer.TRUE = 1;\r\nexpGrammarLexer.FALSE = 2;\r\nexpGrammarLexer.OR = 3;\r\nexpGrammarLexer.AND = 4;\r\nexpGrammarLexer.NOT = 5;\r\nexpGrammarLexer.FLOAT = 6;\r\nexpGrammarLexer.INT = 7;\r\nexpGrammarLexer.ID = 8;\r\nexpGrammarLexer.PLUS = 9;\r\nexpGrammarLexer.MINUS = 10;\r\nexpGrammarLexer.ASTERISK = 11;\r\nexpGrammarLexer.DIVISION = 12;\r\nexpGrammarLexer.LPAREN = 13;\r\nexpGrammarLexer.RPAREN = 14;\r\nexpGrammarLexer.DOT = 15;\r\nexpGrammarLexer.COMMA = 16;\r\nexpGrammarLexer.CARET = 17;\r\nexpGrammarLexer.L = 18;\r\nexpGrammarLexer.G = 19;\r\nexpGrammarLexer.LE = 20;\r\nexpGrammarLexer.GE = 21;\r\nexpGrammarLexer.NE = 22;\r\nexpGrammarLexer.E = 23;\r\nexpGrammarLexer.SEMICOLON = 24;\r\nexpGrammarLexer.COLON = 25;\r\nexpGrammarLexer.LCRL = 26;\r\nexpGrammarLexer.RCRL = 27;\r\nexpGrammarLexer.APOSTROPHE = 28;\r\nexpGrammarLexer.QUESTIONMARK = 29;\r\nexpGrammarLexer.NEWLINE = 30;\r\nexpGrammarLexer.WHITESPACE = 31;\r\nexpGrammarLexer.COMMENT = 32;\r\n\r\nexpGrammarLexer.prototype.channelNames = [ \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\" ];\r\n\r\nexpGrammarLexer.prototype.modeNames = [ \"DEFAULT_MODE\" ];\r\n\r\nexpGrammarLexer.prototype.literalNames = [ null, \"'true'\", \"'false'\", null, \r\n                                           null, null, null, null, null, \r\n                                           \"'+'\", \"'-'\", \"'*'\", \"'/'\", \"'('\", \r\n                                           \"')'\", \"'.'\", \"','\", \"'^'\", \"'<'\", \r\n                                           \"'>'\", \"'<='\", \"'>='\", \"'!='\", \r\n                                           \"'='\", \"';'\", \"':'\", \"'{'\", \"'}'\", \r\n                                           \"'''\", \"'?'\" ];\r\n\r\nexpGrammarLexer.prototype.symbolicNames = [ null, \"TRUE\", \"FALSE\", \"OR\", \r\n                                            \"AND\", \"NOT\", \"FLOAT\", \"INT\", \r\n                                            \"ID\", \"PLUS\", \"MINUS\", \"ASTERISK\", \r\n                                            \"DIVISION\", \"LPAREN\", \"RPAREN\", \r\n                                            \"DOT\", \"COMMA\", \"CARET\", \"L\", \r\n                                            \"G\", \"LE\", \"GE\", \"NE\", \"E\", \r\n                                            \"SEMICOLON\", \"COLON\", \"LCRL\", \r\n                                            \"RCRL\", \"APOSTROPHE\", \"QUESTIONMARK\", \r\n                                            \"NEWLINE\", \"WHITESPACE\", \"COMMENT\" ];\r\n\r\nexpGrammarLexer.prototype.ruleNames = [ \"LOWERCASE\", \"UPPERCASE\", \"DIGIT\", \r\n                                        \"TRUE\", \"FALSE\", \"OR\", \"AND\", \"NOT\", \r\n                                        \"FLOAT\", \"INT\", \"ID\", \"PLUS\", \"MINUS\", \r\n                                        \"ASTERISK\", \"DIVISION\", \"LPAREN\", \r\n                                        \"RPAREN\", \"DOT\", \"COMMA\", \"CARET\", \r\n                                        \"L\", \"G\", \"LE\", \"GE\", \"NE\", \"E\", \r\n                                        \"SEMICOLON\", \"COLON\", \"LCRL\", \"RCRL\", \r\n                                        \"APOSTROPHE\", \"QUESTIONMARK\", \"NEWLINE\", \r\n                                        \"WHITESPACE\", \"COMMENT\" ];\r\n\r\nexpGrammarLexer.prototype.grammarFileName = \"expGrammar.g4\";\r\n\r\n\r\nexports.expGrammarLexer = expGrammarLexer;\r\n\r\n"],"sourceRoot":""}